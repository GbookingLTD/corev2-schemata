// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using GBookingAPIv2;
//
//    var common = Common.FromJson(jsonString);
//    var models = Models.FromJson(jsonString);

namespace GBookingAPIv2
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Common
    {
        [JsonProperty("$id")]
        public Uri Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("properties")]
        public CommonProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> CommonRequired { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class CommonProperties
    {
        [JsonProperty("jsonrpc")]
        public Jsonrpc Jsonrpc { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public Error Error { get; set; }

        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        [JsonProperty("method", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Method { get; set; }

        [JsonProperty("params", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Params { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Result { get; set; }
    }

    public partial class Cred
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("oneOf")]
        public List<CredOneOf> OneOf { get; set; }
    }

    public partial class CredOneOf
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("params", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Params { get; set; }

        [JsonProperty("required")]
        public List<string> OneOfRequired { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public OneOfProperties Properties { get; set; }
    }

    public partial class OneOfProperties
    {
        [JsonProperty("user")]
        public PuneHedgehog User { get; set; }

        [JsonProperty("token")]
        public PuneHedgehog Token { get; set; }
    }

    public partial class PuneHedgehog
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }
    }

    public partial class Error
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public ErrorProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> ErrorRequired { get; set; }
    }

    public partial class ErrorProperties
    {
        [JsonProperty("code")]
        public Code Code { get; set; }

        [JsonProperty("message")]
        public PuneHedgehog Message { get; set; }

        [JsonProperty("data")]
        public PuneHedgehog Data { get; set; }
    }

    public partial class Code
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("meta:enum")]
        public Dictionary<string, string> MetaEnum { get; set; }

        [JsonProperty("enum")]
        public List<long> Enum { get; set; }
    }

    public partial class Id
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeUnion Type { get; set; }
    }

    public partial class Jsonrpc
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("const")]
        public string Const { get; set; }
    }

    public partial class Models
    {
        [JsonProperty("$id")]
        public Uri Id { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("properties")]
        public ModelsProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ModelsRequired { get; set; }

        [JsonProperty("definitions", NullValueHandling = NullValueHandling.Ignore)]
        public Definitions Definitions { get; set; }

        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("meta:extensible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MetaExtensible { get; set; }

        [JsonProperty("meta:extends", NullValueHandling = NullValueHandling.Ignore)]
        public List<Uri> MetaExtends { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeElement? Type { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class Definitions
    {
        [JsonProperty("MetroStation", NullValueHandling = NullValueHandling.Ignore)]
        public MetroStation MetroStation { get; set; }

        [JsonProperty("Department", NullValueHandling = NullValueHandling.Ignore)]
        public Department Department { get; set; }

        [JsonProperty("Cabinet", NullValueHandling = NullValueHandling.Ignore)]
        public Cabinet Cabinet { get; set; }

        [JsonProperty("TaxonomyShowcase", NullValueHandling = NullValueHandling.Ignore)]
        public TaxonomyShowcase TaxonomyShowcase { get; set; }

        [JsonProperty("BusinessTaxonomyPrice", NullValueHandling = NullValueHandling.Ignore)]
        public BusinessTaxonomyPrice BusinessTaxonomyPrice { get; set; }

        [JsonProperty("AdditionalBusinessTaxonomyPrice", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalBusinessTaxonomyPrice AdditionalBusinessTaxonomyPrice { get; set; }

        [JsonProperty("AdditionalBusinessTaxonomyProduct", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalBusinessTaxonomyProduct AdditionalBusinessTaxonomyProduct { get; set; }

        [JsonProperty("AdditionalDuration", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalDuration AdditionalDuration { get; set; }

        [JsonProperty("Consumable", NullValueHandling = NullValueHandling.Ignore)]
        public Consumable Consumable { get; set; }

        [JsonProperty("BusinessTaxonomy", NullValueHandling = NullValueHandling.Ignore)]
        public BusinessTaxonomy BusinessTaxonomy { get; set; }

        [JsonProperty("BackofficeConfiguration", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeConfiguration BackofficeConfiguration { get; set; }

        [JsonProperty("WidgetConfiguration", NullValueHandling = NullValueHandling.Ignore)]
        public WidgetConfiguration WidgetConfiguration { get; set; }

        [JsonProperty("ResourceProfile", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceProfile ResourceProfile { get; set; }

        [JsonProperty("ResourceTaxonomyLevel", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceTaxonomyLevel ResourceTaxonomyLevel { get; set; }

        [JsonProperty("ResourceTaxonomyChildren", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceTaxonomyChildren ResourceTaxonomyChildren { get; set; }

        [JsonProperty("EvenOddTimetable", NullValueHandling = NullValueHandling.Ignore)]
        public EvenOddTimetable EvenOddTimetable { get; set; }

        [JsonProperty("ResourceLocation", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceLocation ResourceLocation { get; set; }
    }

    public partial class AdditionalBusinessTaxonomyPrice
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public AdditionalBusinessTaxonomyPriceProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> AdditionalBusinessTaxonomyPriceRequired { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class AdditionalBusinessTaxonomyPriceProperties
    {
        [JsonProperty("resourceLevel")]
        public PuneHedgehog ResourceLevel { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }

        [JsonProperty("amount")]
        public Amount Amount { get; set; }

        [JsonProperty("stockAmount")]
        public Amount StockAmount { get; set; }

        [JsonProperty("type")]
        public TypeClass Type { get; set; }
    }

    public partial class Amount
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("default")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Default { get; set; }
    }

    public partial class Currency
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("$ref")]
        public Uri Ref { get; set; }
    }

    public partial class TypeClass
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("enum")]
        public List<string> Enum { get; set; }

        [JsonProperty("meta:enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<TypeMetaEnum> MetaEnum { get; set; }
    }

    public partial class TypeMetaEnum
    {
        [JsonProperty("equal", NullValueHandling = NullValueHandling.Ignore)]
        public string Equal { get; set; }

        [JsonProperty("begin_with", NullValueHandling = NullValueHandling.Ignore)]
        public string BeginWith { get; set; }

        [JsonProperty("average", NullValueHandling = NullValueHandling.Ignore)]
        public string Average { get; set; }
    }

    public partial class AdditionalBusinessTaxonomyProduct
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public AdditionalBusinessTaxonomyProductProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> AdditionalBusinessTaxonomyProductRequired { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class AdditionalBusinessTaxonomyProductProperties
    {
        [JsonProperty("id")]
        public PuneHedgehog Id { get; set; }

        [JsonProperty("extraID")]
        public PuneHedgehog ExtraId { get; set; }

        [JsonProperty("required")]
        public PuneHedgehog PropertiesRequired { get; set; }
    }

    public partial class AdditionalDuration
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public AdditionalDurationProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class AdditionalDurationProperties
    {
        [JsonProperty("level")]
        public TartuGecko Level { get; set; }

        [JsonProperty("duration")]
        public Birthday Duration { get; set; }
    }

    public partial class Birthday
    {
        [JsonProperty("type")]
        public List<TypeElement> Type { get; set; }
    }

    public partial class TartuGecko
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }
    }

    public partial class BackofficeConfiguration
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public BackofficeConfigurationProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class BackofficeConfigurationProperties
    {
        [JsonProperty("revisionVersion")]
        public TartuGecko RevisionVersion { get; set; }

        [JsonProperty("scheduleDefaultWorkersLimit")]
        public LivingstoneSouthernWhiteFacedOwl ScheduleDefaultWorkersLimit { get; set; }

        [JsonProperty("resourceTimetableType")]
        public Repeats ResourceTimetableType { get; set; }

        [JsonProperty("enableMasterImportance")]
        public HammerfestPonies EnableMasterImportance { get; set; }

        [JsonProperty("showTestRecord")]
        public HammerfestPonies ShowTestRecord { get; set; }

        [JsonProperty("skipServiceFiltering")]
        public HammerfestPonies SkipServiceFiltering { get; set; }

        [JsonProperty("skipAppointmentPriceUpdate")]
        public HammerfestPonies SkipAppointmentPriceUpdate { get; set; }

        [JsonProperty("showManualChanges")]
        public HammerfestPonies ShowManualChanges { get; set; }

        [JsonProperty("enableExtendedRecordsClientStatistics")]
        public HammerfestPonies EnableExtendedRecordsClientStatistics { get; set; }

        [JsonProperty("pastTimeEdit")]
        public LivingstoneSouthernWhiteFacedOwl PastTimeEdit { get; set; }

        [JsonProperty("cabinetsEnabled")]
        public HammerfestPonies CabinetsEnabled { get; set; }

        [JsonProperty("appointmentFutureMoving")]
        public HammerfestPonies AppointmentFutureMoving { get; set; }

        [JsonProperty("showClientContractNumber")]
        public HammerfestPonies ShowClientContractNumber { get; set; }

        [JsonProperty("showGapWindow")]
        public HammerfestPonies ShowGapWindow { get; set; }

        [JsonProperty("showFirstAvailableSlot")]
        public HammerfestPonies ShowFirstAvailableSlot { get; set; }

        [JsonProperty("noInternetAlert")]
        public HammerfestPonies NoInternetAlert { get; set; }

        [JsonProperty("showWorkerDescriptionInEvent")]
        public HammerfestPonies ShowWorkerDescriptionInEvent { get; set; }

        [JsonProperty("schduleWeekViewIsDefault")]
        public HammerfestPonies SchduleWeekViewIsDefault { get; set; }

        [JsonProperty("showPassportId")]
        public HammerfestPonies ShowPassportId { get; set; }

        [JsonProperty("showFax")]
        public HammerfestPonies ShowFax { get; set; }

        [JsonProperty("showBirthDate")]
        public HammerfestPonies ShowBirthDate { get; set; }

        [JsonProperty("showEmail")]
        public HammerfestPonies ShowEmail { get; set; }

        [JsonProperty("showAddress")]
        public HammerfestPonies ShowAddress { get; set; }

        [JsonProperty("showIsraelCity")]
        public HammerfestPonies ShowIsraelCity { get; set; }

        [JsonProperty("showHouseNumber")]
        public HammerfestPonies ShowHouseNumber { get; set; }

        [JsonProperty("showKupatHolim")]
        public HammerfestPonies ShowKupatHolim { get; set; }

        [JsonProperty("showDepartmentFilter")]
        public HammerfestPonies ShowDepartmentFilter { get; set; }

        [JsonProperty("showDepartments")]
        public HammerfestPonies ShowDepartments { get; set; }

        [JsonProperty("showDepartmentsConfiguration")]
        public HammerfestPonies ShowDepartmentsConfiguration { get; set; }

        [JsonProperty("showRooms")]
        public HammerfestPonies ShowRooms { get; set; }

        [JsonProperty("showClientAppearOnSchedule")]
        public HammerfestPonies ShowClientAppearOnSchedule { get; set; }

        [JsonProperty("showClientAppear")]
        public HammerfestPonies ShowClientAppear { get; set; }

        [JsonProperty("skipCancelIfClientNotAppear")]
        public HammerfestPonies SkipCancelIfClientNotAppear { get; set; }

        [JsonProperty("showClientPayment")]
        public HammerfestPonies ShowClientPayment { get; set; }

        [JsonProperty("showExtraClientInfo")]
        public HammerfestPonies ShowExtraClientInfo { get; set; }

        [JsonProperty("showUTM")]
        public HammerfestPonies ShowUtm { get; set; }

        [JsonProperty("showWorkerStatus")]
        public HammerfestPonies ShowWorkerStatus { get; set; }

        [JsonProperty("enableBlackList")]
        public HammerfestPonies EnableBlackList { get; set; }

        [JsonProperty("enableCalculateShedule")]
        public HammerfestPonies EnableCalculateShedule { get; set; }

        [JsonProperty("showSeasonTickets")]
        public HammerfestPonies ShowSeasonTickets { get; set; }

        [JsonProperty("showLeadsScreen")]
        public HammerfestPonies ShowLeadsScreen { get; set; }

        [JsonProperty("showGeneratableReportsScreen")]
        public HammerfestPonies ShowGeneratableReportsScreen { get; set; }

        [JsonProperty("schedulerWeekViewType")]
        public Repeats SchedulerWeekViewType { get; set; }

        [JsonProperty("workWeekStart")]
        public LivingstoneSouthernWhiteFacedOwl WorkWeekStart { get; set; }

        [JsonProperty("workWeekEnd")]
        public LivingstoneSouthernWhiteFacedOwl WorkWeekEnd { get; set; }

        [JsonProperty("scheduleWorkerHours")]
        public HammerfestPonies ScheduleWorkerHours { get; set; }

        [JsonProperty("showTaxonomyLocalization")]
        public HammerfestPonies ShowTaxonomyLocalization { get; set; }

        [JsonProperty("highlightedResource")]
        public HammerfestPonies HighlightedResource { get; set; }

        [JsonProperty("showAdditionalFields")]
        public HammerfestPonies ShowAdditionalFields { get; set; }

        [JsonProperty("exportToExcelRemovedClients")]
        public HammerfestPonies ExportToExcelRemovedClients { get; set; }

        [JsonProperty("checkClientOverlapping")]
        public HammerfestPonies CheckClientOverlapping { get; set; }

        [JsonProperty("hideCustomerPortalFooter")]
        public HammerfestPonies HideCustomerPortalFooter { get; set; }

        [JsonProperty("readonlyResourceSchedule")]
        public HammerfestPonies ReadonlyResourceSchedule { get; set; }

        [JsonProperty("showClientImage")]
        public HammerfestPonies ShowClientImage { get; set; }

        [JsonProperty("stateLevelHolidays")]
        public DefaultFilteredWorkers StateLevelHolidays { get; set; }

        [JsonProperty("stateLevelHolidaysNotWorking")]
        public HammerfestPonies StateLevelHolidaysNotWorking { get; set; }

        [JsonProperty("paymentProvider")]
        public BackofficeType PaymentProvider { get; set; }

        [JsonProperty("showDefaulterBlockscreen")]
        public HammerfestPonies ShowDefaulterBlockscreen { get; set; }

        [JsonProperty("allowSmsTranslit")]
        public HammerfestPonies AllowSmsTranslit { get; set; }

        [JsonProperty("defaultGTScheduleDayView")]
        public HammerfestPonies DefaultGtScheduleDayView { get; set; }

        [JsonProperty("enableSourceChoice")]
        public HammerfestPonies EnableSourceChoice { get; set; }

        [JsonProperty("manualExceptionSupport")]
        public HammerfestPonies ManualExceptionSupport { get; set; }

        [JsonProperty("showWorkerExtraId")]
        public HammerfestPonies ShowWorkerExtraId { get; set; }

        [JsonProperty("editAppExtraId")]
        public HammerfestPonies EditAppExtraId { get; set; }

        [JsonProperty("useGtAppMethod")]
        public HammerfestPonies UseGtAppMethod { get; set; }

        [JsonProperty("disableAppointmentClientInlineEditor")]
        public HammerfestPonies DisableAppointmentClientInlineEditor { get; set; }

        [JsonProperty("enableClientCard")]
        public HammerfestPonies EnableClientCard { get; set; }

        [JsonProperty("enableClientMedicalCardReport")]
        public HammerfestPonies EnableClientMedicalCardReport { get; set; }

        [JsonProperty("enableCustomOnlinePaymentConfirmation")]
        public HammerfestPonies EnableCustomOnlinePaymentConfirmation { get; set; }

        [JsonProperty("customOnlinePaymentConfirmationTemplate")]
        public HammerfestPonies CustomOnlinePaymentConfirmationTemplate { get; set; }

        [JsonProperty("showFiredWorkerAppointmentAlert")]
        public HammerfestPonies ShowFiredWorkerAppointmentAlert { get; set; }

        [JsonProperty("showDeliveryStatus")]
        public HammerfestPonies ShowDeliveryStatus { get; set; }

        [JsonProperty("showTaxonomyChildren")]
        public HammerfestPonies ShowTaxonomyChildren { get; set; }

        [JsonProperty("editTaxonomyChildren")]
        public HammerfestPonies EditTaxonomyChildren { get; set; }

        [JsonProperty("showTaxonomyVisitType")]
        public HammerfestPonies ShowTaxonomyVisitType { get; set; }

        [JsonProperty("editTaxonomyVisitType")]
        public HammerfestPonies EditTaxonomyVisitType { get; set; }

        [JsonProperty("finId")]
        public TartuGecko FinId { get; set; }

        [JsonProperty("finName")]
        public TartuGecko FinName { get; set; }

        [JsonProperty("enableServiceTimeLimit")]
        public HammerfestPonies EnableServiceTimeLimit { get; set; }

        [JsonProperty("showGender")]
        public HammerfestPonies ShowGender { get; set; }

        [JsonProperty("showGenderInRecords")]
        public HammerfestPonies ShowGenderInRecords { get; set; }

        [JsonProperty("showWidgetColorTheme")]
        public HammerfestPonies ShowWidgetColorTheme { get; set; }

        [JsonProperty("enableExtendedPhone")]
        public HammerfestPonies EnableExtendedPhone { get; set; }

        [JsonProperty("enableTaxonomyChildrenAgeCheck")]
        public HammerfestPonies EnableTaxonomyChildrenAgeCheck { get; set; }

        [JsonProperty("taxonomyChildrenMaxAge")]
        public TartuGecko TaxonomyChildrenMaxAge { get; set; }

        [JsonProperty("useAdjacentTaxonomies")]
        public HammerfestPonies UseAdjacentTaxonomies { get; set; }

        [JsonProperty("useAdditionalDurations")]
        public HammerfestPonies UseAdditionalDurations { get; set; }

        [JsonProperty("splitFullNameXlsExport")]
        public HammerfestPonies SplitFullNameXlsExport { get; set; }

        [JsonProperty("useAdjacentTaxonomiesSlotSplitting")]
        public HammerfestPonies UseAdjacentTaxonomiesSlotSplitting { get; set; }

        [JsonProperty("adjacentTaxonomiesTreshold")]
        public LivingstoneSouthernWhiteFacedOwl AdjacentTaxonomiesTreshold { get; set; }

        [JsonProperty("allowHideWorkersFromSchdeule")]
        public HammerfestPonies AllowHideWorkersFromSchdeule { get; set; }

        [JsonProperty("allowHideServiceForBooking")]
        public HammerfestPonies AllowHideServiceForBooking { get; set; }

        [JsonProperty("blockNotificationForAnyAvailableAdjacentService")]
        public HammerfestPonies BlockNotificationForAnyAvailableAdjacentService { get; set; }

        [JsonProperty("feedbackCustomerPortalMessage")]
        public TartuGecko FeedbackCustomerPortalMessage { get; set; }

        [JsonProperty("feedbackCustomerPortalTitle")]
        public TartuGecko FeedbackCustomerPortalTitle { get; set; }

        [JsonProperty("feedbackCustomerPortalThankYouMessage")]
        public TartuGecko FeedbackCustomerPortalThankYouMessage { get; set; }

        [JsonProperty("feedBackMinRating")]
        public FeedBackMinRating FeedBackMinRating { get; set; }

        [JsonProperty("enableClientLanguage")]
        public HammerfestPonies EnableClientLanguage { get; set; }

        [JsonProperty("showClientBirthdayFilter")]
        public HammerfestPonies ShowClientBirthdayFilter { get; set; }
    }

    public partial class LivingstoneSouthernWhiteFacedOwl
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("default")]
        public long Default { get; set; }
    }

    public partial class HammerfestPonies
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("default")]
        public bool Default { get; set; }
    }

    public partial class FeedBackMinRating
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("enum")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Enum { get; set; }

        [JsonProperty("default")]
        public long Default { get; set; }
    }

    public partial class BackofficeType
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Enum { get; set; }
    }

    public partial class Repeats
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("enum")]
        public List<string> Enum { get; set; }

        [JsonProperty("default")]
        public string Default { get; set; }

        [JsonProperty("meta:enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleMetaEnum> MetaEnum { get; set; }
    }

    public partial class PurpleMetaEnum
    {
        [JsonProperty("PLAN_CLINIC", NullValueHandling = NullValueHandling.Ignore)]
        public string PlanClinic { get; set; }

        [JsonProperty("PLAN_CLINIC_ONLINE", NullValueHandling = NullValueHandling.Ignore)]
        public string PlanClinicOnline { get; set; }

        [JsonProperty("ONCALL_ONLINE", NullValueHandling = NullValueHandling.Ignore)]
        public string OncallOnline { get; set; }

        [JsonProperty("PLAN_ONLINE", NullValueHandling = NullValueHandling.Ignore)]
        public string PlanOnline { get; set; }
    }

    public partial class DefaultFilteredWorkers
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public TartuGecko Items { get; set; }
    }

    public partial class BusinessTaxonomy
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public BusinessTaxonomyProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class BusinessTaxonomyProperties
    {
        [JsonProperty("id")]
        public TartuGecko Id { get; set; }

        [JsonProperty("taxonomyParentID")]
        public TartuGecko TaxonomyParentId { get; set; }

        [JsonProperty("taxonomyCategoryExtraID")]
        public TartuGecko TaxonomyCategoryExtraId { get; set; }

        [JsonProperty("taxonomyAppExtraID")]
        public TartuGecko TaxonomyAppExtraId { get; set; }

        [JsonProperty("extraId")]
        public TartuGecko ExtraId { get; set; }

        [JsonProperty("siteId")]
        public PuneHedgehog SiteId { get; set; }

        [JsonProperty("alias")]
        public TartuGecko Alias { get; set; }

        [JsonProperty("showcases")]
        public Cabinets Showcases { get; set; }

        [JsonProperty("rooms")]
        public DefaultFilteredWorkers Rooms { get; set; }

        [JsonProperty("cabinetsEnabled")]
        public HammerfestPonies CabinetsEnabled { get; set; }

        [JsonProperty("cabinets")]
        public DefaultFilteredWorkers Cabinets { get; set; }

        [JsonProperty("specialCabinet")]
        public TartuGecko SpecialCabinet { get; set; }

        [JsonProperty("lastModified")]
        public CreatedOn LastModified { get; set; }

        [JsonProperty("price")]
        public BackofficeConfigurationClass Price { get; set; }

        [JsonProperty("additionalPrices")]
        public Cabinets AdditionalPrices { get; set; }

        [JsonProperty("additionalProducts")]
        public Cabinets AdditionalProducts { get; set; }

        [JsonProperty("capacity")]
        public TartuGecko Capacity { get; set; }

        [JsonProperty("capacity_decrease")]
        public LivingstoneSouthernWhiteFacedOwl CapacityDecrease { get; set; }

        [JsonProperty("duration")]
        public TartuGecko Duration { get; set; }

        [JsonProperty("popularity")]
        public TartuGecko Popularity { get; set; }

        [JsonProperty("active")]
        public TartuGecko Active { get; set; }

        [JsonProperty("extraDescription")]
        public TartuGecko ExtraDescription { get; set; }

        [JsonProperty("confirmationAlert")]
        public TartuGecko ConfirmationAlert { get; set; }

        [JsonProperty("extraLink")]
        public TartuGecko ExtraLink { get; set; }

        [JsonProperty("priceLink")]
        public TartuGecko PriceLink { get; set; }

        [JsonProperty("color")]
        public TartuGecko Color { get; set; }

        [JsonProperty("order")]
        public TartuGecko Order { get; set; }

        [JsonProperty("images")]
        public DefaultFilteredWorkers Images { get; set; }

        [JsonProperty("manualChanges")]
        public TartuGecko ManualChanges { get; set; }

        [JsonProperty("discounts")]
        public GeneralInfo Discounts { get; set; }

        [JsonProperty("additionalDurations")]
        public Cabinets AdditionalDurations { get; set; }

        [JsonProperty("additionalTaxonomyExtraId")]
        public AdditionalTaxonomyExtraId AdditionalTaxonomyExtraId { get; set; }

        [JsonProperty("parallelTaxonomies")]
        public DefaultFilteredWorkers ParallelTaxonomies { get; set; }

        [JsonProperty("onlyAfterTaxonomies")]
        public DefaultFilteredWorkers OnlyAfterTaxonomies { get; set; }

        [JsonProperty("displayInWidget")]
        public TartuGecko DisplayInWidget { get; set; }

        [JsonProperty("allowNextBookingInDays")]
        public LivingstoneSouthernWhiteFacedOwl AllowNextBookingInDays { get; set; }

        [JsonProperty("allowNextBookingInDaysText")]
        public TartuGecko AllowNextBookingInDaysText { get; set; }

        [JsonProperty("taxonomyType")]
        public GeneralInfo TaxonomyType { get; set; }

        [JsonProperty("designs")]
        public DefaultFilteredWorkers Designs { get; set; }

        [JsonProperty("isOther")]
        public TartuGecko IsOther { get; set; }

        [JsonProperty("chargeUnitsStep")]
        public TartuGecko ChargeUnitsStep { get; set; }

        [JsonProperty("forPay")]
        public HammerfestPonies ForPay { get; set; }

        [JsonProperty("childrenTaxonomyTypes")]
        public ChildrenTaxonomyTypes ChildrenTaxonomyTypes { get; set; }

        [JsonProperty("visitType")]
        public TartuGecko VisitType { get; set; }

        [JsonProperty("timetable")]
        public GeneralInfo Timetable { get; set; }

        [JsonProperty("exceptions")]
        public TartuGecko Exceptions { get; set; }

        [JsonProperty("leaves")]
        public DefaultFilteredWorkers Leaves { get; set; }

        [JsonProperty("showcaseTaxonomyID")]
        public PuneHedgehog ShowcaseTaxonomyId { get; set; }

        [JsonProperty("newTaxonomy")]
        public HammerfestPonies NewTaxonomy { get; set; }

        [JsonProperty("adjacentTaxonomies")]
        public AdjacentTaxonomies AdjacentTaxonomies { get; set; }

        [JsonProperty("adjacentSameTimeStart")]
        public TartuGecko AdjacentSameTimeStart { get; set; }

        [JsonProperty("dateLimitType")]
        public Repeats DateLimitType { get; set; }

        [JsonProperty("dateLimits")]
        public DateLimits DateLimits { get; set; }

        [JsonProperty("allowNextBookingCount")]
        public LivingstoneSouthernWhiteFacedOwl AllowNextBookingCount { get; set; }

        [JsonProperty("allowBookingInBO")]
        public HammerfestPonies AllowBookingInBo { get; set; }

        [JsonProperty("confirmationSmsAlert")]
        public TartuGecko ConfirmationSmsAlert { get; set; }

        [JsonProperty("useConfirmationSmsAlert")]
        public TartuGecko UseConfirmationSmsAlert { get; set; }

        [JsonProperty("onlineMode")]
        public Repeats OnlineMode { get; set; }

        [JsonProperty("showcaseItems")]
        public ShowcaseItems ShowcaseItems { get; set; }
    }

    public partial class Cabinets
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public GeneralInfo Items { get; set; }
    }

    public partial class GeneralInfo
    {
        [JsonProperty("$ref")]
        public string Ref { get; set; }
    }

    public partial class AdditionalTaxonomyExtraId
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public AdditionalTaxonomyExtraIdItems Items { get; set; }
    }

    public partial class AdditionalTaxonomyExtraIdItems
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properies")]
        public Properies Properies { get; set; }
    }

    public partial class Properies
    {
        [JsonProperty("taxonomyExtraID")]
        public TartuGecko TaxonomyExtraId { get; set; }

        [JsonProperty("extraId")]
        public TartuGecko ExtraId { get; set; }
    }

    public partial class AdjacentTaxonomies
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public AdjacentTaxonomiesItems Items { get; set; }
    }

    public partial class AdjacentTaxonomiesItems
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public PurpleProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class PurpleProperties
    {
        [JsonProperty("slotDuration")]
        public LivingstoneSouthernWhiteFacedOwl SlotDuration { get; set; }

        [JsonProperty("isAnyAvailable")]
        public HammerfestPonies IsAnyAvailable { get; set; }

        [JsonProperty("taxonomyID")]
        public TartuGecko TaxonomyId { get; set; }

        [JsonProperty("order")]
        public TartuGecko Order { get; set; }
    }

    public partial class ChildrenTaxonomyTypes
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public BackofficeType Items { get; set; }
    }

    public partial class DateLimits
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public DateLimitsItems Items { get; set; }
    }

    public partial class DateLimitsItems
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public FluffyProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class FluffyProperties
    {
        [JsonProperty("dateLimitFrom")]
        public CreatedOn DateLimitFrom { get; set; }

        [JsonProperty("dateLimitTo")]
        public CreatedOn DateLimitTo { get; set; }
    }

    public partial class CreatedOn
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("format")]
        public string Format { get; set; }
    }

    public partial class BackofficeConfigurationClass
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeElement? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class ShowcaseItems
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public ShowcaseItemsItems Items { get; set; }
    }

    public partial class ShowcaseItemsItems
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public TentacledProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class TentacledProperties
    {
        [JsonProperty("_id")]
        public TartuGecko Id { get; set; }

        [JsonProperty("taxonomyID")]
        public TartuGecko TaxonomyId { get; set; }

        [JsonProperty("additionalDurations")]
        public AdditionalDurations AdditionalDurations { get; set; }

        [JsonProperty("businessID")]
        public TartuGecko BusinessId { get; set; }
    }

    public partial class AdditionalDurations
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public AdditionalDurationsItems Items { get; set; }
    }

    public partial class AdditionalDurationsItems
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public StickyProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class StickyProperties
    {
        [JsonProperty("_id")]
        public TartuGecko Id { get; set; }

        [JsonProperty("level")]
        public PuneHedgehog Level { get; set; }

        [JsonProperty("duration")]
        public LivingstoneSouthernWhiteFacedOwl Duration { get; set; }
    }

    public partial class BusinessTaxonomyPrice
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public BusinessTaxonomyPriceProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> BusinessTaxonomyPriceRequired { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class BusinessTaxonomyPriceProperties
    {
        [JsonProperty("currency")]
        public Currency Currency { get; set; }

        [JsonProperty("amount")]
        public Amount Amount { get; set; }

        [JsonProperty("stockAmount")]
        public StockAmount StockAmount { get; set; }

        [JsonProperty("type")]
        public TypeClass Type { get; set; }
    }

    public partial class StockAmount
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public List<TypeElement> Type { get; set; }

        [JsonProperty("default")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Default { get; set; }
    }

    public partial class Cabinet
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public CabinetProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class CabinetProperties
    {
        [JsonProperty("id")]
        public TartuGecko Id { get; set; }

        [JsonProperty("name")]
        public TartuGecko Name { get; set; }

        [JsonProperty("active")]
        public TartuGecko Active { get; set; }
    }

    public partial class Consumable
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public ConsumableProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> ConsumableRequired { get; set; }
    }

    public partial class ConsumableProperties
    {
        [JsonProperty("extraID")]
        public TartuGecko ExtraId { get; set; }

        [JsonProperty("name")]
        public TartuGecko Name { get; set; }

        [JsonProperty("quantity")]
        public TartuGecko Quantity { get; set; }
    }

    public partial class Department
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public DepartmentProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> DepartmentRequired { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class DepartmentProperties
    {
        [JsonProperty("id_")]
        public TartuGecko PropertiesId { get; set; }

        [JsonProperty("id")]
        public TartuGecko Id { get; set; }

        [JsonProperty("name")]
        public TartuGecko Name { get; set; }
    }

    public partial class EvenOddTimetable
    {
        [JsonProperty("meta:extensible")]
        public bool MetaExtensible { get; set; }

        [JsonProperty("meta:extends")]
        public List<Uri> MetaExtends { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public EvenOddTimetableProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> EvenOddTimetableRequired { get; set; }
    }

    public partial class EvenOddTimetableProperties
    {
        [JsonProperty("startPeriod")]
        public TypeClass StartPeriod { get; set; }

        [JsonProperty("even")]
        public TaxonomyChildren Even { get; set; }

        [JsonProperty("odd")]
        public TaxonomyChildren Odd { get; set; }
    }

    public partial class TaxonomyChildren
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public GeneralInfo Items { get; set; }
    }

    public partial class MetroStation
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public MetroStationProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> MetroStationRequired { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class MetroStationProperties
    {
        [JsonProperty("_id")]
        public TartuGecko Id { get; set; }

        [JsonProperty("name")]
        public TartuGecko Name { get; set; }

        [JsonProperty("description")]
        public TartuGecko Description { get; set; }
    }

    public partial class ResourceLocation
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public ResourceLocationProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<object> ResourceLocationRequired { get; set; }
    }

    public partial class ResourceLocationProperties
    {
        [JsonProperty("longitude")]
        public TartuGecko Longitude { get; set; }

        [JsonProperty("latitude")]
        public TartuGecko Latitude { get; set; }

        [JsonProperty("time")]
        public PuneHedgehog Time { get; set; }
    }

    public partial class ResourceProfile
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public ResourceProfileProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> ResourceProfileRequired { get; set; }
    }

    public partial class ResourceProfileProperties
    {
        [JsonProperty("email")]
        public PuneHedgehog Email { get; set; }

        [JsonProperty("profileID")]
        public PuneHedgehog ProfileId { get; set; }

        [JsonProperty("userID")]
        public PuneHedgehog UserId { get; set; }

        [JsonProperty("accessType")]
        public TypeClass AccessType { get; set; }
    }

    public partial class ResourceTaxonomyChildren
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public ResourceTaxonomyChildrenProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> ResourceTaxonomyChildrenRequired { get; set; }
    }

    public partial class ResourceTaxonomyChildrenProperties
    {
        [JsonProperty("taxonomyID")]
        public PuneHedgehog TaxonomyId { get; set; }

        [JsonProperty("children")]
        public PuneHedgehog Children { get; set; }
    }

    public partial class ResourceTaxonomyLevel
    {
        [JsonProperty("$id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public ResourceTaxonomyLevelProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> ResourceTaxonomyLevelRequired { get; set; }
    }

    public partial class ResourceTaxonomyLevelProperties
    {
        [JsonProperty("level")]
        public PuneHedgehog Level { get; set; }

        [JsonProperty("id")]
        public PuneHedgehog Id { get; set; }
    }

    public partial class TaxonomyShowcase
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public TaxonomyShowcaseProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class TaxonomyShowcaseProperties
    {
        [JsonProperty("baseBusinessID")]
        public TartuGecko BaseBusinessId { get; set; }

        [JsonProperty("originBusinessID")]
        public TartuGecko OriginBusinessId { get; set; }

        [JsonProperty("showcaseItemID")]
        public TartuGecko ShowcaseItemId { get; set; }

        [JsonProperty("isBaseNode")]
        public TartuGecko IsBaseNode { get; set; }
    }

    public partial class WidgetConfiguration
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public WidgetConfigurationProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class WidgetConfigurationProperties
    {
        [JsonProperty("revisionVersion")]
        public TartuGecko RevisionVersion { get; set; }

        [JsonProperty("crunchv2")]
        public HammerfestPonies Crunchv2 { get; set; }

        [JsonProperty("useCRAC")]
        public HammerfestPonies UseCrac { get; set; }

        [JsonProperty("cracSlotSize")]
        public CracSlotSize CracSlotSize { get; set; }

        [JsonProperty("widgetUseCRAC")]
        public HammerfestPonies WidgetUseCrac { get; set; }

        [JsonProperty("skipDaysForward")]
        public HammerfestPonies SkipDaysForward { get; set; }

        [JsonProperty("daysForward")]
        public LivingstoneSouthernWhiteFacedOwl DaysForward { get; set; }

        [JsonProperty("cracServer")]
        public BackofficeType CracServer { get; set; }

        [JsonProperty("useMedAuth")]
        public HammerfestPonies UseMedAuth { get; set; }

        [JsonProperty("useSortByName")]
        public HammerfestPonies UseSortByName { get; set; }

        [JsonProperty("useMiddleName")]
        public HammerfestPonies UseMiddleName { get; set; }

        [JsonProperty("showSurnameFirst")]
        public HammerfestPonies ShowSurnameFirst { get; set; }

        [JsonProperty("hidePrices")]
        public HammerfestPonies HidePrices { get; set; }

        [JsonProperty("hideEmptyDays")]
        public HammerfestPonies HideEmptyDays { get; set; }

        [JsonProperty("showMap")]
        public HammerfestPonies ShowMap { get; set; }

        [JsonProperty("tentativeTTL")]
        public TartuGecko TentativeTtl { get; set; }

        [JsonProperty("showDrinkQuestion")]
        public HammerfestPonies ShowDrinkQuestion { get; set; }

        [JsonProperty("showTalkQuestion")]
        public HammerfestPonies ShowTalkQuestion { get; set; }

        [JsonProperty("showClientAddress")]
        public HammerfestPonies ShowClientAddress { get; set; }

        [JsonProperty("skipMobileMap")]
        public HammerfestPonies SkipMobileMap { get; set; }

        [JsonProperty("skipAuthentication")]
        public HammerfestPonies SkipAuthentication { get; set; }

        [JsonProperty("skipServiceSelection")]
        public HammerfestPonies SkipServiceSelection { get; set; }

        [JsonProperty("showTaxonomyConfirmationAlert")]
        public HammerfestPonies ShowTaxonomyConfirmationAlert { get; set; }

        [JsonProperty("showClientComment")]
        public HammerfestPonies ShowClientComment { get; set; }

        [JsonProperty("clientCommentTitle")]
        public HammerfestPonies ClientCommentTitle { get; set; }

        [JsonProperty("calendarMode")]
        public HammerfestPonies CalendarMode { get; set; }

        [JsonProperty("calendarModeHideTime")]
        public HammerfestPonies CalendarModeHideTime { get; set; }

        [JsonProperty("useCoupon")]
        public HammerfestPonies UseCoupon { get; set; }

        [JsonProperty("dontRequireEmail")]
        public HammerfestPonies DontRequireEmail { get; set; }

        [JsonProperty("emailIsMandatory")]
        public HammerfestPonies EmailIsMandatory { get; set; }

        [JsonProperty("displaySlotSize")]
        public TartuGecko DisplaySlotSize { get; set; }

        [JsonProperty("additionalName")]
        public TartuGecko AdditionalName { get; set; }

        [JsonProperty("shortLink")]
        public TartuGecko ShortLink { get; set; }

        [JsonProperty("appointment_confirmation_title")]
        public TartuGecko AppointmentConfirmationTitle { get; set; }

        [JsonProperty("appointment_confirmation_text")]
        public TartuGecko AppointmentConfirmationText { get; set; }

        [JsonProperty("theme")]
        public DefaultWorkerImgUrl Theme { get; set; }

        [JsonProperty("socialSharing")]
        public SocialSharing SocialSharing { get; set; }

        [JsonProperty("noDefaultImages")]
        public HammerfestPonies NoDefaultImages { get; set; }

        [JsonProperty("withoutWorkers")]
        public HammerfestPonies WithoutWorkers { get; set; }

        [JsonProperty("bookableMonthsCount")]
        public LivingstoneSouthernWhiteFacedOwl BookableMonthsCount { get; set; }

        [JsonProperty("dayUnavailableLabel")]
        public TartuGecko DayUnavailableLabel { get; set; }

        [JsonProperty("dayOffLabel")]
        public TartuGecko DayOffLabel { get; set; }

        [JsonProperty("useBusinessScheduleForUnavailableLabel")]
        public HammerfestPonies UseBusinessScheduleForUnavailableLabel { get; set; }

        [JsonProperty("hideAnyWorkerBooking")]
        public HammerfestPonies HideAnyWorkerBooking { get; set; }

        [JsonProperty("disableMobileWidget")]
        public HammerfestPonies DisableMobileWidget { get; set; }

        [JsonProperty("socialNetworkImage")]
        public HammerfestPonies SocialNetworkImage { get; set; }

        [JsonProperty("payment")]
        public Repeats Payment { get; set; }

        [JsonProperty("paymentProvider")]
        public Repeats PaymentProvider { get; set; }

        [JsonProperty("alignmentTaxonomySlots")]
        public HammerfestPonies AlignmentTaxonomySlots { get; set; }

        [JsonProperty("bookableDateRanges")]
        public BookableDateRanges BookableDateRanges { get; set; }

        [JsonProperty("discountedPriceRounding")]
        public DiscountedPriceRounding DiscountedPriceRounding { get; set; }

        [JsonProperty("multiServiceBooking")]
        public HammerfestPonies MultiServiceBooking { get; set; }

        [JsonProperty("maxServiceBooking")]
        public LivingstoneSouthernWhiteFacedOwl MaxServiceBooking { get; set; }

        [JsonProperty("multiTimeslotBooking")]
        public HammerfestPonies MultiTimeslotBooking { get; set; }

        [JsonProperty("maxTimeslotBooking")]
        public LivingstoneSouthernWhiteFacedOwl MaxTimeslotBooking { get; set; }

        [JsonProperty("multiTimeslotBookingAllDays")]
        public HammerfestPonies MultiTimeslotBookingAllDays { get; set; }

        [JsonProperty("showAllWorkers")]
        public HammerfestPonies ShowAllWorkers { get; set; }

        [JsonProperty("sortByMostFree")]
        public HammerfestPonies SortByMostFree { get; set; }

        [JsonProperty("skipTimeSelection")]
        public HammerfestPonies SkipTimeSelection { get; set; }

        [JsonProperty("skipTimeSelectionServiceIDs")]
        public DefaultFilteredWorkers SkipTimeSelectionServiceIDs { get; set; }

        [JsonProperty("skipWorkerServicesSelection")]
        public HammerfestPonies SkipWorkerServicesSelection { get; set; }

        [JsonProperty("skipWorkerSelectedServiceIDs")]
        public DefaultFilteredWorkers SkipWorkerSelectedServiceIDs { get; set; }

        [JsonProperty("requireAgreement")]
        public HammerfestPonies RequireAgreement { get; set; }

        [JsonProperty("requireAgreementLink")]
        public DefaultWorkerImgUrl RequireAgreementLink { get; set; }

        [JsonProperty("hideGraySlots")]
        public HammerfestPonies HideGraySlots { get; set; }

        [JsonProperty("extraVisitors")]
        public HammerfestPonies ExtraVisitors { get; set; }

        [JsonProperty("overrideFooter")]
        public DefaultWorkerImgUrl OverrideFooter { get; set; }

        [JsonProperty("enableOverrideFooter")]
        public HammerfestPonies EnableOverrideFooter { get; set; }

        [JsonProperty("hideGBookingLogo")]
        public HammerfestPonies HideGBookingLogo { get; set; }

        [JsonProperty("hideCallButton")]
        public HammerfestPonies HideCallButton { get; set; }

        [JsonProperty("hideNewAppointmentButton")]
        public HammerfestPonies HideNewAppointmentButton { get; set; }

        [JsonProperty("hideSocialNetworksAuthentication")]
        public HammerfestPonies HideSocialNetworksAuthentication { get; set; }

        [JsonProperty("skipServiceDurationAlignment")]
        public HammerfestPonies SkipServiceDurationAlignment { get; set; }

        [JsonProperty("warningContactDataText")]
        public DefaultWorkerImgUrl WarningContactDataText { get; set; }

        [JsonProperty("enableWarningContactData")]
        public HammerfestPonies EnableWarningContactData { get; set; }

        [JsonProperty("splitName")]
        public HammerfestPonies SplitName { get; set; }

        [JsonProperty("useDefaultWorkerImg")]
        public HammerfestPonies UseDefaultWorkerImg { get; set; }

        [JsonProperty("defaultWorkerImgUrl")]
        public DefaultWorkerImgUrl DefaultWorkerImgUrl { get; set; }

        [JsonProperty("useClustersMap")]
        public HammerfestPonies UseClustersMap { get; set; }

        [JsonProperty("useAppointmentReminder")]
        public HammerfestPonies UseAppointmentReminder { get; set; }

        [JsonProperty("disableWidget")]
        public HammerfestPonies DisableWidget { get; set; }

        [JsonProperty("disableWidgetMessage")]
        public TartuGecko DisableWidgetMessage { get; set; }

        [JsonProperty("denySameTimeRecords")]
        public HammerfestPonies DenySameTimeRecords { get; set; }

        [JsonProperty("sortWorkersByWorkload")]
        public HammerfestPonies SortWorkersByWorkload { get; set; }

        [JsonProperty("mostFreeEnable")]
        public HammerfestPonies MostFreeEnable { get; set; }

        [JsonProperty("askClientBirthday")]
        public HammerfestPonies AskClientBirthday { get; set; }

        [JsonProperty("askClientGender")]
        public HammerfestPonies AskClientGender { get; set; }

        [JsonProperty("splitInsuranceClient")]
        public HammerfestPonies SplitInsuranceClient { get; set; }

        [JsonProperty("insuranceClientSupportPhone")]
        public Cabinets InsuranceClientSupportPhone { get; set; }

        [JsonProperty("showDisabledTaxonomies")]
        public HammerfestPonies ShowDisabledTaxonomies { get; set; }

        [JsonProperty("disabledTaxonomiesText")]
        public TartuGecko DisabledTaxonomiesText { get; set; }

        [JsonProperty("workerNameReverse")]
        public HammerfestPonies WorkerNameReverse { get; set; }

        [JsonProperty("useDefaultServiceImg")]
        public HammerfestPonies UseDefaultServiceImg { get; set; }

        [JsonProperty("clientBlockingSettings")]
        public ClientBlockingSettings ClientBlockingSettings { get; set; }

        [JsonProperty("defaultServiceImgUrl")]
        public TartuGecko DefaultServiceImgUrl { get; set; }

        [JsonProperty("allowBookVisitor")]
        public HammerfestPonies AllowBookVisitor { get; set; }

        [JsonProperty("useNewReserveAPI")]
        public HammerfestPonies UseNewReserveApi { get; set; }

        [JsonProperty("allowAutoSelect")]
        public HammerfestPonies AllowAutoSelect { get; set; }

        [JsonProperty("useDirectScheduleRead")]
        public Repeats UseDirectScheduleRead { get; set; }

        [JsonProperty("allowSkipTimeCheck")]
        public HammerfestPonies AllowSkipTimeCheck { get; set; }

        [JsonProperty("useInsuranceSelect")]
        public HammerfestPonies UseInsuranceSelect { get; set; }

        [JsonProperty("filterNonInsuranceSchedule")]
        public HammerfestPonies FilterNonInsuranceSchedule { get; set; }

        [JsonProperty("useInsuranceGuaranteeLetter")]
        public HammerfestPonies UseInsuranceGuaranteeLetter { get; set; }

        [JsonProperty("useResourcePageLoading")]
        public HammerfestPonies UseResourcePageLoading { get; set; }

        [JsonProperty("newWidgetTheme")]
        public NewWidgetTheme NewWidgetTheme { get; set; }

        [JsonProperty("worker_unavailability_text")]
        public TartuGecko WorkerUnavailabilityText { get; set; }
    }

    public partial class BookableDateRanges
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public BookableDateRangesProperties Properties { get; set; }
    }

    public partial class BookableDateRangesProperties
    {
        [JsonProperty("enabled")]
        public HammerfestPonies Enabled { get; set; }

        [JsonProperty("start")]
        public End Start { get; set; }

        [JsonProperty("end")]
        public End End { get; set; }
    }

    public partial class End
    {
        [JsonProperty("oneOf")]
        public List<EndOneOf> OneOf { get; set; }
    }

    public partial class EndOneOf
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeElement? Type { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("const")]
        public object Const { get; set; }
    }

    public partial class ClientBlockingSettings
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public ClientBlockingSettingsProperties Properties { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class ClientBlockingSettingsProperties
    {
        [JsonProperty("blockIfFutureRecordExists")]
        public HammerfestPonies BlockIfFutureRecordExists { get; set; }

        [JsonProperty("blockRepeatedRecordsRange")]
        public LivingstoneSouthernWhiteFacedOwl BlockRepeatedRecordsRange { get; set; }

        [JsonProperty("blockRepeatedRecordsCount")]
        public LivingstoneSouthernWhiteFacedOwl BlockRepeatedRecordsCount { get; set; }

        [JsonProperty("blockRepeatedRecordsText")]
        public TartuGecko BlockRepeatedRecordsText { get; set; }

        [JsonProperty("appointmentClientBlock")]
        public HammerfestPonies AppointmentClientBlock { get; set; }

        [JsonProperty("appointmentClientBlockDays")]
        public LivingstoneSouthernWhiteFacedOwl AppointmentClientBlockDays { get; set; }

        [JsonProperty("appointmentClientBlockText")]
        public TartuGecko AppointmentClientBlockText { get; set; }
    }

    public partial class CracSlotSize
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("enum")]
        public List<long> Enum { get; set; }

        [JsonProperty("default")]
        public long Default { get; set; }
    }

    public partial class DefaultWorkerImgUrl
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("default")]
        public string Default { get; set; }
    }

    public partial class DiscountedPriceRounding
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public DiscountedPriceRoundingProperties Properties { get; set; }
    }

    public partial class DiscountedPriceRoundingProperties
    {
        [JsonProperty("rule")]
        public BackofficeType Rule { get; set; }

        [JsonProperty("value")]
        public LivingstoneSouthernWhiteFacedOwl Value { get; set; }
    }

    public partial class NewWidgetTheme
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class SocialSharing
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public SocialSharingProperties Properties { get; set; }
    }

    public partial class SocialSharingProperties
    {
        [JsonProperty("active")]
        public HammerfestPonies Active { get; set; }

        [JsonProperty("widgetText")]
        public Birthday WidgetText { get; set; }

        [JsonProperty("text")]
        public Birthday Text { get; set; }

        [JsonProperty("discountEnabled")]
        public TartuGecko DiscountEnabled { get; set; }

        [JsonProperty("discountType")]
        public BackofficeType DiscountType { get; set; }

        [JsonProperty("discountAmount")]
        public Birthday DiscountAmount { get; set; }
    }

    public partial class ModelsProperties
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Name { get; set; }

        [JsonProperty("shortName", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko ShortName { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Value { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Repeats Type { get; set; }

        [JsonProperty("requiredField", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko RequiredField { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeType Country { get; set; }

        [JsonProperty("zip_code", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesZipCode { get; set; }

        [JsonProperty("locality", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Locality { get; set; }

        [JsonProperty("locality_type", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesLocalityType { get; set; }

        [JsonProperty("street", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Street { get; set; }

        [JsonProperty("street_type", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesStreetType { get; set; }

        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Number { get; set; }

        [JsonProperty("admin_area", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesAdminArea { get; set; }

        [JsonProperty("admin_area_type", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesAdminAreaType { get; set; }

        [JsonProperty("sub_admin_area", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesSubAdminArea { get; set; }

        [JsonProperty("sub_admin_area_type", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesSubAdminAreaType { get; set; }

        [JsonProperty("sub_locality", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesSubLocality { get; set; }

        [JsonProperty("sub_locality_type", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesSubLocalityType { get; set; }

        [JsonProperty("corps", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Corps { get; set; }

        [JsonProperty("building", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Building { get; set; }

        [JsonProperty("possesion", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Possesion { get; set; }

        [JsonProperty("kilometer", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Kilometer { get; set; }

        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Address { get; set; }

        [JsonProperty("house_add", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesHouseAdd { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Longitude { get; set; }

        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Latitude { get; set; }

        [JsonProperty("address_add", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesAddressAdd { get; set; }

        [JsonProperty("office", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Office { get; set; }

        [JsonProperty("metroStations", NullValueHandling = NullValueHandling.Ignore)]
        public Cabinets MetroStations { get; set; }

        [JsonProperty("way", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Way { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeType Group { get; set; }

        [JsonProperty("zipCode", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko ZipCode { get; set; }

        [JsonProperty("localityType", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko LocalityType { get; set; }

        [JsonProperty("streetType", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko StreetType { get; set; }

        [JsonProperty("adminArea", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko AdminArea { get; set; }

        [JsonProperty("adminAreaType", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko AdminAreaType { get; set; }

        [JsonProperty("subAdminArea", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko SubAdminArea { get; set; }

        [JsonProperty("subAdminAreaType", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko SubAdminAreaType { get; set; }

        [JsonProperty("subLocality", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko SubLocality { get; set; }

        [JsonProperty("subLocalityType", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko SubLocalityType { get; set; }

        [JsonProperty("houseAdd", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko HouseAdd { get; set; }

        [JsonProperty("addressAdd", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko AddressAdd { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Id { get; set; }

        [JsonProperty("extraID", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko ExtraId { get; set; }

        [JsonProperty("created_on", NullValueHandling = NullValueHandling.Ignore)]
        public CreatedOn CreatedOn { get; set; }

        [JsonProperty("general_info", NullValueHandling = NullValueHandling.Ignore)]
        public GeneralInfo GeneralInfo { get; set; }

        [JsonProperty("taxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public Taxonomies Taxonomies { get; set; }

        [JsonProperty("resources", NullValueHandling = NullValueHandling.Ignore)]
        public Cabinets Resources { get; set; }

        [JsonProperty("designs", NullValueHandling = NullValueHandling.Ignore)]
        public DefaultFilteredWorkers Designs { get; set; }

        [JsonProperty("stateLevelHolidaysNotWorking", NullValueHandling = NullValueHandling.Ignore)]
        public HammerfestPonies StateLevelHolidaysNotWorking { get; set; }

        [JsonProperty("notifications", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Notifications { get; set; }

        [JsonProperty("vertical", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Vertical { get; set; }

        [JsonProperty("flatTaxonomyDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko FlatTaxonomyDisplay { get; set; }

        [JsonProperty("allowCategoryBooking", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko AllowCategoryBooking { get; set; }

        [JsonProperty("cabinetsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko CabinetsEnabled { get; set; }

        [JsonProperty("taxonomy_tree_capacity", NullValueHandling = NullValueHandling.Ignore)]
        public DefaultFilteredWorkers TaxonomyTreeCapacity { get; set; }

        [JsonProperty("consumables", NullValueHandling = NullValueHandling.Ignore)]
        public Cabinets Consumables { get; set; }

        [JsonProperty("departments", NullValueHandling = NullValueHandling.Ignore)]
        public Cabinets Departments { get; set; }

        [JsonProperty("cabinets", NullValueHandling = NullValueHandling.Ignore)]
        public Cabinets Cabinets { get; set; }

        [JsonProperty("defaultFilteredWorkers", NullValueHandling = NullValueHandling.Ignore)]
        public DefaultFilteredWorkers DefaultFilteredWorkers { get; set; }

        [JsonProperty("integration_data", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko IntegrationData { get; set; }

        [JsonProperty("yandexFeedType", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko YandexFeedType { get; set; }

        [JsonProperty("top_services", NullValueHandling = NullValueHandling.Ignore)]
        public TopServices TopServices { get; set; }

        [JsonProperty("mobileData", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko MobileData { get; set; }

        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Active { get; set; }

        [JsonProperty("backofficeType", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeType BackofficeType { get; set; }

        [JsonProperty("backofficeConfiguration", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeConfigurationClass BackofficeConfiguration { get; set; }

        [JsonProperty("additionalSettings", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalSettings AdditionalSettings { get; set; }

        [JsonProperty("widget_configuration", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeConfigurationClass WidgetConfiguration { get; set; }

        [JsonProperty("mini_widget_configuration", NullValueHandling = NullValueHandling.Ignore)]
        public MiniWidgetConfiguration MiniWidgetConfiguration { get; set; }

        [JsonProperty("callback_widget_configuration", NullValueHandling = NullValueHandling.Ignore)]
        public CallbackWidgetConfiguration CallbackWidgetConfiguration { get; set; }

        [JsonProperty("taxonomiesComplex", NullValueHandling = NullValueHandling.Ignore)]
        public TaxonomiesComplex TaxonomiesComplex { get; set; }

        [JsonProperty("backoffice_configuration", NullValueHandling = NullValueHandling.Ignore)]
        public PropertiesBackofficeConfiguration PropertiesBackofficeConfiguration { get; set; }

        [JsonProperty("surname", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Surname { get; set; }

        [JsonProperty("middle_name", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko PropertiesMiddleName { get; set; }

        [JsonProperty("birthday", NullValueHandling = NullValueHandling.Ignore)]
        public Birthday Birthday { get; set; }

        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public GeneralInfo Phone { get; set; }

        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalExtraId Email { get; set; }

        [JsonProperty("fromSms", NullValueHandling = NullValueHandling.Ignore)]
        public FromSms FromSms { get; set; }

        [JsonProperty("sex", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeType Sex { get; set; }

        [JsonProperty("creatorProfileID", NullValueHandling = NullValueHandling.Ignore)]
        public Birthday CreatorProfileId { get; set; }

        [JsonProperty("creatorProfileName", NullValueHandling = NullValueHandling.Ignore)]
        public Birthday CreatorProfileName { get; set; }

        [JsonProperty("driverLicense", NullValueHandling = NullValueHandling.Ignore)]
        public Birthday DriverLicense { get; set; }

        [JsonProperty("taxiPark", NullValueHandling = NullValueHandling.Ignore)]
        public Birthday TaxiPark { get; set; }

        [JsonProperty("taxiParkMemberCount", NullValueHandling = NullValueHandling.Ignore)]
        public Birthday TaxiParkMemberCount { get; set; }

        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        public CreatedOn Start { get; set; }

        [JsonProperty("repeats", NullValueHandling = NullValueHandling.Ignore)]
        public Repeats Repeats { get; set; }

        [JsonProperty("weeklyRepeat", NullValueHandling = NullValueHandling.Ignore)]
        public LivingstoneSouthernWhiteFacedOwl WeeklyRepeat { get; set; }

        [JsonProperty("unlimWeeklyRepeat", NullValueHandling = NullValueHandling.Ignore)]
        public HammerfestPonies UnlimWeeklyRepeat { get; set; }

        [JsonProperty("daysOfWeek", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeType DaysOfWeek { get; set; }

        [JsonProperty("slots", NullValueHandling = NullValueHandling.Ignore)]
        public Slots Slots { get; set; }

        [JsonProperty("country_code", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko CountryCode { get; set; }

        [JsonProperty("area_code", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko AreaCode { get; set; }

        [JsonProperty("revisionVersion", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog RevisionVersion { get; set; }

        [JsonProperty("rating", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Rating { get; set; }

        [JsonProperty("capacity", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Capacity { get; set; }

        [JsonProperty("icon_url", NullValueHandling = NullValueHandling.Ignore)]
        public IconUrl IconUrl { get; set; }

        [JsonProperty("originBusinessID", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog OriginBusinessId { get; set; }

        [JsonProperty("originTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalExtraId OriginTaxonomies { get; set; }

        [JsonProperty("origin_general_info", NullValueHandling = NullValueHandling.Ignore)]
        public OriginGeneralInfo OriginGeneralInfo { get; set; }

        [JsonProperty("nickname", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Nickname { get; set; }

        [JsonProperty("middleName", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog MiddleName { get; set; }

        [JsonProperty("loaned", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Loaned { get; set; }

        [JsonProperty("loanedTo", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog LoanedTo { get; set; }

        [JsonProperty("loanedFrom", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog LoanedFrom { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Description { get; set; }

        [JsonProperty("profession", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Profession { get; set; }

        [JsonProperty("extraDescription", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog ExtraDescription { get; set; }

        [JsonProperty("extraLink", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog ExtraLink { get; set; }

        [JsonProperty("extraId", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog PropertiesExtraId { get; set; }

        [JsonProperty("siteId", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog SiteId { get; set; }

        [JsonProperty("additionalExtraId", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalExtraId AdditionalExtraId { get; set; }

        [JsonProperty("extraMediaId", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog ExtraMediaId { get; set; }

        [JsonProperty("departmentId", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog DepartmentId { get; set; }

        [JsonProperty("workPlace", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog WorkPlace { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Order { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Color { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public GeneralInfo Profile { get; set; }

        [JsonProperty("taxonomyLevels", NullValueHandling = NullValueHandling.Ignore)]
        public TaxonomyChildren TaxonomyLevels { get; set; }

        [JsonProperty("taxonomyChildren", NullValueHandling = NullValueHandling.Ignore)]
        public TaxonomyChildren TaxonomyChildren { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Level { get; set; }

        [JsonProperty("perk", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog Perk { get; set; }

        [JsonProperty("smsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog SmsEnabled { get; set; }

        [JsonProperty("emailEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog EmailEnabled { get; set; }

        [JsonProperty("displayInWidget", NullValueHandling = NullValueHandling.Ignore)]
        public PuneHedgehog DisplayInWidget { get; set; }

        [JsonProperty("manualChanges", NullValueHandling = NullValueHandling.Ignore)]
        public Exceptions ManualChanges { get; set; }

        [JsonProperty("timetable", NullValueHandling = NullValueHandling.Ignore)]
        public EvenOddTimetableClass Timetable { get; set; }

        [JsonProperty("evenOddTimetable", NullValueHandling = NullValueHandling.Ignore)]
        public EvenOddTimetableClass EvenOddTimetable { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public Status Status { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public Exceptions Image { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public EvenOddTimetableClass Location { get; set; }

        [JsonProperty("exceptions", NullValueHandling = NullValueHandling.Ignore)]
        public Exceptions Exceptions { get; set; }

        [JsonProperty("userData", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko UserData { get; set; }

        [JsonProperty("scheduleIsEmpty", NullValueHandling = NullValueHandling.Ignore)]
        public Exceptions ScheduleIsEmpty { get; set; }

        [JsonProperty("orderWeight", NullValueHandling = NullValueHandling.Ignore)]
        public IconUrl OrderWeight { get; set; }

        [JsonProperty("readonlyTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public DefaultFilteredWorkers ReadonlyTaxonomies { get; set; }

        [JsonProperty("displayInSchedule", NullValueHandling = NullValueHandling.Ignore)]
        public HammerfestPonies DisplayInSchedule { get; set; }

        [JsonProperty("lastSU", NullValueHandling = NullValueHandling.Ignore)]
        public CreatedOn LastSu { get; set; }

        [JsonProperty("experience", NullValueHandling = NullValueHandling.Ignore)]
        public CreatedOn Experience { get; set; }

        [JsonProperty("degree", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Degree { get; set; }

        [JsonProperty("social_network", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeType SocialNetwork { get; set; }

        [JsonProperty("handle", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Handle { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Url { get; set; }

        [JsonProperty("week", NullValueHandling = NullValueHandling.Ignore)]
        public Week Week { get; set; }
    }

    public partial class AdditionalExtraId
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public TartuGecko Items { get; set; }
    }

    public partial class AdditionalSettings
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public AdditionalSettingsProperties Properties { get; set; }
    }

    public partial class AdditionalSettingsProperties
    {
        [JsonProperty("appointmentExtensionAmount")]
        public LivingstoneSouthernWhiteFacedOwl AppointmentExtensionAmount { get; set; }

        [JsonProperty("appointmentExtensionType")]
        public Repeats AppointmentExtensionType { get; set; }
    }

    public partial class CallbackWidgetConfiguration
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public CallbackWidgetConfigurationProperties Properties { get; set; }
    }

    public partial class CallbackWidgetConfigurationProperties
    {
        [JsonProperty("title1")]
        public TartuGecko Title1 { get; set; }

        [JsonProperty("title2")]
        public TartuGecko Title2 { get; set; }
    }

    public partial class EvenOddTimetableClass
    {
        [JsonProperty("definition")]
        public string Definition { get; set; }

        [JsonProperty("$ref")]
        public string Ref { get; set; }
    }

    public partial class Exceptions
    {
        [JsonProperty("definition")]
        public string Definition { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }
    }

    public partial class FromSms
    {
        [JsonProperty("type")]
        public List<TypeElement> Type { get; set; }

        [JsonProperty("default")]
        public bool Default { get; set; }
    }

    public partial class IconUrl
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public List<TypeElement> Type { get; set; }
    }

    public partial class MiniWidgetConfiguration
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public MiniWidgetConfigurationProperties Properties { get; set; }
    }

    public partial class MiniWidgetConfigurationProperties
    {
        [JsonProperty("title1")]
        public TartuGecko Title1 { get; set; }

        [JsonProperty("title2")]
        public TartuGecko Title2 { get; set; }

        [JsonProperty("fields")]
        public ChildrenTaxonomyTypes Fields { get; set; }
    }

    public partial class OriginGeneralInfo
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("$ref")]
        public Uri Ref { get; set; }
    }

    public partial class PropertiesBackofficeConfiguration
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public BackofficeConfigurationPropertiesClass Properties { get; set; }
    }

    public partial class BackofficeConfigurationPropertiesClass
    {
        [JsonProperty("resourceTimetableType")]
        public Repeats ResourceTimetableType { get; set; }

        [JsonProperty("enableMasterImportance")]
        public HammerfestPonies EnableMasterImportance { get; set; }
    }

    public partial class Slots
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public SlotsProperties Properties { get; set; }
    }

    public partial class SlotsProperties
    {
        [JsonProperty("time")]
        public GeneralInfo Time { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("definition")]
        public string Definition { get; set; }

        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("enum")]
        public List<string> Enum { get; set; }
    }

    public partial class Taxonomies
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public BackofficeConfigurationClass Items { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class TaxonomiesComplex
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("items")]
        public TaxonomiesComplexItems Items { get; set; }
    }

    public partial class TaxonomiesComplexItems
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public IndigoProperties Properties { get; set; }
    }

    public partial class IndigoProperties
    {
        [JsonProperty("name")]
        public TartuGecko Name { get; set; }

        [JsonProperty("taxonomies")]
        public DefaultFilteredWorkers Taxonomies { get; set; }
    }

    public partial class TopServices
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public TopServicesProperties Properties { get; set; }
    }

    public partial class TopServicesProperties
    {
        [JsonProperty("status")]
        public TartuGecko Status { get; set; }

        [JsonProperty("services")]
        public TartuGecko Services { get; set; }
    }

    public partial class Week
    {
        [JsonProperty("type")]
        public TypeElement Type { get; set; }

        [JsonProperty("properties")]
        public WeekProperties Properties { get; set; }

        [JsonProperty("required")]
        public List<string> WeekRequired { get; set; }

        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }
    }

    public partial class WeekProperties
    {
        [JsonProperty("sun")]
        public Cabinets Sun { get; set; }

        [JsonProperty("mon")]
        public Cabinets Mon { get; set; }

        [JsonProperty("tue")]
        public Cabinets Tue { get; set; }

        [JsonProperty("wed")]
        public Cabinets Wed { get; set; }

        [JsonProperty("thu")]
        public Cabinets Thu { get; set; }

        [JsonProperty("fri")]
        public Cabinets Fri { get; set; }

        [JsonProperty("sat")]
        public Cabinets Sat { get; set; }
    }

    public enum TypeElement { Array, Boolean, Null, Number, Object, String };

    public partial struct TypeUnion
    {
        public TypeElement? Enum;
        public List<TypeElement> StringArray;

        public static implicit operator TypeUnion(TypeElement Enum) => new TypeUnion { Enum = Enum };
        public static implicit operator TypeUnion(List<TypeElement> StringArray) => new TypeUnion { StringArray = StringArray };
    }

    public partial class Common
    {
        public static Common FromJson(string json) => JsonConvert.DeserializeObject<Common>(json, GBookingAPIv2.Converter.Settings);
    }

    public partial class Models
    {
        public static Models FromJson(string json) => JsonConvert.DeserializeObject<Models>(json, GBookingAPIv2.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Common self) => JsonConvert.SerializeObject(self, GBookingAPIv2.Converter.Settings);
        public static string ToJson(this Models self) => JsonConvert.SerializeObject(self, GBookingAPIv2.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeElementConverter.Singleton,
                TypeUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeElement) || t == typeof(TypeElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "array":
                    return TypeElement.Array;
                case "boolean":
                    return TypeElement.Boolean;
                case "null":
                    return TypeElement.Null;
                case "number":
                    return TypeElement.Number;
                case "object":
                    return TypeElement.Object;
                case "string":
                    return TypeElement.String;
            }
            throw new Exception("Cannot unmarshal type TypeElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeElement)untypedValue;
            switch (value)
            {
                case TypeElement.Array:
                    serializer.Serialize(writer, "array");
                    return;
                case TypeElement.Boolean:
                    serializer.Serialize(writer, "boolean");
                    return;
                case TypeElement.Null:
                    serializer.Serialize(writer, "null");
                    return;
                case TypeElement.Number:
                    serializer.Serialize(writer, "number");
                    return;
                case TypeElement.Object:
                    serializer.Serialize(writer, "object");
                    return;
                case TypeElement.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type TypeElement");
        }

        public static readonly TypeElementConverter Singleton = new TypeElementConverter();
    }

    internal class TypeUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeUnion) || t == typeof(TypeUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "array":
                            return new TypeUnion { Enum = TypeElement.Array };
                        case "boolean":
                            return new TypeUnion { Enum = TypeElement.Boolean };
                        case "null":
                            return new TypeUnion { Enum = TypeElement.Null };
                        case "number":
                            return new TypeUnion { Enum = TypeElement.Number };
                        case "object":
                            return new TypeUnion { Enum = TypeElement.Object };
                        case "string":
                            return new TypeUnion { Enum = TypeElement.String };
                    }
                    break;
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<TypeElement>>(reader);
                    return new TypeUnion { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type TypeUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (TypeUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case TypeElement.Array:
                        serializer.Serialize(writer, "array");
                        return;
                    case TypeElement.Boolean:
                        serializer.Serialize(writer, "boolean");
                        return;
                    case TypeElement.Null:
                        serializer.Serialize(writer, "null");
                        return;
                    case TypeElement.Number:
                        serializer.Serialize(writer, "number");
                        return;
                    case TypeElement.Object:
                        serializer.Serialize(writer, "object");
                        return;
                    case TypeElement.String:
                        serializer.Serialize(writer, "string");
                        return;
                }
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            throw new Exception("Cannot marshal type TypeUnion");
        }

        public static readonly TypeUnionConverter Singleton = new TypeUnionConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(List<long>);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (List<long>)untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }
}
