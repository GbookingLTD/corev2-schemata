// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GBookingCoreV2;
//
//    var gBookingCoreV2 = GBookingCoreV2.FromJson(jsonString);

namespace GBookingCoreV2
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GBookingCoreV2
    {
        [JsonProperty("Common")]
        public Common Common { get; set; }

        [JsonProperty("Controllers")]
        public Controllers Controllers { get; set; }

        [JsonProperty("Models")]
        public Models Models { get; set; }
    }

    public partial class Common
    {
        [JsonProperty("AuthErrorCodes", NullValueHandling = NullValueHandling.Ignore)]
        public AuthErrorCodesClass AuthErrorCodes { get; set; }

        [JsonProperty("ErrorResponse")]
        public ErrorResponse? ErrorResponse { get; set; }

        [JsonProperty("Request")]
        public Request? Request { get; set; }

        [JsonProperty("SuccessResponse")]
        public SuccessResponse? SuccessResponse { get; set; }
    }

    /// <summary>
    /// Код ошибки авторизации
    /// </summary>
    public partial class AuthErrorCodesClass
    {
        [JsonProperty("code")]
        public double Code { get; set; }
    }

    public partial class ErrorResponseClass
    {
        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error")]
        public Error Error { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    /// </summary>
    public partial class Error
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class RequestClass
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public ParamsUnion Params { get; set; }
    }

    /// <summary>
    /// авторизационные параметры
    /// </summary>
    public partial class Cred
    {
        /// <summary>
        /// временный token для доступа
        /// </summary>
        [JsonProperty("token", NullValueHandling = NullValueHandling.Ignore)]
        public string Token { get; set; }

        /// <summary>
        /// идентификатор профиля пользователя
        /// </summary>
        [JsonProperty("user", NullValueHandling = NullValueHandling.Ignore)]
        public string User { get; set; }
    }

    public partial class SuccessResponseClass
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result")]
        public Dictionary<string, object> Result { get; set; }
    }

    public partial class Controllers
    {
        [JsonProperty("Appointment")]
        public AppointmentController Appointment { get; set; }

        [JsonProperty("Business")]
        public BusinessController Business { get; set; }

        [JsonProperty("Client")]
        public ClientController Client { get; set; }

        [JsonProperty("CracSlots")]
        public CracSlotsController CracSlots { get; set; }
    }

    public partial class AppointmentController
    {
        [JsonProperty("cancel_appointment_by_business", NullValueHandling = NullValueHandling.Ignore)]
        public CancelAppointmentByBusiness CancelAppointmentByBusiness { get; set; }

        [JsonProperty("cancel_appointment_by_client", NullValueHandling = NullValueHandling.Ignore)]
        public CancelAppointmentByClient CancelAppointmentByClient { get; set; }

        [JsonProperty("client_confirm_appointment", NullValueHandling = NullValueHandling.Ignore)]
        public ClientConfirmAppointment ClientConfirmAppointment { get; set; }

        [JsonProperty("client_remove_empty_appointment")]
        public ClientRemoveEmptyAppointment ClientRemoveEmptyAppointment { get; set; }

        [JsonProperty("get_appointment_by_filter", NullValueHandling = NullValueHandling.Ignore)]
        public GetAppointmentByFilter GetAppointmentByFilter { get; set; }

        [JsonProperty("get_appointment_by_showcase", NullValueHandling = NullValueHandling.Ignore)]
        public GetAppointmentByShowcase GetAppointmentByShowcase { get; set; }

        [JsonProperty("reserve_appointment")]
        public ReserveAppointment ReserveAppointment { get; set; }
    }

    public partial class CancelAppointmentByBusiness
    {
        [JsonProperty("request")]
        public AppointmentCancelAppointmentByBusinessRequest Request { get; set; }

        [JsonProperty("response")]
        public AppointmentCancelAppointmentByBusinessResponse Response { get; set; }
    }

    public partial class AppointmentCancelAppointmentByBusinessRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public AppointmentCancelAppointmentByBusinessRequestParams Params { get; set; }
    }

    public partial class AppointmentCancelAppointmentByBusinessRequestParams
    {
        [JsonProperty("appointment")]
        public PurpleAppointment Appointment { get; set; }

        [JsonProperty("client", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleClient Client { get; set; }

        [JsonProperty("business")]
        public object Business { get; set; }
    }

    public partial class PurpleAppointment
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class PurpleClient
    {
        [JsonProperty("comment", NullValueHandling = NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class AppointmentCancelAppointmentByBusinessResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentCancelAppointmentByBusinessResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class AppointmentCancelAppointmentByBusinessResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class CancelAppointmentByClient
    {
        [JsonProperty("request")]
        public AppointmentCancelAppointmentByClientRequest Request { get; set; }

        [JsonProperty("response")]
        public AppointmentCancelAppointmentByClientResponse Response { get; set; }
    }

    public partial class AppointmentCancelAppointmentByClientRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public AppointmentCancelAppointmentByClientRequestParams Params { get; set; }
    }

    public partial class AppointmentCancelAppointmentByClientRequestParams
    {
        [JsonProperty("appointment")]
        public FluffyAppointment Appointment { get; set; }

        [JsonProperty("client", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyClient Client { get; set; }

        [JsonProperty("business")]
        public object Business { get; set; }
    }

    public partial class FluffyAppointment
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("shortId", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortId { get; set; }
    }

    public partial class FluffyClient
    {
        [JsonProperty("comment", NullValueHandling = NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class AppointmentCancelAppointmentByClientResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentCancelAppointmentByClientResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class AppointmentCancelAppointmentByClientResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class ClientConfirmAppointment
    {
        [JsonProperty("request")]
        public AppointmentClientConfirmAppointmentRequest Request { get; set; }

        [JsonProperty("response")]
        public AppointmentClientConfirmAppointmentResponse Response { get; set; }
    }

    public partial class AppointmentClientConfirmAppointmentRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public ConfirmAppointment Params { get; set; }
    }

    public partial class ConfirmAppointment
    {
        [JsonProperty("appointment")]
        public TentacledAppointment Appointment { get; set; }

        [JsonProperty("client")]
        public TentacledClient Client { get; set; }
    }

    public partial class TentacledAppointment
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }
    }

    public partial class TentacledClient
    {
        [JsonProperty("comment", NullValueHandling = NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class AppointmentClientConfirmAppointmentResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result")]
        public AppointmentElement? Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentClientConfirmAppointmentResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class AppointmentClientConfirmAppointmentResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class AppointmentSchema
    {
        [JsonProperty("additional_info", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> AdditionalInfo { get; set; }

        [JsonProperty("additionalClientAppears")]
        public List<AdditionalClientAppear> AdditionalClientAppears { get; set; }

        [JsonProperty("additionalClientPayments")]
        public List<AdditionalClientPayment> AdditionalClientPayments { get; set; }

        [JsonProperty("additionalClients")]
        public List<AdditionalClientElement> AdditionalClients { get; set; }

        [JsonProperty("additionalClientSources")]
        public List<AdditionalClientSource> AdditionalClientSources { get; set; }

        [JsonProperty("additionalClientStatuses")]
        public List<AdditionalClientStatus> AdditionalClientStatuses { get; set; }

        [JsonProperty("additionalClientUtms")]
        public List<AdditionalClientUtm> AdditionalClientUtms { get; set; }

        [JsonProperty("additionalFields")]
        public List<AdditionalField> AdditionalFields { get; set; }

        [JsonProperty("additionalProducts")]
        public List<AdditionalProduct> AdditionalProducts { get; set; }

        [JsonProperty("additionalTaxonomies")]
        public List<AppointmentTaxonomy> AdditionalTaxonomies { get; set; }

        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("adjacentId", NullValueHandling = NullValueHandling.Ignore)]
        public string AdjacentId { get; set; }

        [JsonProperty("appointment")]
        public AppointmentInfo Appointment { get; set; }

        [JsonProperty("autoPhoneCallStatus", NullValueHandling = NullValueHandling.Ignore)]
        public string AutoPhoneCallStatus { get; set; }

        [JsonProperty("bannedClients")]
        public List<string> BannedClients { get; set; }

        [JsonProperty("business")]
        public AppointmentBusiness Business { get; set; }

        [JsonProperty("cabinet")]
        public Cabinet Cabinet { get; set; }

        [JsonProperty("capacity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Capacity { get; set; }

        [JsonProperty("changeReason")]
        public string ChangeReason { get; set; }

        [JsonProperty("client")]
        public PurpleAppointmentClient Client { get; set; }

        [JsonProperty("client_appear")]
        public AppointmentClientAppear ClientAppear { get; set; }

        [JsonProperty("client_med_code", NullValueHandling = NullValueHandling.Ignore)]
        public string ClientMedCode { get; set; }

        [JsonProperty("client_payment")]
        public AppointmentClientPayment ClientPayment { get; set; }

        [JsonProperty("client_payment_invoice", NullValueHandling = NullValueHandling.Ignore)]
        public string ClientPaymentInvoice { get; set; }

        [JsonProperty("clientComment")]
        public string ClientComment { get; set; }

        [JsonProperty("clientVisitors", NullValueHandling = NullValueHandling.Ignore)]
        public List<AppointmentClientVisitor> ClientVisitors { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public string Color { get; set; }

        [JsonProperty("destinationKeyword", NullValueHandling = NullValueHandling.Ignore)]
        public string DestinationKeyword { get; set; }

        [JsonProperty("destinationLink", NullValueHandling = NullValueHandling.Ignore)]
        public string DestinationLink { get; set; }

        [JsonProperty("extraFields")]
        public List<ExtraField> ExtraFields { get; set; }

        [JsonProperty("gt", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Gt { get; set; }

        [JsonProperty("gtTimeFrame", NullValueHandling = NullValueHandling.Ignore)]
        public string GtTimeFrame { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [JsonProperty("masterImportance", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MasterImportance { get; set; }

        [JsonProperty("minClients", NullValueHandling = NullValueHandling.Ignore)]
        public double? MinClients { get; set; }

        [JsonProperty("moveCounter")]
        public double MoveCounter { get; set; }

        [JsonProperty("movedByRobot")]
        public bool MovedByRobot { get; set; }

        [JsonProperty("movedFromFired", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MovedFromFired { get; set; }

        [JsonProperty("networkID", NullValueHandling = NullValueHandling.Ignore)]
        public string NetworkId { get; set; }

        [JsonProperty("notes")]
        public string Notes { get; set; }

        [JsonProperty("order")]
        public Order Order { get; set; }

        [JsonProperty("preferredResource", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PreferredResource { get; set; }

        [JsonProperty("promoCode", NullValueHandling = NullValueHandling.Ignore)]
        public string PromoCode { get; set; }

        [JsonProperty("refererLink", NullValueHandling = NullValueHandling.Ignore)]
        public string RefererLink { get; set; }

        [JsonProperty("referrer", NullValueHandling = NullValueHandling.Ignore)]
        public string Referrer { get; set; }

        [JsonProperty("reminder")]
        public Reminder Reminder { get; set; }

        [JsonProperty("removedClientsData")]
        public List<RemovedClientsDatum> RemovedClientsData { get; set; }

        [JsonProperty("resource")]
        public AppointmentResource Resource { get; set; }

        [JsonProperty("review", NullValueHandling = NullValueHandling.Ignore)]
        public Review Review { get; set; }

        [JsonProperty("room", NullValueHandling = NullValueHandling.Ignore)]
        public Room Room { get; set; }

        [JsonProperty("showcase")]
        public AppointmentShowcase Showcase { get; set; }

        [JsonProperty("socialToken", NullValueHandling = NullValueHandling.Ignore)]
        public string SocialToken { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("taxonomy")]
        public AppointmentTaxonomy Taxonomy { get; set; }

        [JsonProperty("utm", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> Utm { get; set; }

        [JsonProperty("withCoSale", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithCoSale { get; set; }
    }

    public partial class AdditionalClientAppear
    {
        [JsonProperty("appear")]
        public AppointmentClientAppear Appear { get; set; }

        [JsonProperty("clientID")]
        public string ClientId { get; set; }
    }

    public partial class AdditionalClientPayment
    {
        [JsonProperty("clientID")]
        public string ClientId { get; set; }

        [JsonProperty("payment")]
        public AppointmentClientPayment Payment { get; set; }
    }

    public partial class AdditionalClientSource
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("clientID")]
        public string ClientId { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }
    }

    public partial class AdditionalClientStatus
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("clientID")]
        public string ClientId { get; set; }

        [JsonProperty("history", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> History { get; set; }

        [JsonProperty("status")]
        public AppointmentStatus Status { get; set; }
    }

    public partial class AdditionalClientUtm
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("clientID")]
        public string ClientId { get; set; }

        [JsonProperty("utm", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> Utm { get; set; }
    }

    public partial class AdditionalClientElement
    {
        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("adminComment")]
        public string AdminComment { get; set; }

        [JsonProperty("birthday")]
        public Birthday? Birthday { get; set; }

        [JsonProperty("clientCardNumber")]
        public string ClientCardNumber { get; set; }

        [JsonProperty("clientComment")]
        public string ClientComment { get; set; }

        [JsonProperty("creatorProfileID")]
        public string CreatorProfileId { get; set; }

        [JsonProperty("creatorProfileName")]
        public string CreatorProfileName { get; set; }

        [JsonProperty("driverLicense")]
        public string DriverLicense { get; set; }

        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Email { get; set; }

        [JsonProperty("extraData", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> ExtraData { get; set; }

        [JsonProperty("extraID")]
        public string ExtraId { get; set; }

        [JsonProperty("extraVisitors", NullValueHandling = NullValueHandling.Ignore)]
        public double? ExtraVisitors { get; set; }

        [JsonProperty("fax")]
        public string Fax { get; set; }

        [JsonProperty("feedback", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentClientFeedback Feedback { get; set; }

        [JsonProperty("GAClientID")]
        public string GaClientId { get; set; }

        [JsonProperty("houseNumber")]
        public string HouseNumber { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("incomingPhone", NullValueHandling = NullValueHandling.Ignore)]
        public List<IncomingPhoneElement> IncomingPhone { get; set; }

        [JsonProperty("israelCity")]
        public IsraelCity IsraelCity { get; set; }

        [JsonProperty("isVIP", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVip { get; set; }

        [JsonProperty("kupatHolim")]
        public KupatHolim KupatHolim { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        [JsonProperty("middleName")]
        public string MiddleName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("passportId")]
        public string PassportId { get; set; }

        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public List<IncomingPhoneElement> Phone { get; set; }

        [JsonProperty("seasonTicketId")]
        public string SeasonTicketId { get; set; }

        [JsonProperty("seasonTicketNumber")]
        public string SeasonTicketNumber { get; set; }

        [JsonProperty("sex", NullValueHandling = NullValueHandling.Ignore)]
        public Sex? Sex { get; set; }

        [JsonProperty("shortId", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortId { get; set; }

        [JsonProperty("surname")]
        public string Surname { get; set; }

        [JsonProperty("taxiPark")]
        public string TaxiPark { get; set; }

        [JsonProperty("taxiParkMemberCount")]
        public double? TaxiParkMemberCount { get; set; }
    }

    public partial class AppointmentClientFeedback
    {
        [JsonProperty("complaintActionText", NullValueHandling = NullValueHandling.Ignore)]
        public string ComplaintActionText { get; set; }

        [JsonProperty("complaintStatus", NullValueHandling = NullValueHandling.Ignore)]
        public ComplaintStatus? ComplaintStatus { get; set; }

        [JsonProperty("complaintText", NullValueHandling = NullValueHandling.Ignore)]
        public string ComplaintText { get; set; }

        [JsonProperty("extraFields", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExtraField> ExtraFields { get; set; }

        [JsonProperty("inprogress", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Inprogress { get; set; }

        [JsonProperty("originalMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginalMessage { get; set; }

        [JsonProperty("rating", NullValueHandling = NullValueHandling.Ignore)]
        public string Rating { get; set; }
    }

    public partial class ExtraField
    {
        [JsonProperty("fieldID")]
        public string FieldId { get; set; }

        [JsonProperty("fieldName")]
        public string FieldName { get; set; }

        [JsonProperty("value")]
        public Value? Value { get; set; }
    }

    public partial class IncomingPhoneElement
    {
        [JsonProperty("area_code")]
        public string AreaCode { get; set; }

        [JsonProperty("country_code")]
        public string CountryCode { get; set; }

        [JsonProperty("number")]
        public string Number { get; set; }
    }

    public partial class IsraelCity
    {
        [JsonProperty("cityId", NullValueHandling = NullValueHandling.Ignore)]
        public string CityId { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class KupatHolim
    {
        [JsonProperty("kupatHolimId", NullValueHandling = NullValueHandling.Ignore)]
        public string KupatHolimId { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class AdditionalField
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("requiredField")]
        public bool RequiredField { get; set; }

        [JsonProperty("shortName")]
        public string ShortName { get; set; }

        [JsonProperty("type")]
        public AdditionalFieldType Type { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class AdditionalProduct
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("price")]
        public double Price { get; set; }
    }

    public partial class AppointmentTaxonomy
    {
        [JsonProperty("alias")]
        public string Alias { get; set; }

        [JsonProperty("extraId", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraId { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class AppointmentInfo
    {
        [JsonProperty("backofficeID")]
        public BackofficeIdUnion BackofficeId { get; set; }

        [JsonProperty("blockSMS")]
        public bool BlockSms { get; set; }

        [JsonProperty("created")]
        public DateTimeOffset Created { get; set; }

        [JsonProperty("drinkAnswer", NullValueHandling = NullValueHandling.Ignore)]
        public DrinkAnswer? DrinkAnswer { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("hideAppointmentTime")]
        public bool HideAppointmentTime { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("integration_data", NullValueHandling = NullValueHandling.Ignore)]
        public IntegrationData IntegrationData { get; set; }

        [JsonProperty("price")]
        public Price Price { get; set; }

        [JsonProperty("shortId")]
        public string ShortId { get; set; }

        [JsonProperty("start")]
        public DateTimeOffset Start { get; set; }

        [JsonProperty("status")]
        public AppointmentStatus Status { get; set; }

        [JsonProperty("talkAnswer", NullValueHandling = NullValueHandling.Ignore)]
        public TalkAnswer? TalkAnswer { get; set; }

        [JsonProperty("testRecord")]
        public bool TestRecord { get; set; }

        [JsonProperty("updated")]
        public DateTimeOffset Updated { get; set; }
    }

    public partial class IntegrationData
    {
        [JsonProperty("extraId")]
        public string ExtraId { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("additionalTaxonomyDiscount")]
        public List<AdditionalTaxonomyDiscount> AdditionalTaxonomyDiscount { get; set; }

        [JsonProperty("amount")]
        public double Amount { get; set; }

        [JsonProperty("currency")]
        public CurrencyList Currency { get; set; }

        [JsonProperty("discount", NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        [JsonProperty("discountProvider", NullValueHandling = NullValueHandling.Ignore)]
        public DiscountProvider? DiscountProvider { get; set; }

        [JsonProperty("discountType", NullValueHandling = NullValueHandling.Ignore)]
        public string DiscountType { get; set; }

        [JsonProperty("originalAmount")]
        public double? OriginalAmount { get; set; }
    }

    public partial class AdditionalTaxonomyDiscount
    {
        [JsonProperty("discount", NullValueHandling = NullValueHandling.Ignore)]
        public double? Discount { get; set; }

        [JsonProperty("discountProvider", NullValueHandling = NullValueHandling.Ignore)]
        public DiscountProvider? DiscountProvider { get; set; }

        [JsonProperty("discountType", NullValueHandling = NullValueHandling.Ignore)]
        public string DiscountType { get; set; }

        [JsonProperty("taxonomyID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyId { get; set; }
    }

    public partial class AppointmentBusiness
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class Cabinet
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }
    }

    /// <summary>
    /// пустой объект в момент резервирования
    /// </summary>
    public partial class PurpleAppointmentClient
    {
        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("adminComment")]
        public string AdminComment { get; set; }

        [JsonProperty("birthday")]
        public Birthday? Birthday { get; set; }

        [JsonProperty("clientCardNumber")]
        public string ClientCardNumber { get; set; }

        [JsonProperty("clientComment")]
        public string ClientComment { get; set; }

        [JsonProperty("creatorProfileID")]
        public string CreatorProfileId { get; set; }

        [JsonProperty("creatorProfileName")]
        public string CreatorProfileName { get; set; }

        [JsonProperty("driverLicense")]
        public string DriverLicense { get; set; }

        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Email { get; set; }

        [JsonProperty("extraData", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> ExtraData { get; set; }

        [JsonProperty("extraID")]
        public string ExtraId { get; set; }

        [JsonProperty("extraVisitors", NullValueHandling = NullValueHandling.Ignore)]
        public double? ExtraVisitors { get; set; }

        [JsonProperty("fax")]
        public string Fax { get; set; }

        [JsonProperty("feedback", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentClientFeedback Feedback { get; set; }

        [JsonProperty("GAClientID")]
        public string GaClientId { get; set; }

        [JsonProperty("houseNumber")]
        public string HouseNumber { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("incomingPhone", NullValueHandling = NullValueHandling.Ignore)]
        public List<IncomingPhoneElement> IncomingPhone { get; set; }

        [JsonProperty("israelCity")]
        public IsraelCity IsraelCity { get; set; }

        [JsonProperty("isVIP", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVip { get; set; }

        [JsonProperty("kupatHolim")]
        public KupatHolim KupatHolim { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        [JsonProperty("middleName")]
        public string MiddleName { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("passportId")]
        public string PassportId { get; set; }

        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public List<IncomingPhoneElement> Phone { get; set; }

        [JsonProperty("seasonTicketId")]
        public string SeasonTicketId { get; set; }

        [JsonProperty("seasonTicketNumber")]
        public string SeasonTicketNumber { get; set; }

        [JsonProperty("sex", NullValueHandling = NullValueHandling.Ignore)]
        public Sex? Sex { get; set; }

        [JsonProperty("shortId", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortId { get; set; }

        [JsonProperty("surname", NullValueHandling = NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [JsonProperty("taxiPark")]
        public string TaxiPark { get; set; }

        [JsonProperty("taxiParkMemberCount")]
        public double? TaxiParkMemberCount { get; set; }
    }

    public partial class AppointmentClientVisitor
    {
        [JsonProperty("birthday")]
        public Birthday? Birthday { get; set; }

        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Email { get; set; }

        [JsonProperty("extraVisitors", NullValueHandling = NullValueHandling.Ignore)]
        public double? ExtraVisitors { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("parentClientID", NullValueHandling = NullValueHandling.Ignore)]
        public string ParentClientId { get; set; }

        [JsonProperty("parentProfileID", NullValueHandling = NullValueHandling.Ignore)]
        public string ParentProfileId { get; set; }

        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public List<IncomingPhoneElement> Phone { get; set; }

        [JsonProperty("sex", NullValueHandling = NullValueHandling.Ignore)]
        public Sex? Sex { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }
    }

    public partial class Order
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class Reminder
    {
        [JsonProperty("status")]
        public ReminderStatus Status { get; set; }

        [JsonProperty("time_reminder")]
        public double TimeReminder { get; set; }
    }

    public partial class RemovedClientsDatum
    {
        [JsonProperty("appear", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentClientAppear? Appear { get; set; }

        [JsonProperty("client")]
        public AdditionalClientElement Client { get; set; }

        [JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created { get; set; }

        [JsonProperty("payment", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentClientPayment? Payment { get; set; }

        [JsonProperty("payment_invoice", NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentInvoice { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentStatus? Status { get; set; }
    }

    public partial class AppointmentResource
    {
        [JsonProperty("extraID")]
        public string ExtraId { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("middleName", NullValueHandling = NullValueHandling.Ignore)]
        public string MiddleName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("surname")]
        public string Surname { get; set; }
    }

    public partial class Review
    {
        [JsonProperty("business")]
        public BusinessClass Business { get; set; }

        [JsonProperty("taxonomy")]
        public BusinessClass Taxonomy { get; set; }

        [JsonProperty("worker")]
        public BusinessClass Worker { get; set; }
    }

    public partial class BusinessClass
    {
        [JsonProperty("comment", NullValueHandling = NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [JsonProperty("rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? Rate { get; set; }
    }

    public partial class Room
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class AppointmentShowcase
    {
        [JsonProperty("businessID", NullValueHandling = NullValueHandling.Ignore)]
        public string BusinessId { get; set; }
    }

    public partial class ClientRemoveEmptyAppointment
    {
        [JsonProperty("request")]
        public AppointmentClientRemoveEmptyAppointmentRequest Request { get; set; }

        [JsonProperty("response")]
        public AppointmentClientRemoveEmptyAppointmentResponse Response { get; set; }
    }

    public partial class AppointmentClientRemoveEmptyAppointmentRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public RemoveEmptyAppointment Params { get; set; }
    }

    public partial class RemoveEmptyAppointment
    {
        [JsonProperty("appointment")]
        public StickyAppointment Appointment { get; set; }

        [JsonProperty("business")]
        public PurpleBusiness Business { get; set; }
    }

    public partial class StickyAppointment
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class PurpleBusiness
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class AppointmentClientRemoveEmptyAppointmentResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentClientRemoveEmptyAppointmentResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class AppointmentClientRemoveEmptyAppointmentResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class GetAppointmentByFilter
    {
        [JsonProperty("request")]
        public AppointmentGetAppointmentByFilterRequest Request { get; set; }

        [JsonProperty("response")]
        public AppointmentGetAppointmentByFilterResponse Response { get; set; }
    }

    public partial class AppointmentGetAppointmentByFilterRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public AppointmentGetAppointmentByFilterRequestParams Params { get; set; }
    }

    public partial class AppointmentGetAppointmentByFilterRequestParams
    {
        [JsonProperty("business", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyBusiness Business { get; set; }

        [JsonProperty("extraFilters", NullValueHandling = NullValueHandling.Ignore)]
        public ExtraFilters ExtraFilters { get; set; }

        [JsonProperty("filter", NullValueHandling = NullValueHandling.Ignore)]
        public Filter Filter { get; set; }

        [JsonProperty("network", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleNetwork Network { get; set; }

        [JsonProperty("page")]
        public double Page { get; set; }

        [JsonProperty("pageSize")]
        public double PageSize { get; set; }

        [JsonProperty("skipBusinessCancelled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipBusinessCancelled { get; set; }
    }

    public partial class FluffyBusiness
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeIdUnion? Id { get; set; }
    }

    public partial class ExtraFilters
    {
        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public List<Sort> Sort { get; set; }
    }

    public partial class Sort
    {
        [JsonProperty("dir")]
        public Dir Dir { get; set; }

        [JsonProperty("field")]
        public SortField Field { get; set; }
    }

    public partial class Filter
    {
        [JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        public FilterCreated Created { get; set; }

        [JsonProperty("end", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? End { get; set; }

        [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Services { get; set; }

        [JsonProperty("skipUpdated", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipUpdated { get; set; }

        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Start { get; set; }

        [JsonProperty("workers", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Workers { get; set; }
    }

    public partial class FilterCreated
    {
        [JsonProperty("end")]
        public DateTimeOffset End { get; set; }

        [JsonProperty("start")]
        public DateTimeOffset Start { get; set; }
    }

    public partial class PurpleNetwork
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeIdUnion? Id { get; set; }
    }

    public partial class AppointmentGetAppointmentByFilterResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentGetAppointmentByFilterResponseResult Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentGetAppointmentByFilterResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class AppointmentGetAppointmentByFilterResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// данные, передаваемые в ответ
    /// </summary>
    public partial class AppointmentGetAppointmentByFilterResponseResult
    {
        [JsonProperty("data")]
        public List<AppointmentElement> Data { get; set; }

        [JsonProperty("page")]
        public double Page { get; set; }

        [JsonProperty("total")]
        public double Total { get; set; }

        [JsonProperty("unconfirmed")]
        public double Unconfirmed { get; set; }
    }

    public partial class GetAppointmentByShowcase
    {
        [JsonProperty("request")]
        public AppointmentGetAppointmentByShowcaseRequest Request { get; set; }

        [JsonProperty("response")]
        public AppointmentGetAppointmentByShowcaseResponse Response { get; set; }
    }

    public partial class AppointmentGetAppointmentByShowcaseRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public AppointmentGetAppointmentByShowcaseRequestParams Params { get; set; }
    }

    public partial class AppointmentGetAppointmentByShowcaseRequestParams
    {
        [JsonProperty("business")]
        public TentacledBusiness Business { get; set; }

        [JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        public ParamsCreated Created { get; set; }

        [JsonProperty("page")]
        public double Page { get; set; }

        [JsonProperty("pageSize")]
        public double PageSize { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }
    }

    public partial class TentacledBusiness
    {
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }
    }

    public partial class ParamsCreated
    {
        [JsonProperty("end")]
        public DateTimeOffset End { get; set; }

        [JsonProperty("start")]
        public DateTimeOffset Start { get; set; }
    }

    public partial class AppointmentGetAppointmentByShowcaseResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public List<AppointmentElement> Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentGetAppointmentByShowcaseResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class AppointmentGetAppointmentByShowcaseResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class ReserveAppointment
    {
        [JsonProperty("request")]
        public AppointmentReserveAppointmentRequest Request { get; set; }

        [JsonProperty("response")]
        public AppointmentReserveAppointmentResponse Response { get; set; }
    }

    public partial class AppointmentReserveAppointmentRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public AppointmentReserve Params { get; set; }
    }

    public partial class AppointmentReserve
    {
        [JsonProperty("appointment")]
        public IndigoAppointment Appointment { get; set; }

        [JsonProperty("business")]
        public StickyBusiness Business { get; set; }

        [JsonProperty("originBusinessID")]
        public string OriginBusinessId { get; set; }

        [JsonProperty("resource")]
        public PurpleResource Resource { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("taxonomy")]
        public PurpleTaxonomy Taxonomy { get; set; }
    }

    public partial class IndigoAppointment
    {
        [JsonProperty("start")]
        public string Start { get; set; }
    }

    public partial class StickyBusiness
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class PurpleResource
    {
        [JsonProperty("id")]
        public ResourceId Id { get; set; }
    }

    public partial class PurpleTaxonomy
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class AppointmentReserveAppointmentResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result")]
        public AppointmentElement? Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentReserveAppointmentResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class AppointmentReserveAppointmentResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class BusinessController
    {
        [JsonProperty("get_network_data")]
        public GetNetworkData GetNetworkData { get; set; }

        [JsonProperty("get_profile_by_id")]
        public GetProfileById GetProfileById { get; set; }
    }

    public partial class GetNetworkData
    {
        [JsonProperty("request")]
        public BusinessGetNetworkDataRequest Request { get; set; }

        [JsonProperty("response")]
        public BusinessGetNetworkDataResponse Response { get; set; }
    }

    public partial class BusinessGetNetworkDataRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        ///
        /// параметры запроса business.get_network_data
        /// </summary>
        [JsonProperty("params")]
        public BusinessGetNetworkDataRequestParams Params { get; set; }
    }

    /// <summary>
    /// параметры запроса business.get_network_data
    /// </summary>
    public partial class BusinessGetNetworkDataRequestParams
    {
        /// <summary>
        /// идентификатор сети
        /// </summary>
        [JsonProperty("networkID")]
        public BackofficeIdUnion NetworkId { get; set; }

        [JsonProperty("resource", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyResource Resource { get; set; }

        [JsonProperty("taxonomy", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyTaxonomy Taxonomy { get; set; }

        /// <summary>
        /// Если передано true - возвращает информацию business_info/general_info по каждому бизнесу
        /// в массиве businesses
        /// </summary>
        [JsonProperty("with_business_info", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithBusinessInfo { get; set; }
    }

    public partial class FluffyResource
    {
        /// <summary>
        /// идентификатор работника, если передано - возвращает все бизнесы нетворка где есть
        /// работник с таким ключем
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }
    }

    public partial class FluffyTaxonomy
    {
        /// <summary>
        /// идентификатор услуги, если передано - возвращает все бизнесы нетворка с такой услугой
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }
    }

    public partial class BusinessGetNetworkDataResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result")]
        public BusinessGetNetworkDataResponseResult Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public BusinessGetNetworkDataResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class BusinessGetNetworkDataResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class BusinessGetNetworkDataResponseResult
    {
        [JsonProperty("businessConfiguration")]
        public Dictionary<string, object> BusinessConfiguration { get; set; }

        [JsonProperty("businesses")]
        public List<BusinessRefInNetwork> Businesses { get; set; }

        [JsonProperty("clientVIPPhones")]
        public List<string> ClientVipPhones { get; set; }

        [JsonProperty("grantGroups")]
        public List<Dictionary<string, object>> GrantGroups { get; set; }

        [JsonProperty("networkID")]
        public string NetworkId { get; set; }

        [JsonProperty("networkInfo")]
        public Dictionary<string, object> NetworkInfo { get; set; }

        [JsonProperty("networkName", NullValueHandling = NullValueHandling.Ignore)]
        public string NetworkName { get; set; }

        /// <summary>
        /// настройки показа сети в зависимости от источника, на котором размещено приложение
        /// </summary>
        [JsonProperty("networkWidgetConfiguration")]
        public List<NetworkWidgetConfiguration> NetworkWidgetConfiguration { get; set; }
    }

    /// <summary>
    /// указатель на бизнес в сети
    /// </summary>
    public partial class BusinessRefInNetwork
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("businessID")]
        public string BusinessId { get; set; }

        [JsonProperty("info")]
        public BusinessBusiness? Info { get; set; }

        [JsonProperty("isMapBusiness")]
        public bool IsMapBusiness { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public double? Order { get; set; }

        [JsonProperty("virtualTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> VirtualTaxonomies { get; set; }
    }

    public partial class IndigoBusiness
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        /// <summary>
        /// колличество активных рабоников, возвращается при вызове через get_network_data при
        /// передаче ключа работника или услуги
        /// </summary>
        [JsonProperty("activeResourceCount", NullValueHandling = NullValueHandling.Ignore)]
        public double? ActiveResourceCount { get; set; }

        /// <summary>
        /// колличество активных услуг, возвращается при вызове через get_network_data при передаче
        /// ключа работника или услуги
        /// </summary>
        [JsonProperty("activeTaxonomyCount", NullValueHandling = NullValueHandling.Ignore)]
        public double? ActiveTaxonomyCount { get; set; }

        [JsonProperty("additionalSettings", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleAdditionalSettings AdditionalSettings { get; set; }

        [JsonProperty("allowCategoryBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowCategoryBooking { get; set; }

        [JsonProperty("backoffice_configuration", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyBackofficeConfiguration BusinessBackofficeConfiguration { get; set; }

        [JsonProperty("backofficeConfiguration", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleBackofficeConfiguration BackofficeConfiguration { get; set; }

        [JsonProperty("backofficeType", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeType? BackofficeType { get; set; }

        [JsonProperty("cabinets", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleCabinet> Cabinets { get; set; }

        [JsonProperty("cabinetsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CabinetsEnabled { get; set; }

        [JsonProperty("callback_widget_configuration", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCallbackWidgetConfiguration CallbackWidgetConfiguration { get; set; }

        [JsonProperty("consumables", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleConsumable> Consumables { get; set; }

        [JsonProperty("created_on", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedOn { get; set; }

        [JsonProperty("defaultFilteredWorkers", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> DefaultFilteredWorkers { get; set; }

        [JsonProperty("departments", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleDepartment> Departments { get; set; }

        [JsonProperty("designs", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> Designs { get; set; }

        [JsonProperty("extraID", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraId { get; set; }

        [JsonProperty("flatTaxonomyDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FlatTaxonomyDisplay { get; set; }

        [JsonProperty("general_info")]
        public BusinessInfo GeneralInfo { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public Group? Group { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("integration_data", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> IntegrationData { get; set; }

        [JsonProperty("mini_widget_configuration")]
        public PurpleMiniWidgetConfiguration MiniWidgetConfiguration { get; set; }

        [JsonProperty("mobileData", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> MobileData { get; set; }

        [JsonProperty("notifications", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Notifications { get; set; }

        [JsonProperty("resources", NullValueHandling = NullValueHandling.Ignore)]
        public List<Resource> Resources { get; set; }

        [JsonProperty("stateLevelHolidaysNotWorking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StateLevelHolidaysNotWorking { get; set; }

        [JsonProperty("taxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleBusinessTaxonomy> Taxonomies { get; set; }

        [JsonProperty("taxonomiesComplex", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleTaxonomiesComplex> TaxonomiesComplex { get; set; }

        [JsonProperty("taxonomy_tree_capacity", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> TaxonomyTreeCapacity { get; set; }

        [JsonProperty("top_services", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleTopServices TopServices { get; set; }

        [JsonProperty("vertical", NullValueHandling = NullValueHandling.Ignore)]
        public string Vertical { get; set; }

        [JsonProperty("widget_configuration")]
        public PurpleWidgetConfiguration WidgetConfiguration { get; set; }

        [JsonProperty("yandexFeedType", NullValueHandling = NullValueHandling.Ignore)]
        public string YandexFeedType { get; set; }
    }

    public partial class PurpleAdditionalSettings
    {
        [JsonProperty("appointmentExtensionAmount", NullValueHandling = NullValueHandling.Ignore)]
        public double? AppointmentExtensionAmount { get; set; }

        [JsonProperty("appointmentExtensionType", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentExtensionType? AppointmentExtensionType { get; set; }
    }

    public partial class PurpleBackofficeConfiguration
    {
        [JsonProperty("adjacentTaxonomiesTreshold", NullValueHandling = NullValueHandling.Ignore)]
        public double? AdjacentTaxonomiesTreshold { get; set; }

        [JsonProperty("allowHideServiceForBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowHideServiceForBooking { get; set; }

        [JsonProperty("allowHideWorkersFromSchdeule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowHideWorkersFromSchdeule { get; set; }

        [JsonProperty("allowSmsTranslit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowSmsTranslit { get; set; }

        [JsonProperty("appointmentFutureMoving", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AppointmentFutureMoving { get; set; }

        [JsonProperty("blockNotificationForAnyAvailableAdjacentService", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BlockNotificationForAnyAvailableAdjacentService { get; set; }

        [JsonProperty("cabinetsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CabinetsEnabled { get; set; }

        [JsonProperty("checkClientOverlapping", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CheckClientOverlapping { get; set; }

        [JsonProperty("customOnlinePaymentConfirmationTemplate", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomOnlinePaymentConfirmationTemplate { get; set; }

        [JsonProperty("defaultGTScheduleDayView", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DefaultGtScheduleDayView { get; set; }

        [JsonProperty("disableAppointmentClientInlineEditor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisableAppointmentClientInlineEditor { get; set; }

        [JsonProperty("editAppExtraId", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EditAppExtraId { get; set; }

        [JsonProperty("editTaxonomyChildren", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EditTaxonomyChildren { get; set; }

        [JsonProperty("editTaxonomyVisitType", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EditTaxonomyVisitType { get; set; }

        [JsonProperty("enableBlackList", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableBlackList { get; set; }

        [JsonProperty("enableCalculateShedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableCalculateShedule { get; set; }

        [JsonProperty("enableClientCard", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableClientCard { get; set; }

        [JsonProperty("enableClientLanguage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableClientLanguage { get; set; }

        [JsonProperty("enableClientMedicalCardReport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableClientMedicalCardReport { get; set; }

        [JsonProperty("enableCustomOnlinePaymentConfirmation", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableCustomOnlinePaymentConfirmation { get; set; }

        [JsonProperty("enableExtendedPhone", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableExtendedPhone { get; set; }

        [JsonProperty("enableExtendedRecordsClientStatistics", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableExtendedRecordsClientStatistics { get; set; }

        [JsonProperty("enableMasterImportance", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableMasterImportance { get; set; }

        [JsonProperty("enableServiceTimeLimit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableServiceTimeLimit { get; set; }

        [JsonProperty("enableSourceChoice", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableSourceChoice { get; set; }

        [JsonProperty("enableTaxonomyChildrenAgeCheck", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableTaxonomyChildrenAgeCheck { get; set; }

        [JsonProperty("exportToExcelRemovedClients", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ExportToExcelRemovedClients { get; set; }

        [JsonProperty("feedbackCustomerPortalMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string FeedbackCustomerPortalMessage { get; set; }

        [JsonProperty("feedbackCustomerPortalThankYouMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string FeedbackCustomerPortalThankYouMessage { get; set; }

        [JsonProperty("feedbackCustomerPortalTitle", NullValueHandling = NullValueHandling.Ignore)]
        public string FeedbackCustomerPortalTitle { get; set; }

        [JsonProperty("feedBackMinRating", NullValueHandling = NullValueHandling.Ignore)]
        public FeedBackMinRating? FeedBackMinRating { get; set; }

        [JsonProperty("finId", NullValueHandling = NullValueHandling.Ignore)]
        public string FinId { get; set; }

        [JsonProperty("finName", NullValueHandling = NullValueHandling.Ignore)]
        public string FinName { get; set; }

        [JsonProperty("hideCustomerPortalFooter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideCustomerPortalFooter { get; set; }

        [JsonProperty("highlightedResource", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HighlightedResource { get; set; }

        [JsonProperty("manualExceptionSupport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ManualExceptionSupport { get; set; }

        [JsonProperty("noInternetAlert", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NoInternetAlert { get; set; }

        [JsonProperty("pastTimeEdit", NullValueHandling = NullValueHandling.Ignore)]
        public double? PastTimeEdit { get; set; }

        [JsonProperty("paymentProvider", NullValueHandling = NullValueHandling.Ignore)]
        public PurplePaymentProvider? PaymentProvider { get; set; }

        [JsonProperty("readonlyResourceSchedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReadonlyResourceSchedule { get; set; }

        [JsonProperty("resourceTimetableType", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceTimetableType? ResourceTimetableType { get; set; }

        [JsonProperty("revisionVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? RevisionVersion { get; set; }

        [JsonProperty("schduleWeekViewIsDefault", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SchduleWeekViewIsDefault { get; set; }

        [JsonProperty("scheduleDefaultWorkersLimit", NullValueHandling = NullValueHandling.Ignore)]
        public double? ScheduleDefaultWorkersLimit { get; set; }

        [JsonProperty("scheduleDefaultWorkersLimitDay")]
        public double? ScheduleDefaultWorkersLimitDay { get; set; }

        [JsonProperty("scheduleDefaultWorkersLimitWeek")]
        public double? ScheduleDefaultWorkersLimitWeek { get; set; }

        [JsonProperty("schedulerWeekViewType", NullValueHandling = NullValueHandling.Ignore)]
        public SchedulerWeekViewType? SchedulerWeekViewType { get; set; }

        [JsonProperty("scheduleWorkerHours", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ScheduleWorkerHours { get; set; }

        [JsonProperty("showAdditionalFields", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAdditionalFields { get; set; }

        [JsonProperty("showAddress", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAddress { get; set; }

        [JsonProperty("showBirthDate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowBirthDate { get; set; }

        [JsonProperty("showClientAppear", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientAppear { get; set; }

        [JsonProperty("showClientAppearOnSchedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientAppearOnSchedule { get; set; }

        [JsonProperty("showClientBirthdayFilter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientBirthdayFilter { get; set; }

        [JsonProperty("showClientContractNumber", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientContractNumber { get; set; }

        [JsonProperty("showClientImage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientImage { get; set; }

        [JsonProperty("showClientPayment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientPayment { get; set; }

        [JsonProperty("showDefaulterBlockscreen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDefaulterBlockscreen { get; set; }

        [JsonProperty("showDeliveryStatus", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDeliveryStatus { get; set; }

        [JsonProperty("showDepartmentFilter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDepartmentFilter { get; set; }

        [JsonProperty("showDepartments", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDepartments { get; set; }

        [JsonProperty("showDepartmentsConfiguration", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDepartmentsConfiguration { get; set; }

        [JsonProperty("showEmail", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowEmail { get; set; }

        [JsonProperty("showExtraClientInfo", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowExtraClientInfo { get; set; }

        [JsonProperty("showFax", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowFax { get; set; }

        [JsonProperty("showFiredWorkerAppointmentAlert", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowFiredWorkerAppointmentAlert { get; set; }

        [JsonProperty("showFirstAvailableSlot", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowFirstAvailableSlot { get; set; }

        [JsonProperty("showGapWindow", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGapWindow { get; set; }

        [JsonProperty("showGender", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGender { get; set; }

        [JsonProperty("showGenderInRecords", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGenderInRecords { get; set; }

        [JsonProperty("showGeneratableReportsScreen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGeneratableReportsScreen { get; set; }

        [JsonProperty("showHouseNumber", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowHouseNumber { get; set; }

        [JsonProperty("showIsraelCity", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowIsraelCity { get; set; }

        [JsonProperty("showKupatHolim", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowKupatHolim { get; set; }

        [JsonProperty("showLeadsScreen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowLeadsScreen { get; set; }

        [JsonProperty("showManualChanges", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowManualChanges { get; set; }

        [JsonProperty("showPassportId", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowPassportId { get; set; }

        [JsonProperty("showRooms", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowRooms { get; set; }

        [JsonProperty("showSeasonTickets", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowSeasonTickets { get; set; }

        [JsonProperty("showTaxonomyChildren", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTaxonomyChildren { get; set; }

        [JsonProperty("showTaxonomyLocalization", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTaxonomyLocalization { get; set; }

        [JsonProperty("showTaxonomyVisitType", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTaxonomyVisitType { get; set; }

        [JsonProperty("showTestRecord", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTestRecord { get; set; }

        [JsonProperty("showUTM", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowUtm { get; set; }

        [JsonProperty("showWidgetColorTheme", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWidgetColorTheme { get; set; }

        [JsonProperty("showWorkerDescriptionInEvent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWorkerDescriptionInEvent { get; set; }

        [JsonProperty("showWorkerExtraId", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWorkerExtraId { get; set; }

        [JsonProperty("showWorkerStatus", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWorkerStatus { get; set; }

        [JsonProperty("skipAppointmentPriceUpdate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipAppointmentPriceUpdate { get; set; }

        [JsonProperty("skipCancelIfClientNotAppear", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipCancelIfClientNotAppear { get; set; }

        [JsonProperty("skipServiceFiltering", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipServiceFiltering { get; set; }

        [JsonProperty("splitFullNameXlsExport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SplitFullNameXlsExport { get; set; }

        [JsonProperty("stateLevelHolidays", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> StateLevelHolidays { get; set; }

        [JsonProperty("stateLevelHolidaysNotWorking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StateLevelHolidaysNotWorking { get; set; }

        [JsonProperty("taxonomyChildrenMaxAge", NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxonomyChildrenMaxAge { get; set; }

        [JsonProperty("useAdditionalDurations", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAdditionalDurations { get; set; }

        [JsonProperty("useAdjacentTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAdjacentTaxonomies { get; set; }

        [JsonProperty("useAdjacentTaxonomiesSlotSplitting", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAdjacentTaxonomiesSlotSplitting { get; set; }

        [JsonProperty("useGtAppMethod", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseGtAppMethod { get; set; }

        [JsonProperty("workWeekEnd", NullValueHandling = NullValueHandling.Ignore)]
        public double? WorkWeekEnd { get; set; }

        [JsonProperty("workWeekStart", NullValueHandling = NullValueHandling.Ignore)]
        public double? WorkWeekStart { get; set; }
    }

    public partial class FluffyBackofficeConfiguration
    {
        [JsonProperty("enableMasterImportance", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableMasterImportance { get; set; }

        [JsonProperty("resourceTimetableType", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceTimetableType? ResourceTimetableType { get; set; }
    }

    public partial class PurpleCabinet
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class PurpleCallbackWidgetConfiguration
    {
        [JsonProperty("title1", NullValueHandling = NullValueHandling.Ignore)]
        public string Title1 { get; set; }

        [JsonProperty("title2", NullValueHandling = NullValueHandling.Ignore)]
        public string Title2 { get; set; }
    }

    public partial class PurpleConsumable
    {
        [JsonProperty("extraID")]
        public string ExtraId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("quantity")]
        public double Quantity { get; set; }
    }

    public partial class PurpleDepartment
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("id_", NullValueHandling = NullValueHandling.Ignore)]
        public double? DepartmentId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// Содержит детальную информацию о бизнесе — название, адрес, график работы и другое
    /// </summary>
    public partial class BusinessInfo
    {
        [JsonProperty("accepted_currency", NullValueHandling = NullValueHandling.Ignore)]
        public List<CurrencyList> AcceptedCurrency { get; set; }

        [JsonProperty("additional_info")]
        public string AdditionalInfo { get; set; }

        [JsonProperty("additionalFields", NullValueHandling = NullValueHandling.Ignore)]
        public List<AdditionalFields> AdditionalFields { get; set; }

        /// <summary>
        /// Адреса компании или филиала
        /// </summary>
        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public List<AddressElement> Address { get; set; }

        [JsonProperty("align_min_booking_time")]
        public bool? AlignMinBookingTime { get; set; }

        [JsonProperty("autoAcceptAppointment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AutoAcceptAppointment { get; set; }

        /// <summary>
        /// если данный бизнес является витриной, идентификаторы бизнесов, которые входят в витрину
        /// </summary>
        [JsonProperty("businessShowcaseAliases", NullValueHandling = NullValueHandling.Ignore)]
        public List<BusinessShowcaseAlias> BusinessShowcaseAliases { get; set; }

        [JsonProperty("contactName")]
        public string ContactName { get; set; }

        [JsonProperty("date_joined", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateJoined { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Список e-mail адресов компании или филиала
        /// </summary>
        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("fax", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> Fax { get; set; }

        [JsonProperty("images", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Images { get; set; }

        [JsonProperty("instant_messaging", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> InstantMessaging { get; set; }

        /// <summary>
        /// является ли данный бизнес витриной
        /// </summary>
        [JsonProperty("isShowcase", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsShowcase { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageList? Language { get; set; }

        [JsonProperty("logo_url")]
        public string LogoUrl { get; set; }

        [JsonProperty("marketingNotifications", NullValueHandling = NullValueHandling.Ignore)]
        public MarketingNotifications MarketingNotifications { get; set; }

        [JsonProperty("metro", NullValueHandling = NullValueHandling.Ignore)]
        public Metro Metro { get; set; }

        [JsonProperty("min_booking_time")]
        public double? MinBookingTime { get; set; }

        /// <summary>
        /// Список телефонов бизнеса
        /// </summary>
        [JsonProperty("mobile", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> Mobile { get; set; }

        /// <summary>
        /// Название бизнеса
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("networkID")]
        public double? NetworkId { get; set; }

        [JsonProperty("newboEnabledFor", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> NewboEnabledFor { get; set; }

        [JsonProperty("paymentMethods", NullValueHandling = NullValueHandling.Ignore)]
        public PaymentMethods? PaymentMethods { get; set; }

        /// <summary>
        /// Список телефонов бизнеса
        /// </summary>
        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> Phone { get; set; }

        [JsonProperty("phone_mask")]
        public string PhoneMask { get; set; }

        [JsonProperty("pricingType", NullValueHandling = NullValueHandling.Ignore)]
        public PricingType? PricingType { get; set; }

        [JsonProperty("revisionVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? RevisionVersion { get; set; }

        [JsonProperty("schedulerTick", NullValueHandling = NullValueHandling.Ignore)]
        public double? SchedulerTick { get; set; }

        /// <summary>
        /// Короткое название филиала
        /// </summary>
        [JsonProperty("shortName")]
        public string ShortName { get; set; }

        [JsonProperty("showAppointmentColor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAppointmentColor { get; set; }

        [JsonProperty("showAppointmentTooltip", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAppointmentTooltip { get; set; }

        /// <summary>
        /// если данный бизнес является витриной, здесь будет содержаться информация по бизнесам из
        /// витрины
        /// </summary>
        [JsonProperty("showcaseBusinessData", NullValueHandling = NullValueHandling.Ignore)]
        public List<ShowcaseBusinessDatum> ShowcaseBusinessData { get; set; }

        /// <summary>
        /// идентификаторы витрин, в которых участвует данный бизнес
        /// </summary>
        [JsonProperty("showcases", NullValueHandling = NullValueHandling.Ignore)]
        public List<ShowcaseElement> Showcases { get; set; }

        [JsonProperty("showResourceWorkStatistics", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowResourceWorkStatistics { get; set; }

        [JsonProperty("showWorkerProfession", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWorkerProfession { get; set; }

        [JsonProperty("skipBilling", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipBilling { get; set; }

        [JsonProperty("smsDuplicateFilter", NullValueHandling = NullValueHandling.Ignore)]
        public SmsDuplicateFilter SmsDuplicateFilter { get; set; }

        [JsonProperty("social_network", NullValueHandling = NullValueHandling.Ignore)]
        public List<SocialNetworkSchema> SocialNetwork { get; set; }

        [JsonProperty("timetable", NullValueHandling = NullValueHandling.Ignore)]
        public Timetable Timetable { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        [JsonProperty("verticalTranslation", NullValueHandling = NullValueHandling.Ignore)]
        public VerticalTranslation? VerticalTranslation { get; set; }

        [JsonProperty("website")]
        public string Website { get; set; }
    }

    public partial class AdditionalFieldsClass
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("requiredField")]
        public bool RequiredField { get; set; }

        [JsonProperty("shortName")]
        public string ShortName { get; set; }

        [JsonProperty("type")]
        public AdditionalFieldType Type { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class AddressClass
    {
        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("address_add", NullValueHandling = NullValueHandling.Ignore)]
        public string AddressAdd { get; set; }

        [JsonProperty("admin_area", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminArea { get; set; }

        [JsonProperty("admin_area_type", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminAreaType { get; set; }

        [JsonProperty("building", NullValueHandling = NullValueHandling.Ignore)]
        public string Building { get; set; }

        [JsonProperty("corps", NullValueHandling = NullValueHandling.Ignore)]
        public string Corps { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public string Group { get; set; }

        [JsonProperty("house_add", NullValueHandling = NullValueHandling.Ignore)]
        public string HouseAdd { get; set; }

        [JsonProperty("kilometer", NullValueHandling = NullValueHandling.Ignore)]
        public string Kilometer { get; set; }

        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [JsonProperty("locality", NullValueHandling = NullValueHandling.Ignore)]
        public string Locality { get; set; }

        [JsonProperty("locality_type", NullValueHandling = NullValueHandling.Ignore)]
        public string LocalityType { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        [JsonProperty("metroStations", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleMetroStation> MetroStations { get; set; }

        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        [JsonProperty("office", NullValueHandling = NullValueHandling.Ignore)]
        public string Office { get; set; }

        [JsonProperty("possesion", NullValueHandling = NullValueHandling.Ignore)]
        public string Possesion { get; set; }

        [JsonProperty("street", NullValueHandling = NullValueHandling.Ignore)]
        public string Street { get; set; }

        [JsonProperty("street_type", NullValueHandling = NullValueHandling.Ignore)]
        public string StreetType { get; set; }

        [JsonProperty("sub_admin_area", NullValueHandling = NullValueHandling.Ignore)]
        public string SubAdminArea { get; set; }

        [JsonProperty("sub_admin_area_type", NullValueHandling = NullValueHandling.Ignore)]
        public string SubAdminAreaType { get; set; }

        [JsonProperty("sub_locality", NullValueHandling = NullValueHandling.Ignore)]
        public string SubLocality { get; set; }

        [JsonProperty("sub_locality_type", NullValueHandling = NullValueHandling.Ignore)]
        public string SubLocalityType { get; set; }

        [JsonProperty("way", NullValueHandling = NullValueHandling.Ignore)]
        public string Way { get; set; }

        [JsonProperty("zip_code", NullValueHandling = NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    }

    public partial class PurpleMetroStation
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class BusinessShowcaseAlias
    {
        [JsonProperty("internalID", NullValueHandling = NullValueHandling.Ignore)]
        public string InternalId { get; set; }
    }

    public partial class PhoneClass
    {
        [JsonProperty("area_code")]
        public string AreaCode { get; set; }

        [JsonProperty("country_code")]
        public string CountryCode { get; set; }

        [JsonProperty("number")]
        public string Number { get; set; }
    }

    public partial class MarketingNotifications
    {
        [JsonProperty("accepted")]
        public bool Accepted { get; set; }

        [JsonProperty("active")]
        public bool Active { get; set; }

        [JsonProperty("useSmsAlphaName")]
        public bool UseSmsAlphaName { get; set; }
    }

    public partial class Metro
    {
        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public string Color { get; set; }

        [JsonProperty("distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? Distance { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class ShowcaseBusinessDatum
    {
        /// <summary>
        /// Адреса компании или филиала
        /// </summary>
        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public List<AddressElement> Address { get; set; }

        /// <summary>
        /// Список e-mail адресов компании или филиала
        /// </summary>
        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("internalID", NullValueHandling = NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageList? Language { get; set; }

        /// <summary>
        /// Название бизнеса
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Список телефонов бизнеса
        /// </summary>
        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> Phone { get; set; }

        /// <summary>
        /// Список видов приема филиала
        /// </summary>
        [JsonProperty("receptionTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ReceptionTypes { get; set; }

        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    }

    public partial class ShowcaseElement
    {
        [JsonProperty("baseBusinessID", NullValueHandling = NullValueHandling.Ignore)]
        public string BaseBusinessId { get; set; }
    }

    public partial class SmsDuplicateFilter
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }
    }

    public partial class SocialNetworkSchema
    {
        [JsonProperty("handle")]
        public string Handle { get; set; }

        /// <summary>
        /// network id
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("social_network")]
        public SocialNetwork SocialNetwork { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    /// <summary>
    /// таблица регулярного недельного расписания
    /// </summary>
    public partial class Timetable
    {
        /// <summary>
        /// установлено ли расписание для сущности
        /// </summary>
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("week", NullValueHandling = NullValueHandling.Ignore)]
        public Week Week { get; set; }
    }

    public partial class Week
    {
        [JsonProperty("fri")]
        public List<TimeFrame> Fri { get; set; }

        [JsonProperty("mon")]
        public List<TimeFrame> Mon { get; set; }

        [JsonProperty("sat")]
        public List<TimeFrame> Sat { get; set; }

        [JsonProperty("sun")]
        public List<TimeFrame> Sun { get; set; }

        [JsonProperty("thu")]
        public List<TimeFrame> Thu { get; set; }

        [JsonProperty("tue")]
        public List<TimeFrame> Tue { get; set; }

        [JsonProperty("wed")]
        public List<TimeFrame> Wed { get; set; }
    }

    public partial class TimeFrame
    {
        [JsonProperty("capacity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Capacity { get; set; }

        /// <summary>
        /// смещение в минутах от начала дня
        /// </summary>
        [JsonProperty("end")]
        public double End { get; set; }

        [JsonProperty("endDate", NullValueHandling = NullValueHandling.Ignore)]
        public TimeFrameDate? EndDate { get; set; }

        [JsonProperty("extraId", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraId { get; set; }

        /// <summary>
        /// уникальный идентификатор временного слота
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("resources", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Resources { get; set; }

        [JsonProperty("roomID", NullValueHandling = NullValueHandling.Ignore)]
        public string RoomId { get; set; }

        /// <summary>
        /// смещение в минутах от начала дня
        /// </summary>
        [JsonProperty("start")]
        public double Start { get; set; }

        [JsonProperty("startDate", NullValueHandling = NullValueHandling.Ignore)]
        public TimeFrameDate? StartDate { get; set; }
    }

    public partial class PurpleMiniWidgetConfiguration
    {
        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public List<FieldElement> Fields { get; set; }

        [JsonProperty("title1", NullValueHandling = NullValueHandling.Ignore)]
        public string Title1 { get; set; }

        [JsonProperty("title2", NullValueHandling = NullValueHandling.Ignore)]
        public string Title2 { get; set; }
    }

    public partial class ResourceClass
    {
        /// <summary>
        /// информация из внешней информационной системы как есть (при интеграции)
        /// </summary>
        [JsonProperty("additionalExtraId", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AdditionalExtraId { get; set; }

        /// <summary>
        /// Количество записей, которые может принимать работник единовременно
        /// </summary>
        [JsonProperty("capacity")]
        public double Capacity { get; set; }

        /// <summary>
        /// цвет колонки с работником
        /// </summary>
        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public string Color { get; set; }

        [JsonProperty("degree", NullValueHandling = NullValueHandling.Ignore)]
        public string Degree { get; set; }

        /// <summary>
        /// идентификатор отделения, к которому привязан работник
        /// </summary>
        [JsonProperty("departmentId", NullValueHandling = NullValueHandling.Ignore)]
        public string DepartmentId { get; set; }

        /// <summary>
        /// краткое описание работника
        /// </summary>
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("displayInSchedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisplayInSchedule { get; set; }

        /// <summary>
        /// отображать ли данного работника на виджете или любом другом клиенте
        /// </summary>
        [JsonProperty("displayInWidget")]
        public bool DisplayInWidget { get; set; }

        /// <summary>
        /// e-mail работника
        /// </summary>
        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// включена ли отправка e-mail уведомлений для данного работника
        /// </summary>
        [JsonProperty("emailEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EmailEnabled { get; set; }

        [JsonProperty("evenOddTimetable")]
        public EvenOddTimetable EvenOddTimetable { get; set; }

        [JsonProperty("exceptions", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Exceptions { get; set; }

        [JsonProperty("experience", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Experience { get; set; }

        /// <summary>
        /// информация из внешней информационной системы как есть (при интеграции)
        /// </summary>
        [JsonProperty("extraDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraDescription { get; set; }

        /// <summary>
        /// информация из внешней информационной системы как есть (при интеграции)
        /// </summary>
        [JsonProperty("extraId", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraId { get; set; }

        /// <summary>
        /// информация из внешней информационной системы как есть (при интеграции)
        /// </summary>
        [JsonProperty("extraLink", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraLink { get; set; }

        /// <summary>
        /// информация из внешней информационной системы как есть (при интеграции)
        /// </summary>
        [JsonProperty("extraMediaId", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraMediaId { get; set; }

        /// <summary>
        /// url изображения работника; Если указан относительный путь, то используйте
        /// http://cdn.gbooking.ru (см. так же Business WidgetConfiguration.useDefaultWorkerImg и
        /// WidgetConfiguration.defaultWorkerImgUrl)
        /// </summary>
        [JsonProperty("icon_url")]
        public string IconUrl { get; set; }

        /// <summary>
        /// внутренний идентификатор работника; уникальный во всей системе GBooking
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public string Image { get; set; }

        [JsonProperty("lastSU", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastSu { get; set; }

        /// <summary>
        /// уровень скорости выполнения услуги по-умолчанию (если не найдено в taxonomyLevels)
        /// </summary>
        [JsonProperty("level")]
        public double Level { get; set; }

        /// <summary>
        /// не используется
        /// </summary>
        [JsonProperty("loaned")]
        public bool Loaned { get; set; }

        /// <summary>
        /// не используется
        /// </summary>
        [JsonProperty("loanedFrom", NullValueHandling = NullValueHandling.Ignore)]
        public string LoanedFrom { get; set; }

        /// <summary>
        /// не используется
        /// </summary>
        [JsonProperty("loanedTo", NullValueHandling = NullValueHandling.Ignore)]
        public string LoanedTo { get; set; }

        [JsonProperty("location")]
        public ResourceLocation Location { get; set; }

        [JsonProperty("manualChanges")]
        public bool ManualChanges { get; set; }

        /// <summary>
        /// отчество работника
        /// </summary>
        [JsonProperty("middleName", NullValueHandling = NullValueHandling.Ignore)]
        public string MiddleName { get; set; }

        /// <summary>
        /// имя работника
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// внутреннее название работника в Бекофис
        /// </summary>
        [JsonProperty("nickname", NullValueHandling = NullValueHandling.Ignore)]
        public string Nickname { get; set; }

        /// <summary>
        /// индекс сортировки работника
        /// </summary>
        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public double? Order { get; set; }

        /// <summary>
        /// вес работника, в зависимости от указанного способа сортировки
        /// </summary>
        [JsonProperty("orderWeight")]
        public OrderWeight? OrderWeight { get; set; }

        /// <summary>
        /// (только в витрине) объект с данными бизнеса-филиала
        /// </summary>
        [JsonProperty("origin_general_info", NullValueHandling = NullValueHandling.Ignore)]
        public Info OriginGeneralInfo { get; set; }

        /// <summary>
        /// (только в витрине) идентификатор бизнеса-филиала, откуда был взят работник
        /// </summary>
        [JsonProperty("originBusinessID", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginBusinessId { get; set; }

        /// <summary>
        /// (только в витрине) список идентификаторов услуг на бизнесе-филиале, которые выполняет
        /// работник
        /// </summary>
        [JsonProperty("originTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> OriginTaxonomies { get; set; }

        /// <summary>
        /// особый навык
        /// </summary>
        [JsonProperty("perk", NullValueHandling = NullValueHandling.Ignore)]
        public string Perk { get; set; }

        [JsonProperty("phone")]
        public Phone Phone { get; set; }

        /// <summary>
        /// информация о профессии работника, используется в Бекофис
        /// </summary>
        [JsonProperty("profession", NullValueHandling = NullValueHandling.Ignore)]
        public string Profession { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public ИнформацияОПрофилеРаботника Profile { get; set; }

        /// <summary>
        /// Рейтинг работника
        /// </summary>
        [JsonProperty("rating", NullValueHandling = NullValueHandling.Ignore)]
        public double? Rating { get; set; }

        [JsonProperty("readonlyTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ReadonlyTaxonomies { get; set; }

        /// <summary>
        /// Версия изменений документа
        /// </summary>
        [JsonProperty("revisionVersion")]
        public double RevisionVersion { get; set; }

        [JsonProperty("scheduleIsEmpty", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ScheduleIsEmpty { get; set; }

        /// <summary>
        /// информация из внешней информационной системы как есть (при интеграции)
        /// </summary>
        [JsonProperty("siteId", NullValueHandling = NullValueHandling.Ignore)]
        public string SiteId { get; set; }

        /// <summary>
        /// включена ли отправка смс уведомлений для данного работника
        /// </summary>
        [JsonProperty("smsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SmsEnabled { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceStatus? Status { get; set; }

        /// <summary>
        /// фамилия и отчество работника
        /// </summary>
        [JsonProperty("surname")]
        public string Surname { get; set; }

        /// <summary>
        /// массив идентификаторов услуг, которые выполняет работник
        /// </summary>
        [JsonProperty("taxonomies")]
        public List<string> Taxonomies { get; set; }

        /// <summary>
        /// массив свойств выполнения услуги как детской, как взрослой или как общей (если указаны
        /// оба или не указаны вовсе для услуги)
        /// </summary>
        [JsonProperty("taxonomyChildren")]
        public List<ResourceTaxonomyChildren> TaxonomyChildren { get; set; }

        /// <summary>
        /// массив уровня скорости выполнения услуги (см так же Resource level)
        /// </summary>
        [JsonProperty("taxonomyLevels")]
        public List<ResourceTaxonomyLevel> TaxonomyLevels { get; set; }

        [JsonProperty("timetable")]
        public Timetable Timetable { get; set; }

        [JsonProperty("userData", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> UserData { get; set; }

        /// <summary>
        /// рабочее место, которое занимает работник
        /// </summary>
        [JsonProperty("workPlace", NullValueHandling = NullValueHandling.Ignore)]
        public string WorkPlace { get; set; }
    }

    public partial class EvenOddTimetable
    {
        /// <summary>
        /// расписание для чётных дней
        /// </summary>
        [JsonProperty("even")]
        public List<TimeFrame> Even { get; set; }

        /// <summary>
        /// расписание для нечётных дней
        /// </summary>
        [JsonProperty("odd")]
        public List<TimeFrame> Odd { get; set; }

        /// <summary>
        /// month - по дням месяца (1-е число каждого месяца - нечётно), week - по дням недели
        /// (понедельник считается нечётным)
        /// </summary>
        [JsonProperty("startPeriod")]
        public StartPeriod StartPeriod { get; set; }
    }

    public partial class ResourceLocation
    {
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        /// <summary>
        /// время последнего обновления координат
        /// </summary>
        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }
    }

    /// <summary>
    /// (только в витрине) объект с данными бизнеса-филиала
    ///
    /// Содержит детальную информацию о бизнесе — название, адрес, график работы и другое
    /// </summary>
    public partial class Info
    {
        [JsonProperty("accepted_currency", NullValueHandling = NullValueHandling.Ignore)]
        public List<CurrencyList> AcceptedCurrency { get; set; }

        [JsonProperty("additional_info")]
        public string AdditionalInfo { get; set; }

        [JsonProperty("additionalFields", NullValueHandling = NullValueHandling.Ignore)]
        public List<AdditionalFields> AdditionalFields { get; set; }

        /// <summary>
        /// Адреса компании или филиала
        /// </summary>
        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public List<AddressElement> Address { get; set; }

        [JsonProperty("align_min_booking_time")]
        public bool? AlignMinBookingTime { get; set; }

        [JsonProperty("autoAcceptAppointment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AutoAcceptAppointment { get; set; }

        /// <summary>
        /// если данный бизнес является витриной, идентификаторы бизнесов, которые входят в витрину
        /// </summary>
        [JsonProperty("businessShowcaseAliases", NullValueHandling = NullValueHandling.Ignore)]
        public List<BusinessShowcaseAlias> BusinessShowcaseAliases { get; set; }

        [JsonProperty("contactName")]
        public string ContactName { get; set; }

        [JsonProperty("date_joined", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateJoined { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Список e-mail адресов компании или филиала
        /// </summary>
        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("fax", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> Fax { get; set; }

        [JsonProperty("images", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Images { get; set; }

        [JsonProperty("instant_messaging", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> InstantMessaging { get; set; }

        /// <summary>
        /// является ли данный бизнес витриной
        /// </summary>
        [JsonProperty("isShowcase", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsShowcase { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageList? Language { get; set; }

        [JsonProperty("logo_url")]
        public string LogoUrl { get; set; }

        [JsonProperty("marketingNotifications", NullValueHandling = NullValueHandling.Ignore)]
        public MarketingNotifications MarketingNotifications { get; set; }

        [JsonProperty("metro", NullValueHandling = NullValueHandling.Ignore)]
        public Metro Metro { get; set; }

        [JsonProperty("min_booking_time")]
        public double? MinBookingTime { get; set; }

        /// <summary>
        /// Список телефонов бизнеса
        /// </summary>
        [JsonProperty("mobile", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> Mobile { get; set; }

        /// <summary>
        /// Название бизнеса
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("networkID")]
        public double? NetworkId { get; set; }

        [JsonProperty("newboEnabledFor", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> NewboEnabledFor { get; set; }

        [JsonProperty("paymentMethods", NullValueHandling = NullValueHandling.Ignore)]
        public PaymentMethods? PaymentMethods { get; set; }

        /// <summary>
        /// Список телефонов бизнеса
        /// </summary>
        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> Phone { get; set; }

        [JsonProperty("phone_mask")]
        public string PhoneMask { get; set; }

        [JsonProperty("pricingType", NullValueHandling = NullValueHandling.Ignore)]
        public PricingType? PricingType { get; set; }

        [JsonProperty("revisionVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? RevisionVersion { get; set; }

        [JsonProperty("schedulerTick", NullValueHandling = NullValueHandling.Ignore)]
        public double? SchedulerTick { get; set; }

        /// <summary>
        /// Короткое название филиала
        /// </summary>
        [JsonProperty("shortName")]
        public string ShortName { get; set; }

        [JsonProperty("showAppointmentColor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAppointmentColor { get; set; }

        [JsonProperty("showAppointmentTooltip", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAppointmentTooltip { get; set; }

        /// <summary>
        /// если данный бизнес является витриной, здесь будет содержаться информация по бизнесам из
        /// витрины
        /// </summary>
        [JsonProperty("showcaseBusinessData", NullValueHandling = NullValueHandling.Ignore)]
        public List<ShowcaseBusinessDatum> ShowcaseBusinessData { get; set; }

        /// <summary>
        /// идентификаторы витрин, в которых участвует данный бизнес
        /// </summary>
        [JsonProperty("showcases", NullValueHandling = NullValueHandling.Ignore)]
        public List<ShowcaseElement> Showcases { get; set; }

        [JsonProperty("showResourceWorkStatistics", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowResourceWorkStatistics { get; set; }

        [JsonProperty("showWorkerProfession", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWorkerProfession { get; set; }

        [JsonProperty("skipBilling", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipBilling { get; set; }

        [JsonProperty("smsDuplicateFilter", NullValueHandling = NullValueHandling.Ignore)]
        public SmsDuplicateFilter SmsDuplicateFilter { get; set; }

        [JsonProperty("social_network", NullValueHandling = NullValueHandling.Ignore)]
        public List<SocialNetworkSchema> SocialNetwork { get; set; }

        [JsonProperty("timetable", NullValueHandling = NullValueHandling.Ignore)]
        public Timetable Timetable { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        [JsonProperty("verticalTranslation", NullValueHandling = NullValueHandling.Ignore)]
        public VerticalTranslation? VerticalTranslation { get; set; }

        [JsonProperty("website")]
        public string Website { get; set; }
    }

    /// <summary>
    /// Доступ имеют только пользователи с правами resource или admin
    /// </summary>
    public partial class ИнформацияОПрофилеРаботника
    {
        /// <summary>
        /// тип доступа работника в систему через его учётную запись
        /// </summary>
        [JsonProperty("accessType")]
        public AccessType AccessType { get; set; }

        /// <summary>
        /// e-mail профиля работника
        /// </summary>
        [JsonProperty("email")]
        public string Email { get; set; }

        /// <summary>
        /// идентификатор профиля работника уникальный во всей системе
        /// </summary>
        [JsonProperty("profileID")]
        public string ProfileId { get; set; }

        /// <summary>
        /// идентификатор работника
        /// </summary>
        [JsonProperty("userID")]
        public string UserId { get; set; }
    }

    public partial class ResourceTaxonomyChildren
    {
        /// <summary>
        /// true - детская услуга; false - взрослая услуга
        /// </summary>
        [JsonProperty("children")]
        public bool Children { get; set; }

        /// <summary>
        /// идентификатор услуги, для которой установлено свойство
        /// </summary>
        [JsonProperty("taxonomyID")]
        public string TaxonomyId { get; set; }
    }

    public partial class ResourceTaxonomyLevel
    {
        /// <summary>
        /// идентификатор услуги, для которой установлено уровень скорости
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// уровень скорости
        /// </summary>
        [JsonProperty("level")]
        public double Level { get; set; }
    }

    public partial class PurpleBusinessTaxonomy
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("additionalDurations", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleAdditionalDuration> AdditionalDurations { get; set; }

        [JsonProperty("additionalPrices", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleBusinessTaxonomyPrice> AdditionalPrices { get; set; }

        [JsonProperty("additionalProducts", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleBusinessTaxonomyProduct> AdditionalProducts { get; set; }

        [JsonProperty("additionalTaxonomyExtraId", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> AdditionalTaxonomyExtraId { get; set; }

        [JsonProperty("adjacentSameTimeStart", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdjacentSameTimeStart { get; set; }

        [JsonProperty("adjacentTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleAdjacentTaxonomy> AdjacentTaxonomies { get; set; }

        [JsonProperty("alias", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> Alias { get; set; }

        [JsonProperty("allowBookingInBO", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowBookingInBo { get; set; }

        [JsonProperty("allowNextBookingCount", NullValueHandling = NullValueHandling.Ignore)]
        public double? AllowNextBookingCount { get; set; }

        [JsonProperty("allowNextBookingInDays", NullValueHandling = NullValueHandling.Ignore)]
        public double? AllowNextBookingInDays { get; set; }

        [JsonProperty("allowNextBookingInDaysText", NullValueHandling = NullValueHandling.Ignore)]
        public string AllowNextBookingInDaysText { get; set; }

        [JsonProperty("cabinets", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Cabinets { get; set; }

        [JsonProperty("cabinetsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CabinetsEnabled { get; set; }

        [JsonProperty("capacity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Capacity { get; set; }

        [JsonProperty("capacity_decrease", NullValueHandling = NullValueHandling.Ignore)]
        public double? CapacityDecrease { get; set; }

        [JsonProperty("chargeUnitsStep", NullValueHandling = NullValueHandling.Ignore)]
        public double? ChargeUnitsStep { get; set; }

        [JsonProperty("childrenTaxonomyTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<ChildrenTaxonomyType> ChildrenTaxonomyTypes { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public string Color { get; set; }

        [JsonProperty("confirmationAlert", NullValueHandling = NullValueHandling.Ignore)]
        public string ConfirmationAlert { get; set; }

        [JsonProperty("confirmationSmsAlert", NullValueHandling = NullValueHandling.Ignore)]
        public string ConfirmationSmsAlert { get; set; }

        [JsonProperty("dateLimits", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleDateLimit> DateLimits { get; set; }

        [JsonProperty("dateLimitType", NullValueHandling = NullValueHandling.Ignore)]
        public DateLimitType? DateLimitType { get; set; }

        [JsonProperty("designs", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Designs { get; set; }

        [JsonProperty("discounts")]
        public Discount? Discounts { get; set; }

        [JsonProperty("displayInWidget", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisplayInWidget { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        [JsonProperty("exceptions", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Exceptions { get; set; }

        [JsonProperty("extraDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraDescription { get; set; }

        [JsonProperty("extraId", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraId { get; set; }

        [JsonProperty("extraLink", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraLink { get; set; }

        [JsonProperty("forPay", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ForPay { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("images", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Images { get; set; }

        [JsonProperty("isOther", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsOther { get; set; }

        [JsonProperty("lastModified", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModified { get; set; }

        [JsonProperty("leaves", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Leaves { get; set; }

        [JsonProperty("manualChanges", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ManualChanges { get; set; }

        [JsonProperty("newTaxonomy", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NewTaxonomy { get; set; }

        [JsonProperty("onlineMode", NullValueHandling = NullValueHandling.Ignore)]
        public OnlineMode? OnlineMode { get; set; }

        [JsonProperty("onlyAfterTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> OnlyAfterTaxonomies { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public double? Order { get; set; }

        [JsonProperty("parallelTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ParallelTaxonomies { get; set; }

        [JsonProperty("popularity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Popularity { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public PurplePrice Price { get; set; }

        [JsonProperty("priceLink", NullValueHandling = NullValueHandling.Ignore)]
        public string PriceLink { get; set; }

        /// <summary>
        /// Список видов приема услуги
        /// </summary>
        [JsonProperty("receptionTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ReceptionTypes { get; set; }

        [JsonProperty("rooms", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Rooms { get; set; }

        [JsonProperty("showcaseItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleShowcaseItem> ShowcaseItems { get; set; }

        [JsonProperty("showcases", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleTaxonomyShowcase> Showcases { get; set; }

        /// <summary>
        /// Идентификатор услуги в витрине
        /// </summary>
        [JsonProperty("showcaseTaxonomyID", NullValueHandling = NullValueHandling.Ignore)]
        public string ShowcaseTaxonomyId { get; set; }

        /// <summary>
        /// Внешний идентификатор таксономии
        /// </summary>
        [JsonProperty("siteId", NullValueHandling = NullValueHandling.Ignore)]
        public string SiteId { get; set; }

        [JsonProperty("specialCabinet", NullValueHandling = NullValueHandling.Ignore)]
        public string SpecialCabinet { get; set; }

        [JsonProperty("taxonomyAppExtraID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyAppExtraId { get; set; }

        [JsonProperty("taxonomyCategoryExtraID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyCategoryExtraId { get; set; }

        [JsonProperty("taxonomyParentID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyParentId { get; set; }

        [JsonProperty("taxonomyType", NullValueHandling = NullValueHandling.Ignore)]
        public TaxonomyType? TaxonomyType { get; set; }

        [JsonProperty("timetable", NullValueHandling = NullValueHandling.Ignore)]
        public Timetable Timetable { get; set; }

        [JsonProperty("useConfirmationSmsAlert", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseConfirmationSmsAlert { get; set; }

        [JsonProperty("visitType", NullValueHandling = NullValueHandling.Ignore)]
        public string VisitType { get; set; }
    }

    public partial class PurpleAdditionalDuration
    {
        [JsonProperty("duration")]
        public double? Duration { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public double? Level { get; set; }
    }

    public partial class PurpleBusinessTaxonomyPrice
    {
        /// <summary>
        /// Значение цены
        /// </summary>
        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public string Amount { get; set; }

        /// <summary>
        /// Аббревиатура валюты
        /// </summary>
        [JsonProperty("currency")]
        public CurrencyList Currency { get; set; }

        /// <summary>
        /// "Уровень" цены. Работнику можно выставить его "уровень" (поле level в resources)
        /// </summary>
        [JsonProperty("resourceLevel")]
        public double ResourceLevel { get; set; }

        /// <summary>
        /// Значение цены, с учётом промо акций
        /// </summary>
        [JsonProperty("stockAmount")]
        public string StockAmount { get; set; }

        /// <summary>
        /// Тип цены
        /// </summary>
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalPriceType? Type { get; set; }
    }

    public partial class PurpleBusinessTaxonomyProduct
    {
        /// <summary>
        /// Дополнительный ID товара
        /// </summary>
        [JsonProperty("extraID")]
        public string ExtraId { get; set; }

        /// <summary>
        /// ID товара
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// Является ли обязательным при выполнении данной услуги
        /// </summary>
        [JsonProperty("required")]
        public bool BusinessTaxonomyProductRequired { get; set; }
    }

    public partial class PurpleAdjacentTaxonomy
    {
        [JsonProperty("isAnyAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsAnyAvailable { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public double? Order { get; set; }

        [JsonProperty("slotDuration", NullValueHandling = NullValueHandling.Ignore)]
        public double? SlotDuration { get; set; }

        [JsonProperty("taxonomyID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyId { get; set; }
    }

    public partial class PurpleDateLimit
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("dateLimitFrom", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateLimitFrom { get; set; }

        [JsonProperty("dateLimitTo", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateLimitTo { get; set; }
    }

    public partial class DiscountClass
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("daysOfWeek", NullValueHandling = NullValueHandling.Ignore)]
        public DaysOfWeek? DaysOfWeek { get; set; }

        [JsonProperty("repeats", NullValueHandling = NullValueHandling.Ignore)]
        public Repeats? Repeats { get; set; }

        [JsonProperty("slots", NullValueHandling = NullValueHandling.Ignore)]
        public Slots Slots { get; set; }

        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Start { get; set; }

        [JsonProperty("unlimWeeklyRepeat", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UnlimWeeklyRepeat { get; set; }

        [JsonProperty("weeklyRepeat", NullValueHandling = NullValueHandling.Ignore)]
        public double? WeeklyRepeat { get; set; }
    }

    public partial class Slots
    {
        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public TimeFrame Time { get; set; }
    }

    public partial class PurplePrice
    {
        /// <summary>
        /// Значение цены
        /// </summary>
        [JsonProperty("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Аббревиатура валюты (например, RUB - рубль)
        /// </summary>
        [JsonProperty("currency")]
        public CurrencyList Currency { get; set; }

        /// <summary>
        /// Значение цены, с учётом промо акций
        /// </summary>
        [JsonProperty("stockAmount")]
        public string StockAmount { get; set; }

        /// <summary>
        /// Тип цены
        /// </summary>
        [JsonProperty("type")]
        public AdditionalPriceType Type { get; set; }
    }

    public partial class PurpleShowcaseItem
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("additionalDurations", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyAdditionalDuration> AdditionalDurations { get; set; }

        [JsonProperty("businessID", NullValueHandling = NullValueHandling.Ignore)]
        public string BusinessId { get; set; }

        /// <summary>
        /// Список видов приема услуги
        /// </summary>
        [JsonProperty("receptionTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ReceptionTypes { get; set; }

        [JsonProperty("taxonomyID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyId { get; set; }
    }

    public partial class FluffyAdditionalDuration
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// поддержка различной длительности услуг в зависимости от работника
        /// </summary>
        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public double? Level { get; set; }
    }

    public partial class PurpleTaxonomyShowcase
    {
        [JsonProperty("baseBusinessID", NullValueHandling = NullValueHandling.Ignore)]
        public string BaseBusinessId { get; set; }

        [JsonProperty("isBaseNode", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsBaseNode { get; set; }

        [JsonProperty("originBusinessID", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginBusinessId { get; set; }

        [JsonProperty("showcaseItemID", NullValueHandling = NullValueHandling.Ignore)]
        public string ShowcaseItemId { get; set; }
    }

    public partial class PurpleTaxonomiesComplex
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("taxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Taxonomies { get; set; }
    }

    public partial class PurpleTopServices
    {
        [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Services { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class PurpleWidgetConfiguration
    {
        [JsonProperty("additionalName", NullValueHandling = NullValueHandling.Ignore)]
        public string AdditionalName { get; set; }

        [JsonProperty("alignmentTaxonomySlots", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AlignmentTaxonomySlots { get; set; }

        [JsonProperty("allowAutoSelect", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowAutoSelect { get; set; }

        [JsonProperty("allowBookVisitor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowBookVisitor { get; set; }

        [JsonProperty("allowSkipTimeCheck", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowSkipTimeCheck { get; set; }

        [JsonProperty("appointment_confirmation_text", NullValueHandling = NullValueHandling.Ignore)]
        public string AppointmentConfirmationText { get; set; }

        [JsonProperty("appointment_confirmation_title", NullValueHandling = NullValueHandling.Ignore)]
        public string AppointmentConfirmationTitle { get; set; }

        [JsonProperty("askClientBirthday", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AskClientBirthday { get; set; }

        [JsonProperty("askClientGender", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AskClientGender { get; set; }

        [JsonProperty("bookableDateRanges", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleBookableDateRanges BookableDateRanges { get; set; }

        [JsonProperty("bookableMonthsCount", NullValueHandling = NullValueHandling.Ignore)]
        public double? BookableMonthsCount { get; set; }

        [JsonProperty("calendarMode", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CalendarMode { get; set; }

        [JsonProperty("calendarModeHideTime", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CalendarModeHideTime { get; set; }

        [JsonProperty("clientBlockingSettings", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleClientBlockingSettings ClientBlockingSettings { get; set; }

        [JsonProperty("clientCommentTitle", NullValueHandling = NullValueHandling.Ignore)]
        public string ClientCommentTitle { get; set; }

        [JsonProperty("cracServer", NullValueHandling = NullValueHandling.Ignore)]
        public CracServer? CracServer { get; set; }

        [JsonProperty("cracSlotSize", NullValueHandling = NullValueHandling.Ignore)]
        public double? CracSlotSize { get; set; }

        [JsonProperty("crunchv2", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Crunchv2 { get; set; }

        [JsonProperty("dayOffLabel", NullValueHandling = NullValueHandling.Ignore)]
        public string DayOffLabel { get; set; }

        [JsonProperty("daysForward", NullValueHandling = NullValueHandling.Ignore)]
        public double? DaysForward { get; set; }

        [JsonProperty("dayUnavailableLabel", NullValueHandling = NullValueHandling.Ignore)]
        public string DayUnavailableLabel { get; set; }

        [JsonProperty("defaultServiceImgUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultServiceImgUrl { get; set; }

        [JsonProperty("defaultWorkerImgUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultWorkerImgUrl { get; set; }

        [JsonProperty("denySameTimeRecords", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DenySameTimeRecords { get; set; }

        [JsonProperty("disabledTaxonomiesText", NullValueHandling = NullValueHandling.Ignore)]
        public string DisabledTaxonomiesText { get; set; }

        [JsonProperty("disableMobileWidget", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisableMobileWidget { get; set; }

        [JsonProperty("disableWidget", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisableWidget { get; set; }

        [JsonProperty("disableWidgetMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string DisableWidgetMessage { get; set; }

        [JsonProperty("discountedPriceRounding", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleDiscountedPriceRounding DiscountedPriceRounding { get; set; }

        [JsonProperty("displaySlotSize", NullValueHandling = NullValueHandling.Ignore)]
        public double? DisplaySlotSize { get; set; }

        [JsonProperty("dontRequireEmail", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DontRequireEmail { get; set; }

        [JsonProperty("emailIsMandatory", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EmailIsMandatory { get; set; }

        [JsonProperty("enableOverrideFooter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableOverrideFooter { get; set; }

        [JsonProperty("enableWarningContactData", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableWarningContactData { get; set; }

        [JsonProperty("extraVisitors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ExtraVisitors { get; set; }

        [JsonProperty("filterNonInsuranceSchedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FilterNonInsuranceSchedule { get; set; }

        [JsonProperty("hideAnyWorkerBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideAnyWorkerBooking { get; set; }

        [JsonProperty("hideCallButton", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideCallButton { get; set; }

        [JsonProperty("hideEmptyDays", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideEmptyDays { get; set; }

        [JsonProperty("hideGBookingLogo", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideGBookingLogo { get; set; }

        [JsonProperty("hideGraySlots", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideGraySlots { get; set; }

        [JsonProperty("hideNewAppointmentButton", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideNewAppointmentButton { get; set; }

        [JsonProperty("hidePrices", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HidePrices { get; set; }

        [JsonProperty("hideSocialNetworksAuthentication", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideSocialNetworksAuthentication { get; set; }

        [JsonProperty("insuranceClientSupportPhone", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> InsuranceClientSupportPhone { get; set; }

        [JsonProperty("maxServiceBooking", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxServiceBooking { get; set; }

        [JsonProperty("maxTimeslotBooking", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTimeslotBooking { get; set; }

        [JsonProperty("middleNameSupport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MiddleNameSupport { get; set; }

        [JsonProperty("mostFreeEnable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MostFreeEnable { get; set; }

        [JsonProperty("multiServiceBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MultiServiceBooking { get; set; }

        [JsonProperty("multiTimeslotBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MultiTimeslotBooking { get; set; }

        [JsonProperty("multiTimeslotBookingAllDays", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MultiTimeslotBookingAllDays { get; set; }

        [JsonProperty("newWidgetTheme", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> NewWidgetTheme { get; set; }

        [JsonProperty("noDefaultImages", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NoDefaultImages { get; set; }

        [JsonProperty("overrideFooter", NullValueHandling = NullValueHandling.Ignore)]
        public string OverrideFooter { get; set; }

        [JsonProperty("payment", NullValueHandling = NullValueHandling.Ignore)]
        public Payment? Payment { get; set; }

        [JsonProperty("paymentProvider", NullValueHandling = NullValueHandling.Ignore)]
        public PurplePaymentProvider? PaymentProvider { get; set; }

        [JsonProperty("requireAgreement", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequireAgreement { get; set; }

        [JsonProperty("requireAgreementLink", NullValueHandling = NullValueHandling.Ignore)]
        public string RequireAgreementLink { get; set; }

        [JsonProperty("revisionVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? RevisionVersion { get; set; }

        [JsonProperty("shortLink", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortLink { get; set; }

        [JsonProperty("showAllWorkers", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAllWorkers { get; set; }

        [JsonProperty("showClientAddress", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientAddress { get; set; }

        [JsonProperty("showClientComment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientComment { get; set; }

        [JsonProperty("showDisabledTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDisabledTaxonomies { get; set; }

        [JsonProperty("showDrinkQuestion", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDrinkQuestion { get; set; }

        [JsonProperty("showMap", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowMap { get; set; }

        [JsonProperty("showStartText", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowStartText { get; set; }

        [JsonProperty("showSurnameFirst", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowSurnameFirst { get; set; }

        [JsonProperty("showTalkQuestion", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTalkQuestion { get; set; }

        [JsonProperty("showTaxonomyConfirmationAlert", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTaxonomyConfirmationAlert { get; set; }

        [JsonProperty("skipAuthentication", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipAuthentication { get; set; }

        [JsonProperty("skipDaysForward", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipDaysForward { get; set; }

        [JsonProperty("skipMobileMap", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipMobileMap { get; set; }

        [JsonProperty("skipServiceDurationAlignment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipServiceDurationAlignment { get; set; }

        [JsonProperty("skipServiceSelection", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipServiceSelection { get; set; }

        [JsonProperty("skipTimeSelection", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipTimeSelection { get; set; }

        [JsonProperty("skipTimeSelectionServiceIDs", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SkipTimeSelectionServiceIDs { get; set; }

        [JsonProperty("skipWorkerSelectedServiceIDs", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SkipWorkerSelectedServiceIDs { get; set; }

        [JsonProperty("skipWorkerServicesSelection", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipWorkerServicesSelection { get; set; }

        [JsonProperty("socialNetworkImage", NullValueHandling = NullValueHandling.Ignore)]
        public string SocialNetworkImage { get; set; }

        [JsonProperty("socialSharing", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleSocialSharing SocialSharing { get; set; }

        [JsonProperty("sortByMostFree", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SortByMostFree { get; set; }

        [JsonProperty("sortWorkersByWorkload", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SortWorkersByWorkload { get; set; }

        [JsonProperty("splitInsuranceClient", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SplitInsuranceClient { get; set; }

        [JsonProperty("splitName", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SplitName { get; set; }

        [JsonProperty("startTextButton", NullValueHandling = NullValueHandling.Ignore)]
        public string StartTextButton { get; set; }

        [JsonProperty("startTextMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string StartTextMessage { get; set; }

        [JsonProperty("tentativeTTL", NullValueHandling = NullValueHandling.Ignore)]
        public double? TentativeTtl { get; set; }

        [JsonProperty("theme", NullValueHandling = NullValueHandling.Ignore)]
        public string Theme { get; set; }

        [JsonProperty("useAppointmentReminder", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAppointmentReminder { get; set; }

        [JsonProperty("useBusinessScheduleForUnavailableLabel", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseBusinessScheduleForUnavailableLabel { get; set; }

        [JsonProperty("useClustersMap", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseClustersMap { get; set; }

        [JsonProperty("useCoupon", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseCoupon { get; set; }

        [JsonProperty("useCRAC", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseCrac { get; set; }

        [JsonProperty("useDefaultServiceImg", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseDefaultServiceImg { get; set; }

        [JsonProperty("useDefaultWorkerImg", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseDefaultWorkerImg { get; set; }

        [JsonProperty("useDirectScheduleRead", NullValueHandling = NullValueHandling.Ignore)]
        public UseDirectScheduleRead? UseDirectScheduleRead { get; set; }

        [JsonProperty("useInsuranceGuaranteeLetter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseInsuranceGuaranteeLetter { get; set; }

        [JsonProperty("useInsuranceSelect", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseInsuranceSelect { get; set; }

        [JsonProperty("useMedAuth", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseMedAuth { get; set; }

        [JsonProperty("useMiddleName", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseMiddleName { get; set; }

        [JsonProperty("useNewReserveAPI", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseNewReserveApi { get; set; }

        [JsonProperty("useResourcePageLoading", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseResourcePageLoading { get; set; }

        [JsonProperty("useSortByName", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseSortByName { get; set; }

        [JsonProperty("warningContactDataText", NullValueHandling = NullValueHandling.Ignore)]
        public string WarningContactDataText { get; set; }

        [JsonProperty("widgetUseCRAC", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WidgetUseCrac { get; set; }

        [JsonProperty("withoutWorkers", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithoutWorkers { get; set; }

        [JsonProperty("worker_unavailability_text", NullValueHandling = NullValueHandling.Ignore)]
        public string WorkerUnavailabilityText { get; set; }

        [JsonProperty("workerNameReverse", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WorkerNameReverse { get; set; }
    }

    public partial class PurpleBookableDateRanges
    {
        [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [JsonProperty("end")]
        public object End { get; set; }

        [JsonProperty("start")]
        public object Start { get; set; }
    }

    public partial class PurpleClientBlockingSettings
    {
        [JsonProperty("appointmentClientBlock", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AppointmentClientBlock { get; set; }

        [JsonProperty("appointmentClientBlockDays", NullValueHandling = NullValueHandling.Ignore)]
        public double? AppointmentClientBlockDays { get; set; }

        [JsonProperty("appointmentClientBlockText", NullValueHandling = NullValueHandling.Ignore)]
        public string AppointmentClientBlockText { get; set; }

        [JsonProperty("blockIfFutureRecordExists", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BlockIfFutureRecordExists { get; set; }

        [JsonProperty("blockRepeatedRecordsCount", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockRepeatedRecordsCount { get; set; }

        [JsonProperty("blockRepeatedRecordsRange", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockRepeatedRecordsRange { get; set; }

        [JsonProperty("blockRepeatedRecordsText", NullValueHandling = NullValueHandling.Ignore)]
        public string BlockRepeatedRecordsText { get; set; }
    }

    public partial class PurpleDiscountedPriceRounding
    {
        [JsonProperty("rule", NullValueHandling = NullValueHandling.Ignore)]
        public Rule? Rule { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    public partial class PurpleSocialSharing
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("discountAmount")]
        public double? DiscountAmount { get; set; }

        [JsonProperty("discountEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DiscountEnabled { get; set; }

        [JsonProperty("discountType", NullValueHandling = NullValueHandling.Ignore)]
        public DiscountType? DiscountType { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("widgetText")]
        public string WidgetText { get; set; }
    }

    public partial class NetworkWidgetConfiguration
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("businesses")]
        public List<BusinessElement> Businesses { get; set; }

        [JsonProperty("defaultServiceID")]
        public string DefaultServiceId { get; set; }

        [JsonProperty("showBranchSelector")]
        public bool ShowBranchSelector { get; set; }

        [JsonProperty("showDefaultService")]
        public bool ShowDefaultService { get; set; }

        [JsonProperty("showOnMap")]
        public bool ShowOnMap { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }
    }

    public partial class BusinessElement
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("active")]
        public bool Active { get; set; }

        [JsonProperty("internalID")]
        public string InternalId { get; set; }
    }

    public partial class GetProfileById
    {
        [JsonProperty("request")]
        public BusinessGetProfileByIdRequest Request { get; set; }

        [JsonProperty("response")]
        public BusinessGetProfileByIdResponse Response { get; set; }
    }

    public partial class BusinessGetProfileByIdRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        ///
        /// параметры запроса business.get_profile_by_id
        /// </summary>
        [JsonProperty("params")]
        public BusinessGetProfileByIdRequestParams Params { get; set; }
    }

    /// <summary>
    /// параметры запроса business.get_profile_by_id
    /// </summary>
    public partial class BusinessGetProfileByIdRequestParams
    {
        [JsonProperty("business")]
        public IndecentBusiness Business { get; set; }

        /// <summary>
        /// если указано true - меняет формат представления discounts
        /// </summary>
        [JsonProperty("desktop_discounts", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DesktopDiscounts { get; set; }

        /// <summary>
        /// если указано true - возвращает только активных работников (status == 'INACTIVE')
        /// </summary>
        [JsonProperty("only_active_workers", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OnlyActiveWorkers { get; set; }

        /// <summary>
        /// если указано true - возвращает всех работников в том числе и неактивных (status ==
        /// 'INACTIVE')
        /// </summary>
        [JsonProperty("show_inactive_workers", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowInactiveWorkers { get; set; }

        /// <summary>
        /// идентификатор витрины (передаётся вместе с with_taxonomy_showcase)
        /// </summary>
        [JsonProperty("showcase_business_id", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeIdUnion? ShowcaseBusinessId { get; set; }

        /// <summary>
        /// если указано true - не приминяет сортировку работников
        /// </summary>
        [JsonProperty("skip_worker_sorting", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipWorkerSorting { get; set; }

        /// <summary>
        /// если указано true - возвращает историю биллинга в поле billing (недоступно для роли guest)
        /// </summary>
        [JsonProperty("with_billing", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithBilling { get; set; }

        /// <summary>
        /// если указано true - возвращает список операций, доступных в БекОфисе в поле profiles
        /// (недоступно для роли guest)
        /// </summary>
        [JsonProperty("with_bop", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithBop { get; set; }

        /// <summary>
        /// если указано true - возвращает кампании скидочных купонов в поле campaigns
        /// </summary>
        [JsonProperty("with_campaigns", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithCampaigns { get; set; }

        /// <summary>
        /// если указано true - возвращает список скидочных акций в поле discounts
        /// </summary>
        [JsonProperty("with_discounts", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithDiscounts { get; set; }

        /// <summary>
        /// дата начала расписания, для которого нужно получить скидочные акции
        /// </summary>
        [JsonProperty("with_discounts_from", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? WithDiscountsFrom { get; set; }

        /// <summary>
        /// дата окончания расписания, для которого нужно получить скидочные акции
        /// </summary>
        [JsonProperty("with_discounts_to", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? WithDiscountsTo { get; set; }

        /// <summary>
        /// если указано true - возвращает информацию о других филиалах сети в поле networks
        /// </summary>
        [JsonProperty("with_networks", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithNetworks { get; set; }

        /// <summary>
        /// если указано true - заполняет идентификаторы таксономий витрины showcaseTaxonomyID для
        /// каждой таксономии (недоступно для роли guest)
        /// </summary>
        [JsonProperty("with_taxonomy_showcase", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithTaxonomyShowcase { get; set; }

        /// <summary>
        /// тип сортировки работника
        /// </summary>
        [JsonProperty("worker_sorting_type", NullValueHandling = NullValueHandling.Ignore)]
        public WorkerSortingType? WorkerSortingType { get; set; }
    }

    public partial class IndecentBusiness
    {
        /// <summary>
        /// идентификатор бизнеса
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class BusinessGetProfileByIdResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public double? Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc", NullValueHandling = NullValueHandling.Ignore)]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// данные, передаваемые в ответ
        /// </summary>
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public BusinessGetProfileByIdResponseResult Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public BusinessGetProfileByIdResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class BusinessGetProfileByIdResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// данные, передаваемые в ответ
    /// </summary>
    public partial class BusinessGetProfileByIdResponseResult
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("business")]
        public ResultBusiness Business { get; set; }

        [JsonProperty("freeSms", NullValueHandling = NullValueHandling.Ignore)]
        public double? FreeSms { get; set; }

        [JsonProperty("monthlyFreeSms", NullValueHandling = NullValueHandling.Ignore)]
        public double? MonthlyFreeSms { get; set; }

        [JsonProperty("networks", NullValueHandling = NullValueHandling.Ignore)]
        public List<NetworkElement> Networks { get; set; }

        [JsonProperty("profiles", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> Profiles { get; set; }

        [JsonProperty("top_services", NullValueHandling = NullValueHandling.Ignore)]
        public ResultTopServices TopServices { get; set; }

        [JsonProperty("useDefaultSmsTemplate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseDefaultSmsTemplate { get; set; }

        [JsonProperty("yandexFeedType", NullValueHandling = NullValueHandling.Ignore)]
        public YandexFeedType? YandexFeedType { get; set; }
    }

    public partial class HilariousBusiness
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("additionalSettings", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyAdditionalSettings AdditionalSettings { get; set; }

        [JsonProperty("allowCategoryBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowCategoryBooking { get; set; }

        [JsonProperty("backoffice_configuration", NullValueHandling = NullValueHandling.Ignore)]
        public StickyBackofficeConfiguration BusinessBackofficeConfiguration { get; set; }

        [JsonProperty("backofficeConfiguration", NullValueHandling = NullValueHandling.Ignore)]
        public TentacledBackofficeConfiguration BackofficeConfiguration { get; set; }

        [JsonProperty("backofficeType", NullValueHandling = NullValueHandling.Ignore)]
        public BackofficeType? BackofficeType { get; set; }

        [JsonProperty("cabinets", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyCabinet> Cabinets { get; set; }

        [JsonProperty("cabinetsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CabinetsEnabled { get; set; }

        [JsonProperty("callback_widget_configuration", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyCallbackWidgetConfiguration CallbackWidgetConfiguration { get; set; }

        [JsonProperty("consumables", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyConsumable> Consumables { get; set; }

        [JsonProperty("created_on", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedOn { get; set; }

        [JsonProperty("defaultFilteredWorkers", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> DefaultFilteredWorkers { get; set; }

        [JsonProperty("departments", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyDepartment> Departments { get; set; }

        [JsonProperty("designs", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> Designs { get; set; }

        [JsonProperty("extraID", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraId { get; set; }

        [JsonProperty("flatTaxonomyDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FlatTaxonomyDisplay { get; set; }

        [JsonProperty("general_info")]
        public BusinessInfo GeneralInfo { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public Group? Group { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("integration_data", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> IntegrationData { get; set; }

        [JsonProperty("mini_widget_configuration")]
        public FluffyMiniWidgetConfiguration MiniWidgetConfiguration { get; set; }

        [JsonProperty("mobileData", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> MobileData { get; set; }

        [JsonProperty("notifications", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Notifications { get; set; }

        [JsonProperty("resources")]
        public List<Resource> Resources { get; set; }

        [JsonProperty("stateLevelHolidaysNotWorking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StateLevelHolidaysNotWorking { get; set; }

        [JsonProperty("taxonomies")]
        public List<FluffyBusinessTaxonomy> Taxonomies { get; set; }

        [JsonProperty("taxonomiesComplex", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyTaxonomiesComplex> TaxonomiesComplex { get; set; }

        [JsonProperty("taxonomy_tree_capacity", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> TaxonomyTreeCapacity { get; set; }

        [JsonProperty("top_services", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyTopServices TopServices { get; set; }

        [JsonProperty("vertical", NullValueHandling = NullValueHandling.Ignore)]
        public string Vertical { get; set; }

        [JsonProperty("widget_configuration")]
        public FluffyWidgetConfiguration WidgetConfiguration { get; set; }

        [JsonProperty("yandexFeedType", NullValueHandling = NullValueHandling.Ignore)]
        public string YandexFeedType { get; set; }
    }

    public partial class FluffyAdditionalSettings
    {
        [JsonProperty("appointmentExtensionAmount", NullValueHandling = NullValueHandling.Ignore)]
        public double? AppointmentExtensionAmount { get; set; }

        [JsonProperty("appointmentExtensionType", NullValueHandling = NullValueHandling.Ignore)]
        public AppointmentExtensionType? AppointmentExtensionType { get; set; }
    }

    public partial class TentacledBackofficeConfiguration
    {
        [JsonProperty("adjacentTaxonomiesTreshold", NullValueHandling = NullValueHandling.Ignore)]
        public double? AdjacentTaxonomiesTreshold { get; set; }

        [JsonProperty("allowHideServiceForBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowHideServiceForBooking { get; set; }

        [JsonProperty("allowHideWorkersFromSchdeule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowHideWorkersFromSchdeule { get; set; }

        [JsonProperty("allowSmsTranslit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowSmsTranslit { get; set; }

        [JsonProperty("appointmentFutureMoving", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AppointmentFutureMoving { get; set; }

        [JsonProperty("blockNotificationForAnyAvailableAdjacentService", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BlockNotificationForAnyAvailableAdjacentService { get; set; }

        [JsonProperty("cabinetsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CabinetsEnabled { get; set; }

        [JsonProperty("checkClientOverlapping", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CheckClientOverlapping { get; set; }

        [JsonProperty("customOnlinePaymentConfirmationTemplate", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomOnlinePaymentConfirmationTemplate { get; set; }

        [JsonProperty("defaultGTScheduleDayView", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DefaultGtScheduleDayView { get; set; }

        [JsonProperty("disableAppointmentClientInlineEditor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisableAppointmentClientInlineEditor { get; set; }

        [JsonProperty("editAppExtraId", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EditAppExtraId { get; set; }

        [JsonProperty("editTaxonomyChildren", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EditTaxonomyChildren { get; set; }

        [JsonProperty("editTaxonomyVisitType", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EditTaxonomyVisitType { get; set; }

        [JsonProperty("enableBlackList", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableBlackList { get; set; }

        [JsonProperty("enableCalculateShedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableCalculateShedule { get; set; }

        [JsonProperty("enableClientCard", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableClientCard { get; set; }

        [JsonProperty("enableClientLanguage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableClientLanguage { get; set; }

        [JsonProperty("enableClientMedicalCardReport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableClientMedicalCardReport { get; set; }

        [JsonProperty("enableCustomOnlinePaymentConfirmation", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableCustomOnlinePaymentConfirmation { get; set; }

        [JsonProperty("enableExtendedPhone", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableExtendedPhone { get; set; }

        [JsonProperty("enableExtendedRecordsClientStatistics", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableExtendedRecordsClientStatistics { get; set; }

        [JsonProperty("enableMasterImportance", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableMasterImportance { get; set; }

        [JsonProperty("enableServiceTimeLimit", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableServiceTimeLimit { get; set; }

        [JsonProperty("enableSourceChoice", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableSourceChoice { get; set; }

        [JsonProperty("enableTaxonomyChildrenAgeCheck", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableTaxonomyChildrenAgeCheck { get; set; }

        [JsonProperty("exportToExcelRemovedClients", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ExportToExcelRemovedClients { get; set; }

        [JsonProperty("feedbackCustomerPortalMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string FeedbackCustomerPortalMessage { get; set; }

        [JsonProperty("feedbackCustomerPortalThankYouMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string FeedbackCustomerPortalThankYouMessage { get; set; }

        [JsonProperty("feedbackCustomerPortalTitle", NullValueHandling = NullValueHandling.Ignore)]
        public string FeedbackCustomerPortalTitle { get; set; }

        [JsonProperty("feedBackMinRating", NullValueHandling = NullValueHandling.Ignore)]
        public FeedBackMinRating? FeedBackMinRating { get; set; }

        [JsonProperty("finId", NullValueHandling = NullValueHandling.Ignore)]
        public string FinId { get; set; }

        [JsonProperty("finName", NullValueHandling = NullValueHandling.Ignore)]
        public string FinName { get; set; }

        [JsonProperty("hideCustomerPortalFooter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideCustomerPortalFooter { get; set; }

        [JsonProperty("highlightedResource", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HighlightedResource { get; set; }

        [JsonProperty("manualExceptionSupport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ManualExceptionSupport { get; set; }

        [JsonProperty("noInternetAlert", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NoInternetAlert { get; set; }

        [JsonProperty("pastTimeEdit", NullValueHandling = NullValueHandling.Ignore)]
        public double? PastTimeEdit { get; set; }

        [JsonProperty("paymentProvider", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyPaymentProvider? PaymentProvider { get; set; }

        [JsonProperty("readonlyResourceSchedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReadonlyResourceSchedule { get; set; }

        [JsonProperty("resourceTimetableType", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceTimetableType? ResourceTimetableType { get; set; }

        [JsonProperty("revisionVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? RevisionVersion { get; set; }

        [JsonProperty("schduleWeekViewIsDefault", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SchduleWeekViewIsDefault { get; set; }

        [JsonProperty("scheduleDefaultWorkersLimit", NullValueHandling = NullValueHandling.Ignore)]
        public double? ScheduleDefaultWorkersLimit { get; set; }

        [JsonProperty("scheduleDefaultWorkersLimitDay")]
        public double? ScheduleDefaultWorkersLimitDay { get; set; }

        [JsonProperty("scheduleDefaultWorkersLimitWeek")]
        public double? ScheduleDefaultWorkersLimitWeek { get; set; }

        [JsonProperty("schedulerWeekViewType", NullValueHandling = NullValueHandling.Ignore)]
        public SchedulerWeekViewType? SchedulerWeekViewType { get; set; }

        [JsonProperty("scheduleWorkerHours", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ScheduleWorkerHours { get; set; }

        [JsonProperty("showAdditionalFields", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAdditionalFields { get; set; }

        [JsonProperty("showAddress", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAddress { get; set; }

        [JsonProperty("showBirthDate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowBirthDate { get; set; }

        [JsonProperty("showClientAppear", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientAppear { get; set; }

        [JsonProperty("showClientAppearOnSchedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientAppearOnSchedule { get; set; }

        [JsonProperty("showClientBirthdayFilter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientBirthdayFilter { get; set; }

        [JsonProperty("showClientContractNumber", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientContractNumber { get; set; }

        [JsonProperty("showClientImage", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientImage { get; set; }

        [JsonProperty("showClientPayment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientPayment { get; set; }

        [JsonProperty("showDefaulterBlockscreen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDefaulterBlockscreen { get; set; }

        [JsonProperty("showDeliveryStatus", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDeliveryStatus { get; set; }

        [JsonProperty("showDepartmentFilter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDepartmentFilter { get; set; }

        [JsonProperty("showDepartments", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDepartments { get; set; }

        [JsonProperty("showDepartmentsConfiguration", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDepartmentsConfiguration { get; set; }

        [JsonProperty("showEmail", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowEmail { get; set; }

        [JsonProperty("showExtraClientInfo", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowExtraClientInfo { get; set; }

        [JsonProperty("showFax", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowFax { get; set; }

        [JsonProperty("showFiredWorkerAppointmentAlert", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowFiredWorkerAppointmentAlert { get; set; }

        [JsonProperty("showFirstAvailableSlot", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowFirstAvailableSlot { get; set; }

        [JsonProperty("showGapWindow", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGapWindow { get; set; }

        [JsonProperty("showGender", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGender { get; set; }

        [JsonProperty("showGenderInRecords", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGenderInRecords { get; set; }

        [JsonProperty("showGeneratableReportsScreen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowGeneratableReportsScreen { get; set; }

        [JsonProperty("showHouseNumber", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowHouseNumber { get; set; }

        [JsonProperty("showIsraelCity", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowIsraelCity { get; set; }

        [JsonProperty("showKupatHolim", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowKupatHolim { get; set; }

        [JsonProperty("showLeadsScreen", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowLeadsScreen { get; set; }

        [JsonProperty("showManualChanges", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowManualChanges { get; set; }

        [JsonProperty("showPassportId", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowPassportId { get; set; }

        [JsonProperty("showRooms", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowRooms { get; set; }

        [JsonProperty("showSeasonTickets", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowSeasonTickets { get; set; }

        [JsonProperty("showTaxonomyChildren", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTaxonomyChildren { get; set; }

        [JsonProperty("showTaxonomyLocalization", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTaxonomyLocalization { get; set; }

        [JsonProperty("showTaxonomyVisitType", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTaxonomyVisitType { get; set; }

        [JsonProperty("showTestRecord", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTestRecord { get; set; }

        [JsonProperty("showUTM", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowUtm { get; set; }

        [JsonProperty("showWidgetColorTheme", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWidgetColorTheme { get; set; }

        [JsonProperty("showWorkerDescriptionInEvent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWorkerDescriptionInEvent { get; set; }

        [JsonProperty("showWorkerExtraId", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWorkerExtraId { get; set; }

        [JsonProperty("showWorkerStatus", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowWorkerStatus { get; set; }

        [JsonProperty("skipAppointmentPriceUpdate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipAppointmentPriceUpdate { get; set; }

        [JsonProperty("skipCancelIfClientNotAppear", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipCancelIfClientNotAppear { get; set; }

        [JsonProperty("skipServiceFiltering", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipServiceFiltering { get; set; }

        [JsonProperty("splitFullNameXlsExport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SplitFullNameXlsExport { get; set; }

        [JsonProperty("stateLevelHolidays")]
        public List<Dictionary<string, object>> StateLevelHolidays { get; set; }

        [JsonProperty("stateLevelHolidaysNotWorking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? StateLevelHolidaysNotWorking { get; set; }

        [JsonProperty("taxonomyChildrenMaxAge", NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxonomyChildrenMaxAge { get; set; }

        [JsonProperty("useAdditionalDurations", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAdditionalDurations { get; set; }

        [JsonProperty("useAdjacentTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAdjacentTaxonomies { get; set; }

        [JsonProperty("useAdjacentTaxonomiesSlotSplitting", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAdjacentTaxonomiesSlotSplitting { get; set; }

        [JsonProperty("useGtAppMethod", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseGtAppMethod { get; set; }

        [JsonProperty("workWeekEnd", NullValueHandling = NullValueHandling.Ignore)]
        public double? WorkWeekEnd { get; set; }

        [JsonProperty("workWeekStart", NullValueHandling = NullValueHandling.Ignore)]
        public double? WorkWeekStart { get; set; }
    }

    public partial class StickyBackofficeConfiguration
    {
        [JsonProperty("enableMasterImportance", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableMasterImportance { get; set; }

        [JsonProperty("resourceTimetableType", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceTimetableType? ResourceTimetableType { get; set; }
    }

    public partial class FluffyCabinet
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class FluffyCallbackWidgetConfiguration
    {
        [JsonProperty("title1", NullValueHandling = NullValueHandling.Ignore)]
        public string Title1 { get; set; }

        [JsonProperty("title2", NullValueHandling = NullValueHandling.Ignore)]
        public string Title2 { get; set; }
    }

    public partial class FluffyConsumable
    {
        [JsonProperty("extraID")]
        public string ExtraId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("quantity")]
        public double Quantity { get; set; }
    }

    public partial class FluffyDepartment
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("id_", NullValueHandling = NullValueHandling.Ignore)]
        public double? DepartmentId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class FluffyMiniWidgetConfiguration
    {
        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public List<FieldElement> Fields { get; set; }

        [JsonProperty("title1", NullValueHandling = NullValueHandling.Ignore)]
        public string Title1 { get; set; }

        [JsonProperty("title2", NullValueHandling = NullValueHandling.Ignore)]
        public string Title2 { get; set; }
    }

    public partial class FluffyBusinessTaxonomy
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("additionalDurations", NullValueHandling = NullValueHandling.Ignore)]
        public List<TentacledAdditionalDuration> AdditionalDurations { get; set; }

        [JsonProperty("additionalPrices", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyBusinessTaxonomyPrice> AdditionalPrices { get; set; }

        [JsonProperty("additionalProducts", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyBusinessTaxonomyProduct> AdditionalProducts { get; set; }

        [JsonProperty("additionalTaxonomyExtraId", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> AdditionalTaxonomyExtraId { get; set; }

        [JsonProperty("adjacentSameTimeStart", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdjacentSameTimeStart { get; set; }

        [JsonProperty("adjacentTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyAdjacentTaxonomy> AdjacentTaxonomies { get; set; }

        [JsonProperty("alias", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> Alias { get; set; }

        [JsonProperty("allowBookingInBO", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowBookingInBo { get; set; }

        [JsonProperty("allowNextBookingCount", NullValueHandling = NullValueHandling.Ignore)]
        public double? AllowNextBookingCount { get; set; }

        [JsonProperty("allowNextBookingInDays", NullValueHandling = NullValueHandling.Ignore)]
        public double? AllowNextBookingInDays { get; set; }

        [JsonProperty("allowNextBookingInDaysText", NullValueHandling = NullValueHandling.Ignore)]
        public string AllowNextBookingInDaysText { get; set; }

        [JsonProperty("cabinets", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Cabinets { get; set; }

        [JsonProperty("cabinetsEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CabinetsEnabled { get; set; }

        [JsonProperty("capacity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Capacity { get; set; }

        [JsonProperty("capacity_decrease", NullValueHandling = NullValueHandling.Ignore)]
        public double? CapacityDecrease { get; set; }

        [JsonProperty("chargeUnitsStep", NullValueHandling = NullValueHandling.Ignore)]
        public double? ChargeUnitsStep { get; set; }

        [JsonProperty("childrenTaxonomyTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<ChildrenTaxonomyType> ChildrenTaxonomyTypes { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public string Color { get; set; }

        [JsonProperty("confirmationAlert", NullValueHandling = NullValueHandling.Ignore)]
        public string ConfirmationAlert { get; set; }

        [JsonProperty("confirmationSmsAlert", NullValueHandling = NullValueHandling.Ignore)]
        public string ConfirmationSmsAlert { get; set; }

        [JsonProperty("dateLimits", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyDateLimit> DateLimits { get; set; }

        [JsonProperty("dateLimitType", NullValueHandling = NullValueHandling.Ignore)]
        public DateLimitType? DateLimitType { get; set; }

        [JsonProperty("designs", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Designs { get; set; }

        [JsonProperty("discounts")]
        public Discount? Discounts { get; set; }

        [JsonProperty("displayInWidget", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisplayInWidget { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        [JsonProperty("exceptions", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Exceptions { get; set; }

        [JsonProperty("extraDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraDescription { get; set; }

        [JsonProperty("extraId", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraId { get; set; }

        [JsonProperty("extraLink", NullValueHandling = NullValueHandling.Ignore)]
        public string ExtraLink { get; set; }

        [JsonProperty("forPay", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ForPay { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("images", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Images { get; set; }

        [JsonProperty("isOther", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsOther { get; set; }

        [JsonProperty("lastModified", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastModified { get; set; }

        [JsonProperty("leaves", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Leaves { get; set; }

        [JsonProperty("manualChanges", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ManualChanges { get; set; }

        [JsonProperty("newTaxonomy", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NewTaxonomy { get; set; }

        [JsonProperty("onlineMode", NullValueHandling = NullValueHandling.Ignore)]
        public OnlineMode? OnlineMode { get; set; }

        [JsonProperty("onlyAfterTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> OnlyAfterTaxonomies { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public double? Order { get; set; }

        [JsonProperty("parallelTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ParallelTaxonomies { get; set; }

        [JsonProperty("popularity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Popularity { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyPrice Price { get; set; }

        [JsonProperty("priceLink", NullValueHandling = NullValueHandling.Ignore)]
        public string PriceLink { get; set; }

        /// <summary>
        /// Список видов приема услуги
        /// </summary>
        [JsonProperty("receptionTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ReceptionTypes { get; set; }

        [JsonProperty("rooms", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Rooms { get; set; }

        [JsonProperty("showcaseItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyShowcaseItem> ShowcaseItems { get; set; }

        [JsonProperty("showcases", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyTaxonomyShowcase> Showcases { get; set; }

        /// <summary>
        /// Идентификатор услуги в витрине
        /// </summary>
        [JsonProperty("showcaseTaxonomyID", NullValueHandling = NullValueHandling.Ignore)]
        public string ShowcaseTaxonomyId { get; set; }

        /// <summary>
        /// Внешний идентификатор таксономии
        /// </summary>
        [JsonProperty("siteId", NullValueHandling = NullValueHandling.Ignore)]
        public string SiteId { get; set; }

        [JsonProperty("specialCabinet", NullValueHandling = NullValueHandling.Ignore)]
        public string SpecialCabinet { get; set; }

        [JsonProperty("taxonomyAppExtraID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyAppExtraId { get; set; }

        [JsonProperty("taxonomyCategoryExtraID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyCategoryExtraId { get; set; }

        [JsonProperty("taxonomyParentID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyParentId { get; set; }

        [JsonProperty("taxonomyType", NullValueHandling = NullValueHandling.Ignore)]
        public TaxonomyType? TaxonomyType { get; set; }

        [JsonProperty("timetable", NullValueHandling = NullValueHandling.Ignore)]
        public Timetable Timetable { get; set; }

        [JsonProperty("useConfirmationSmsAlert", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseConfirmationSmsAlert { get; set; }

        [JsonProperty("visitType", NullValueHandling = NullValueHandling.Ignore)]
        public string VisitType { get; set; }
    }

    public partial class TentacledAdditionalDuration
    {
        [JsonProperty("duration")]
        public double? Duration { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public double? Level { get; set; }
    }

    public partial class FluffyBusinessTaxonomyPrice
    {
        /// <summary>
        /// Значение цены
        /// </summary>
        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public string Amount { get; set; }

        /// <summary>
        /// Аббревиатура валюты
        /// </summary>
        [JsonProperty("currency")]
        public CurrencyList Currency { get; set; }

        /// <summary>
        /// "Уровень" цены. Работнику можно выставить его "уровень" (поле level в resources)
        /// </summary>
        [JsonProperty("resourceLevel")]
        public double ResourceLevel { get; set; }

        /// <summary>
        /// Значение цены, с учётом промо акций
        /// </summary>
        [JsonProperty("stockAmount")]
        public string StockAmount { get; set; }

        /// <summary>
        /// Тип цены
        /// </summary>
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalPriceType? Type { get; set; }
    }

    public partial class FluffyBusinessTaxonomyProduct
    {
        /// <summary>
        /// Дополнительный ID товара
        /// </summary>
        [JsonProperty("extraID")]
        public string ExtraId { get; set; }

        /// <summary>
        /// ID товара
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// Является ли обязательным при выполнении данной услуги
        /// </summary>
        [JsonProperty("required")]
        public bool BusinessTaxonomyProductRequired { get; set; }
    }

    public partial class FluffyAdjacentTaxonomy
    {
        [JsonProperty("isAnyAvailable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsAnyAvailable { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public double? Order { get; set; }

        [JsonProperty("slotDuration", NullValueHandling = NullValueHandling.Ignore)]
        public double? SlotDuration { get; set; }

        [JsonProperty("taxonomyID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyId { get; set; }
    }

    public partial class FluffyDateLimit
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("dateLimitFrom", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateLimitFrom { get; set; }

        [JsonProperty("dateLimitTo", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateLimitTo { get; set; }
    }

    public partial class FluffyPrice
    {
        /// <summary>
        /// Значение цены
        /// </summary>
        [JsonProperty("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Аббревиатура валюты (например, RUB - рубль)
        /// </summary>
        [JsonProperty("currency")]
        public CurrencyList Currency { get; set; }

        /// <summary>
        /// Значение цены, с учётом промо акций
        /// </summary>
        [JsonProperty("stockAmount")]
        public string StockAmount { get; set; }

        /// <summary>
        /// Тип цены
        /// </summary>
        [JsonProperty("type")]
        public AdditionalPriceType Type { get; set; }
    }

    public partial class FluffyShowcaseItem
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("additionalDurations", NullValueHandling = NullValueHandling.Ignore)]
        public List<StickyAdditionalDuration> AdditionalDurations { get; set; }

        [JsonProperty("businessID", NullValueHandling = NullValueHandling.Ignore)]
        public string BusinessId { get; set; }

        /// <summary>
        /// Список видов приема услуги
        /// </summary>
        [JsonProperty("receptionTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ReceptionTypes { get; set; }

        [JsonProperty("taxonomyID", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxonomyId { get; set; }
    }

    public partial class StickyAdditionalDuration
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        /// <summary>
        /// поддержка различной длительности услуг в зависимости от работника
        /// </summary>
        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public double? Level { get; set; }
    }

    public partial class FluffyTaxonomyShowcase
    {
        [JsonProperty("baseBusinessID", NullValueHandling = NullValueHandling.Ignore)]
        public string BaseBusinessId { get; set; }

        [JsonProperty("isBaseNode", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsBaseNode { get; set; }

        [JsonProperty("originBusinessID", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginBusinessId { get; set; }

        [JsonProperty("showcaseItemID", NullValueHandling = NullValueHandling.Ignore)]
        public string ShowcaseItemId { get; set; }
    }

    public partial class FluffyTaxonomiesComplex
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("taxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Taxonomies { get; set; }
    }

    public partial class FluffyTopServices
    {
        [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Services { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class FluffyWidgetConfiguration
    {
        [JsonProperty("additionalName", NullValueHandling = NullValueHandling.Ignore)]
        public string AdditionalName { get; set; }

        [JsonProperty("alignmentTaxonomySlots", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AlignmentTaxonomySlots { get; set; }

        [JsonProperty("allowAutoSelect", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowAutoSelect { get; set; }

        [JsonProperty("allowBookVisitor", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowBookVisitor { get; set; }

        [JsonProperty("allowSkipTimeCheck", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowSkipTimeCheck { get; set; }

        [JsonProperty("appointment_confirmation_text", NullValueHandling = NullValueHandling.Ignore)]
        public string AppointmentConfirmationText { get; set; }

        [JsonProperty("appointment_confirmation_title", NullValueHandling = NullValueHandling.Ignore)]
        public string AppointmentConfirmationTitle { get; set; }

        [JsonProperty("askClientBirthday", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AskClientBirthday { get; set; }

        [JsonProperty("askClientGender", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AskClientGender { get; set; }

        [JsonProperty("bookableDateRanges", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyBookableDateRanges BookableDateRanges { get; set; }

        [JsonProperty("bookableMonthsCount", NullValueHandling = NullValueHandling.Ignore)]
        public double? BookableMonthsCount { get; set; }

        [JsonProperty("calendarMode", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CalendarMode { get; set; }

        [JsonProperty("calendarModeHideTime", NullValueHandling = NullValueHandling.Ignore)]
        public bool? CalendarModeHideTime { get; set; }

        [JsonProperty("clientBlockingSettings", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyClientBlockingSettings ClientBlockingSettings { get; set; }

        [JsonProperty("clientCommentTitle", NullValueHandling = NullValueHandling.Ignore)]
        public string ClientCommentTitle { get; set; }

        [JsonProperty("cracServer", NullValueHandling = NullValueHandling.Ignore)]
        public CracServer? CracServer { get; set; }

        [JsonProperty("cracSlotSize", NullValueHandling = NullValueHandling.Ignore)]
        public double? CracSlotSize { get; set; }

        [JsonProperty("crunchv2", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Crunchv2 { get; set; }

        [JsonProperty("dayOffLabel", NullValueHandling = NullValueHandling.Ignore)]
        public string DayOffLabel { get; set; }

        [JsonProperty("daysForward", NullValueHandling = NullValueHandling.Ignore)]
        public double? DaysForward { get; set; }

        [JsonProperty("dayUnavailableLabel", NullValueHandling = NullValueHandling.Ignore)]
        public string DayUnavailableLabel { get; set; }

        [JsonProperty("defaultServiceImgUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultServiceImgUrl { get; set; }

        [JsonProperty("defaultWorkerImgUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string DefaultWorkerImgUrl { get; set; }

        [JsonProperty("denySameTimeRecords", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DenySameTimeRecords { get; set; }

        [JsonProperty("disabledTaxonomiesText", NullValueHandling = NullValueHandling.Ignore)]
        public string DisabledTaxonomiesText { get; set; }

        [JsonProperty("disableMobileWidget", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisableMobileWidget { get; set; }

        [JsonProperty("disableWidget", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisableWidget { get; set; }

        [JsonProperty("disableWidgetMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string DisableWidgetMessage { get; set; }

        [JsonProperty("discountedPriceRounding", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyDiscountedPriceRounding DiscountedPriceRounding { get; set; }

        [JsonProperty("displaySlotSize", NullValueHandling = NullValueHandling.Ignore)]
        public double? DisplaySlotSize { get; set; }

        [JsonProperty("dontRequireEmail", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DontRequireEmail { get; set; }

        [JsonProperty("emailIsMandatory", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EmailIsMandatory { get; set; }

        [JsonProperty("enableOverrideFooter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableOverrideFooter { get; set; }

        [JsonProperty("enableWarningContactData", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EnableWarningContactData { get; set; }

        [JsonProperty("extraVisitors", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ExtraVisitors { get; set; }

        [JsonProperty("filterNonInsuranceSchedule", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FilterNonInsuranceSchedule { get; set; }

        [JsonProperty("hideAnyWorkerBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideAnyWorkerBooking { get; set; }

        [JsonProperty("hideCallButton", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideCallButton { get; set; }

        [JsonProperty("hideEmptyDays", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideEmptyDays { get; set; }

        [JsonProperty("hideGBookingLogo", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideGBookingLogo { get; set; }

        [JsonProperty("hideGraySlots", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideGraySlots { get; set; }

        [JsonProperty("hideNewAppointmentButton", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideNewAppointmentButton { get; set; }

        [JsonProperty("hidePrices", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HidePrices { get; set; }

        [JsonProperty("hideSocialNetworksAuthentication", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HideSocialNetworksAuthentication { get; set; }

        [JsonProperty("insuranceClientSupportPhone", NullValueHandling = NullValueHandling.Ignore)]
        public List<Phone> InsuranceClientSupportPhone { get; set; }

        [JsonProperty("maxServiceBooking", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxServiceBooking { get; set; }

        [JsonProperty("maxTimeslotBooking", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxTimeslotBooking { get; set; }

        [JsonProperty("middleNameSupport", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MiddleNameSupport { get; set; }

        [JsonProperty("mostFreeEnable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MostFreeEnable { get; set; }

        [JsonProperty("multiServiceBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MultiServiceBooking { get; set; }

        [JsonProperty("multiTimeslotBooking", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MultiTimeslotBooking { get; set; }

        [JsonProperty("multiTimeslotBookingAllDays", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MultiTimeslotBookingAllDays { get; set; }

        [JsonProperty("newWidgetTheme", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> NewWidgetTheme { get; set; }

        [JsonProperty("noDefaultImages", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NoDefaultImages { get; set; }

        [JsonProperty("overrideFooter", NullValueHandling = NullValueHandling.Ignore)]
        public string OverrideFooter { get; set; }

        [JsonProperty("payment", NullValueHandling = NullValueHandling.Ignore)]
        public Payment? Payment { get; set; }

        [JsonProperty("paymentProvider", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyPaymentProvider? PaymentProvider { get; set; }

        [JsonProperty("requireAgreement", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequireAgreement { get; set; }

        [JsonProperty("requireAgreementLink", NullValueHandling = NullValueHandling.Ignore)]
        public string RequireAgreementLink { get; set; }

        [JsonProperty("revisionVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? RevisionVersion { get; set; }

        [JsonProperty("shortLink", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortLink { get; set; }

        [JsonProperty("showAllWorkers", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowAllWorkers { get; set; }

        [JsonProperty("showClientAddress", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientAddress { get; set; }

        [JsonProperty("showClientComment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowClientComment { get; set; }

        [JsonProperty("showDisabledTaxonomies", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDisabledTaxonomies { get; set; }

        [JsonProperty("showDrinkQuestion", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowDrinkQuestion { get; set; }

        [JsonProperty("showMap", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowMap { get; set; }

        [JsonProperty("showStartText", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowStartText { get; set; }

        [JsonProperty("showSurnameFirst", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowSurnameFirst { get; set; }

        [JsonProperty("showTalkQuestion", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTalkQuestion { get; set; }

        [JsonProperty("showTaxonomyConfirmationAlert", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ShowTaxonomyConfirmationAlert { get; set; }

        [JsonProperty("skipAuthentication", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipAuthentication { get; set; }

        [JsonProperty("skipDaysForward", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipDaysForward { get; set; }

        [JsonProperty("skipMobileMap", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipMobileMap { get; set; }

        [JsonProperty("skipServiceDurationAlignment", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipServiceDurationAlignment { get; set; }

        [JsonProperty("skipServiceSelection", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipServiceSelection { get; set; }

        [JsonProperty("skipTimeSelection", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipTimeSelection { get; set; }

        [JsonProperty("skipTimeSelectionServiceIDs", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SkipTimeSelectionServiceIDs { get; set; }

        [JsonProperty("skipWorkerSelectedServiceIDs", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SkipWorkerSelectedServiceIDs { get; set; }

        [JsonProperty("skipWorkerServicesSelection", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipWorkerServicesSelection { get; set; }

        [JsonProperty("socialNetworkImage", NullValueHandling = NullValueHandling.Ignore)]
        public string SocialNetworkImage { get; set; }

        [JsonProperty("socialSharing", NullValueHandling = NullValueHandling.Ignore)]
        public FluffySocialSharing SocialSharing { get; set; }

        [JsonProperty("sortByMostFree", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SortByMostFree { get; set; }

        [JsonProperty("sortWorkersByWorkload", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SortWorkersByWorkload { get; set; }

        [JsonProperty("splitInsuranceClient", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SplitInsuranceClient { get; set; }

        [JsonProperty("splitName", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SplitName { get; set; }

        [JsonProperty("startTextButton", NullValueHandling = NullValueHandling.Ignore)]
        public string StartTextButton { get; set; }

        [JsonProperty("startTextMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string StartTextMessage { get; set; }

        [JsonProperty("tentativeTTL", NullValueHandling = NullValueHandling.Ignore)]
        public double? TentativeTtl { get; set; }

        [JsonProperty("theme", NullValueHandling = NullValueHandling.Ignore)]
        public string Theme { get; set; }

        [JsonProperty("useAppointmentReminder", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseAppointmentReminder { get; set; }

        [JsonProperty("useBusinessScheduleForUnavailableLabel", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseBusinessScheduleForUnavailableLabel { get; set; }

        [JsonProperty("useClustersMap", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseClustersMap { get; set; }

        [JsonProperty("useCoupon", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseCoupon { get; set; }

        [JsonProperty("useCRAC", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseCrac { get; set; }

        [JsonProperty("useDefaultServiceImg", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseDefaultServiceImg { get; set; }

        [JsonProperty("useDefaultWorkerImg", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseDefaultWorkerImg { get; set; }

        [JsonProperty("useDirectScheduleRead", NullValueHandling = NullValueHandling.Ignore)]
        public UseDirectScheduleRead? UseDirectScheduleRead { get; set; }

        [JsonProperty("useInsuranceGuaranteeLetter", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseInsuranceGuaranteeLetter { get; set; }

        [JsonProperty("useInsuranceSelect", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseInsuranceSelect { get; set; }

        [JsonProperty("useMedAuth", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseMedAuth { get; set; }

        [JsonProperty("useMiddleName", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseMiddleName { get; set; }

        [JsonProperty("useNewReserveAPI", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseNewReserveApi { get; set; }

        [JsonProperty("useResourcePageLoading", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseResourcePageLoading { get; set; }

        [JsonProperty("useSortByName", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseSortByName { get; set; }

        [JsonProperty("warningContactDataText", NullValueHandling = NullValueHandling.Ignore)]
        public string WarningContactDataText { get; set; }

        [JsonProperty("widgetUseCRAC", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WidgetUseCrac { get; set; }

        [JsonProperty("withoutWorkers", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WithoutWorkers { get; set; }

        [JsonProperty("worker_unavailability_text", NullValueHandling = NullValueHandling.Ignore)]
        public string WorkerUnavailabilityText { get; set; }

        [JsonProperty("workerNameReverse", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WorkerNameReverse { get; set; }
    }

    public partial class FluffyBookableDateRanges
    {
        [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [JsonProperty("end")]
        public object End { get; set; }

        [JsonProperty("start")]
        public object Start { get; set; }
    }

    public partial class FluffyClientBlockingSettings
    {
        [JsonProperty("appointmentClientBlock", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AppointmentClientBlock { get; set; }

        [JsonProperty("appointmentClientBlockDays", NullValueHandling = NullValueHandling.Ignore)]
        public double? AppointmentClientBlockDays { get; set; }

        [JsonProperty("appointmentClientBlockText", NullValueHandling = NullValueHandling.Ignore)]
        public string AppointmentClientBlockText { get; set; }

        [JsonProperty("blockIfFutureRecordExists", NullValueHandling = NullValueHandling.Ignore)]
        public bool? BlockIfFutureRecordExists { get; set; }

        [JsonProperty("blockRepeatedRecordsCount", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockRepeatedRecordsCount { get; set; }

        [JsonProperty("blockRepeatedRecordsRange", NullValueHandling = NullValueHandling.Ignore)]
        public double? BlockRepeatedRecordsRange { get; set; }

        [JsonProperty("blockRepeatedRecordsText", NullValueHandling = NullValueHandling.Ignore)]
        public string BlockRepeatedRecordsText { get; set; }
    }

    public partial class FluffyDiscountedPriceRounding
    {
        [JsonProperty("rule", NullValueHandling = NullValueHandling.Ignore)]
        public Rule? Rule { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }
    }

    public partial class FluffySocialSharing
    {
        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("discountAmount")]
        public double? DiscountAmount { get; set; }

        [JsonProperty("discountEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DiscountEnabled { get; set; }

        [JsonProperty("discountType", NullValueHandling = NullValueHandling.Ignore)]
        public DiscountType? DiscountType { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("widgetText")]
        public string WidgetText { get; set; }
    }

    public partial class NetworkElement
    {
        [JsonProperty("address")]
        public Address? Address { get; set; }

        [JsonProperty("businessName")]
        public string BusinessName { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("internalID")]
        public string InternalId { get; set; }
    }

    public partial class AddressCamelCaseSchema
    {
        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public string Address { get; set; }

        [JsonProperty("addressAdd", NullValueHandling = NullValueHandling.Ignore)]
        public string AddressAdd { get; set; }

        [JsonProperty("adminArea", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminArea { get; set; }

        [JsonProperty("adminAreaType", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminAreaType { get; set; }

        [JsonProperty("building", NullValueHandling = NullValueHandling.Ignore)]
        public string Building { get; set; }

        [JsonProperty("corps", NullValueHandling = NullValueHandling.Ignore)]
        public string Corps { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public string Group { get; set; }

        [JsonProperty("houseAdd", NullValueHandling = NullValueHandling.Ignore)]
        public string HouseAdd { get; set; }

        [JsonProperty("kilometer", NullValueHandling = NullValueHandling.Ignore)]
        public string Kilometer { get; set; }

        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [JsonProperty("locality", NullValueHandling = NullValueHandling.Ignore)]
        public string Locality { get; set; }

        [JsonProperty("localityType", NullValueHandling = NullValueHandling.Ignore)]
        public string LocalityType { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        [JsonProperty("metroStations", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyMetroStation> MetroStations { get; set; }

        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public string Number { get; set; }

        [JsonProperty("office", NullValueHandling = NullValueHandling.Ignore)]
        public string Office { get; set; }

        [JsonProperty("possesion", NullValueHandling = NullValueHandling.Ignore)]
        public string Possesion { get; set; }

        [JsonProperty("street", NullValueHandling = NullValueHandling.Ignore)]
        public string Street { get; set; }

        [JsonProperty("streetType", NullValueHandling = NullValueHandling.Ignore)]
        public string StreetType { get; set; }

        [JsonProperty("subAdminArea", NullValueHandling = NullValueHandling.Ignore)]
        public string SubAdminArea { get; set; }

        [JsonProperty("subAdminAreaType", NullValueHandling = NullValueHandling.Ignore)]
        public string SubAdminAreaType { get; set; }

        [JsonProperty("subLocality", NullValueHandling = NullValueHandling.Ignore)]
        public string SubLocality { get; set; }

        [JsonProperty("subLocalityType", NullValueHandling = NullValueHandling.Ignore)]
        public string SubLocalityType { get; set; }

        [JsonProperty("way", NullValueHandling = NullValueHandling.Ignore)]
        public string Way { get; set; }

        [JsonProperty("zipCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    }

    public partial class FluffyMetroStation
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class ResultTopServices
    {
        [JsonProperty("services")]
        public List<string> Services { get; set; }

        [JsonProperty("status")]
        public bool Status { get; set; }
    }

    public partial class ClientController
    {
        [JsonProperty("add_client")]
        public AddClient AddClient { get; set; }

        [JsonProperty("find_or_create_client", NullValueHandling = NullValueHandling.Ignore)]
        public FindOrCreateClient FindOrCreateClient { get; set; }
    }

    public partial class AddClient
    {
        [JsonProperty("request")]
        public ClientAddClientRequest Request { get; set; }

        [JsonProperty("response")]
        public ClientAddClientResponse Response { get; set; }
    }

    public partial class ClientAddClientRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public ClientAddClientRequestParams Params { get; set; }
    }

    /// <summary>
    /// параметры запроса
    /// </summary>
    public partial class ClientAddClientRequestParams
    {
        [JsonProperty("business")]
        public AmbitiousBusiness Business { get; set; }

        [JsonProperty("client")]
        public ClientClass Client { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public ParamsProfile Profile { get; set; }

        [JsonProperty("skipEmailCheck", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipEmailCheck { get; set; }

        [JsonProperty("skipProfileUpdate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipProfileUpdate { get; set; }
    }

    public partial class AmbitiousBusiness
    {
        /// <summary>
        /// идентификатор бизнеса
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }
    }

    /// <summary>
    /// Данные клиента
    /// </summary>
    public partial class ClientClass
    {
        [JsonProperty("birthday")]
        public Birthday? Birthday { get; set; }

        [JsonProperty("creatorProfileID")]
        public string CreatorProfileId { get; set; }

        [JsonProperty("creatorProfileName")]
        public string CreatorProfileName { get; set; }

        [JsonProperty("driverLicense")]
        public string DriverLicense { get; set; }

        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Email { get; set; }

        [JsonProperty("fromSms", NullValueHandling = NullValueHandling.Ignore)]
        public FromSms? FromSms { get; set; }

        [JsonProperty("middle_name")]
        public string MiddleName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("phone")]
        public Phone Phone { get; set; }

        [JsonProperty("sex", NullValueHandling = NullValueHandling.Ignore)]
        public Sex? Sex { get; set; }

        [JsonProperty("surname")]
        public string Surname { get; set; }

        [JsonProperty("taxiPark")]
        public string TaxiPark { get; set; }

        [JsonProperty("taxiParkMemberCount")]
        public OrderWeight? TaxiParkMemberCount { get; set; }
    }

    public partial class ParamsProfile
    {
        /// <summary>
        /// идентификатор профиля пользователя
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class ClientAddClientResponse
    {
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public ClientAddClientResponseResult Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public ClientAddClientResponseError Error { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public double? Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc", NullValueHandling = NullValueHandling.Ignore)]
        public string Jsonrpc { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class ClientAddClientResponseError
    {
        /// <summary>
        /// код ошибки
        ///
        /// код ошибки создания клиента
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class ClientAddClientResponseResult
    {
        [JsonProperty("business", NullValueHandling = NullValueHandling.Ignore)]
        public CunningBusiness Business { get; set; }

        [JsonProperty("client")]
        public ClientClass Client { get; set; }

        [JsonProperty("documents", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Documents { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleProfile Profile { get; set; }
    }

    public partial class CunningBusiness
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class PurpleProfile
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class FindOrCreateClient
    {
        [JsonProperty("request")]
        public ClientFindOrCreateClientRequest Request { get; set; }

        [JsonProperty("response")]
        public ClientFindOfCreateClientResponse Response { get; set; }
    }

    public partial class ClientFindOrCreateClientRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public ClientFindOrCreateClientRequestParams Params { get; set; }
    }

    /// <summary>
    /// параметры запроса
    /// </summary>
    public partial class ClientFindOrCreateClientRequestParams
    {
        [JsonProperty("business")]
        public MagentaBusiness Business { get; set; }

        [JsonProperty("client", NullValueHandling = NullValueHandling.Ignore)]
        public ClientClass Client { get; set; }

        [JsonProperty("network", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyNetwork Network { get; set; }

        [JsonProperty("skipEmailCheck", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipEmailCheck { get; set; }

        [JsonProperty("skipProfileUpdate", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SkipProfileUpdate { get; set; }
    }

    public partial class MagentaBusiness
    {
        /// <summary>
        /// идентификатор бизнеса
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }
    }

    public partial class FluffyNetwork
    {
        /// <summary>
        /// идентификатор нетворка
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }
    }

    public partial class ClientFindOfCreateClientResponse
    {
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public ClientFindOfCreateClientResponseResult Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public ClientFindOfCreateClientResponseError Error { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public double? Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc", NullValueHandling = NullValueHandling.Ignore)]
        public string Jsonrpc { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class ClientFindOfCreateClientResponseError
    {
        /// <summary>
        /// код ошибки
        ///
        /// код ошибки создания клиента
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class ClientFindOfCreateClientResponseResult
    {
        [JsonProperty("business", NullValueHandling = NullValueHandling.Ignore)]
        public FriskyBusiness Business { get; set; }

        [JsonProperty("client")]
        public ClientClass Client { get; set; }

        [JsonProperty("documents", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Documents { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyProfile Profile { get; set; }
    }

    public partial class FriskyBusiness
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class FluffyProfile
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class CracSlotsController
    {
        [JsonProperty("CRACDistributedResourcesFreeByDate", NullValueHandling = NullValueHandling.Ignore)]
        public CracDistributedResourcesFreeByDate CracDistributedResourcesFreeByDate { get; set; }

        [JsonProperty("CRACResourcesFreeByDate", NullValueHandling = NullValueHandling.Ignore)]
        public CracResourcesFreeByDate CracResourcesFreeByDate { get; set; }

        [JsonProperty("CRACResourcesFreeByDateV2", NullValueHandling = NullValueHandling.Ignore)]
        public CracResourcesFreeByDateV2 CracResourcesFreeByDateV2 { get; set; }

        [JsonProperty("GetCRACDistributedResourcesAndRooms")]
        public GetCracDistributedResourcesAndRooms GetCracDistributedResourcesAndRooms { get; set; }

        [JsonProperty("GetCRACInsuranceResourcesAndRooms", NullValueHandling = NullValueHandling.Ignore)]
        public GetCracInsuranceResourcesAndRooms GetCracInsuranceResourcesAndRooms { get; set; }

        [JsonProperty("GetCRACResourcesAndRooms", NullValueHandling = NullValueHandling.Ignore)]
        public GetCracResourcesAndRooms GetCracResourcesAndRooms { get; set; }
    }

    public partial class CracDistributedResourcesFreeByDate
    {
        [JsonProperty("request")]
        public CracCracDistributedResourcesFreeByDateRequest Request { get; set; }

        [JsonProperty("response")]
        public CracCracDistributedResourcesFreeByDateResponse Response { get; set; }
    }

    public partial class CracCracDistributedResourcesFreeByDateRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public List<CracCracDistributedResourcesFreeByDateRequestParam> Params { get; set; }
    }

    public partial class CracCracDistributedResourcesFreeByDateRequestParam
    {
        [JsonProperty("business")]
        public MischievousBusiness Business { get; set; }

        [JsonProperty("resources")]
        public List<string> Resources { get; set; }

        [JsonProperty("taxonomy")]
        public TentacledTaxonomy Taxonomy { get; set; }
    }

    public partial class MischievousBusiness
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class TentacledTaxonomy
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class CracCracDistributedResourcesFreeByDateResponse
    {
        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error")]
        public CracCracDistributedResourcesFreeByDateResponseError Error { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public CracCracDistributedResourcesFreeByDateResponseResult Result { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc", NullValueHandling = NullValueHandling.Ignore)]
        public string Jsonrpc { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class CracCracDistributedResourcesFreeByDateResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public double? Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    public partial class CracCracDistributedResourcesFreeByDateResponseResult
    {
        [JsonProperty("Free")]
        public List<PurpleFree> Free { get; set; }
    }

    public partial class PurpleFree
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("maxFreeMinutes")]
        public double MaxFreeMinutes { get; set; }

        [JsonProperty("resource")]
        public string Resource { get; set; }

        [JsonProperty("taxonomy")]
        public string Taxonomy { get; set; }
    }

    public partial class CracResourcesFreeByDate
    {
        [JsonProperty("request")]
        public CracCracResourcesFreeByDateRequest Request { get; set; }

        [JsonProperty("response")]
        public CracCracResourcesFreeByDateResponse Response { get; set; }
    }

    public partial class CracCracResourcesFreeByDateRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public List<CracCracResourcesFreeByDateRequestParam> Params { get; set; }
    }

    public partial class CracCracResourcesFreeByDateRequestParam
    {
        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("resources")]
        public List<string> Resources { get; set; }

        [JsonProperty("taxonomy")]
        public StickyTaxonomy Taxonomy { get; set; }
    }

    public partial class StickyTaxonomy
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class CracCracResourcesFreeByDateResponse
    {
        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error")]
        public CracCracResourcesFreeByDateResponseError Error { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public CracCracResourcesFreeByDateResponseResult Result { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc", NullValueHandling = NullValueHandling.Ignore)]
        public string Jsonrpc { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class CracCracResourcesFreeByDateResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public double? Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    public partial class CracCracResourcesFreeByDateResponseResult
    {
        [JsonProperty("Free")]
        public List<FluffyFree> Free { get; set; }
    }

    public partial class FluffyFree
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("maxFreeMinutes")]
        public double MaxFreeMinutes { get; set; }

        [JsonProperty("resource")]
        public string Resource { get; set; }

        [JsonProperty("taxonomy")]
        public string Taxonomy { get; set; }
    }

    public partial class CracResourcesFreeByDateV2
    {
        [JsonProperty("request")]
        public CracCracResourcesFreeByDateV2Request Request { get; set; }

        [JsonProperty("response")]
        public CracCracResourcesFreeByDateV2Response Response { get; set; }
    }

    public partial class CracCracResourcesFreeByDateV2Request
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public List<CracCracResourcesFreeByDateV2RequestParam> Params { get; set; }
    }

    public partial class CracCracResourcesFreeByDateV2RequestParam
    {
        [JsonProperty("business")]
        public BraggadociousBusiness Business { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("durations")]
        public List<double> Durations { get; set; }

        [JsonProperty("resources")]
        public List<string> Resources { get; set; }

        [JsonProperty("taxonomy")]
        public IndigoTaxonomy Taxonomy { get; set; }
    }

    public partial class BraggadociousBusiness
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class IndigoTaxonomy
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class CracCracResourcesFreeByDateV2Response
    {
        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error")]
        public CracCracResourcesFreeByDateV2ResponseError Error { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public CracCracResourcesFreeByDateV2ResponseResult Result { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc", NullValueHandling = NullValueHandling.Ignore)]
        public string Jsonrpc { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class CracCracResourcesFreeByDateV2ResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public double? Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    public partial class CracCracResourcesFreeByDateV2ResponseResult
    {
        [JsonProperty("Free")]
        public List<TentacledFree> Free { get; set; }
    }

    public partial class TentacledFree
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("maxFreeMinutes")]
        public double MaxFreeMinutes { get; set; }

        [JsonProperty("resource")]
        public string Resource { get; set; }

        [JsonProperty("taxonomy")]
        public string Taxonomy { get; set; }
    }

    public partial class GetCracDistributedResourcesAndRooms
    {
        [JsonProperty("request")]
        public CracSlotsGetCracDistributedResourcesAndRoomsRequest Request { get; set; }

        [JsonProperty("response")]
        public CracSlotsGetCracDistributedResourcesAndRoomsResponse Response { get; set; }
    }

    public partial class CracSlotsGetCracDistributedResourcesAndRoomsRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public CracSlotsGetCracDistributedResourcesAndRoomsRequestParams Params { get; set; }
    }

    /// <summary>
    /// параметры запроса
    /// </summary>
    public partial class CracSlotsGetCracDistributedResourcesAndRoomsRequestParams
    {
        [JsonProperty("business")]
        public Business1 Business { get; set; }

        [JsonProperty("filters")]
        public PurpleFilters Filters { get; set; }
    }

    public partial class Business1
    {
        [JsonProperty("general_info")]
        public PurpleGeneralInfo GeneralInfo { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("widget_configuration")]
        public TentacledWidgetConfiguration WidgetConfiguration { get; set; }
    }

    public partial class PurpleGeneralInfo
    {
        [JsonProperty("timezone")]
        public string Timezone { get; set; }
    }

    public partial class TentacledWidgetConfiguration
    {
        [JsonProperty("cracServer")]
        public string CracServer { get; set; }

        [JsonProperty("mostFreeEnable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MostFreeEnable { get; set; }
    }

    public partial class PurpleFilters
    {
        [JsonProperty("date")]
        public PurpleDate Date { get; set; }

        [JsonProperty("resources")]
        public List<PurpleResourceFilter> Resources { get; set; }

        [JsonProperty("rooms")]
        public List<string> Rooms { get; set; }

        [JsonProperty("taxonomies")]
        public List<string> Taxonomies { get; set; }
    }

    public partial class PurpleDate
    {
        [JsonProperty("from")]
        public string From { get; set; }

        [JsonProperty("to")]
        public string To { get; set; }
    }

    public partial class PurpleResourceFilter
    {
        [JsonProperty("business")]
        public ResourceBusiness Business { get; set; }

        /// <summary>
        /// идентификатор ресурса
        /// </summary>
        [JsonProperty("resource")]
        public string Resource { get; set; }
    }

    public partial class ResourceBusiness
    {
        /// <summary>
        /// идентификатор бизнеса
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class CracSlotsGetCracDistributedResourcesAndRoomsResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public CracSlotsGetCracDistributedResourcesAndRoomsResponseResult Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public CracSlotsGetCracDistributedResourcesAndRoomsResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class CracSlotsGetCracDistributedResourcesAndRoomsResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class CracSlotsGetCracDistributedResourcesAndRoomsResponseResult
    {
        [JsonProperty("slots")]
        public List<PurpleSlot> Slots { get; set; }
    }

    public partial class PurpleSlot
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("resources")]
        public List<object> Resources { get; set; }

        [JsonProperty("rooms")]
        public List<Dictionary<string, object>> Rooms { get; set; }
    }

    public partial class GetCracInsuranceResourcesAndRooms
    {
        [JsonProperty("request")]
        public CracSlotsGetCracInsuranceResourcesAndRoomsRequest Request { get; set; }

        [JsonProperty("response")]
        public CracSlotsGetCracInsuranceResourcesAndRoomsResponse Response { get; set; }
    }

    public partial class CracSlotsGetCracInsuranceResourcesAndRoomsRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public CracSlotsGetCracInsuranceResourcesAndRoomsRequestParams Params { get; set; }
    }

    /// <summary>
    /// параметры запроса
    /// </summary>
    public partial class CracSlotsGetCracInsuranceResourcesAndRoomsRequestParams
    {
        [JsonProperty("business")]
        public Business2 Business { get; set; }

        [JsonProperty("filters")]
        public FluffyFilters Filters { get; set; }
    }

    public partial class Business2
    {
        [JsonProperty("general_info")]
        public FluffyGeneralInfo GeneralInfo { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("widget_configuration")]
        public StickyWidgetConfiguration WidgetConfiguration { get; set; }
    }

    public partial class FluffyGeneralInfo
    {
        [JsonProperty("timezone")]
        public string Timezone { get; set; }
    }

    public partial class StickyWidgetConfiguration
    {
        [JsonProperty("cracServer")]
        public string CracServer { get; set; }

        [JsonProperty("mostFreeEnable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MostFreeEnable { get; set; }
    }

    public partial class FluffyFilters
    {
        [JsonProperty("date")]
        public FluffyDate Date { get; set; }

        [JsonProperty("insuranceID")]
        public string InsuranceId { get; set; }

        [JsonProperty("resources")]
        public List<FluffyResourceFilter> Resources { get; set; }

        [JsonProperty("rooms")]
        public List<string> Rooms { get; set; }
    }

    public partial class FluffyDate
    {
        [JsonProperty("from")]
        public string From { get; set; }

        [JsonProperty("to")]
        public string To { get; set; }
    }

    public partial class FluffyResourceFilter
    {
        [JsonProperty("duration")]
        public double Duration { get; set; }

        /// <summary>
        /// идентификатор ресурса
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class CracSlotsGetCracInsuranceResourcesAndRoomsResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public CracSlotsGetCracInsuranceResourcesAndRoomsResponseResult Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public CracSlotsGetCracInsuranceResourcesAndRoomsResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class CracSlotsGetCracInsuranceResourcesAndRoomsResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class CracSlotsGetCracInsuranceResourcesAndRoomsResponseResult
    {
        [JsonProperty("slots")]
        public List<FluffySlot> Slots { get; set; }
    }

    public partial class FluffySlot
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("resources")]
        public List<object> Resources { get; set; }

        [JsonProperty("rooms")]
        public List<Dictionary<string, object>> Rooms { get; set; }
    }

    public partial class GetCracResourcesAndRooms
    {
        [JsonProperty("request")]
        public CracSlotsGetCracResourcesAndRoomsRequest Request { get; set; }

        [JsonProperty("response")]
        public CracSlotsGetCracResourcesAndRoomsResponse Response { get; set; }
    }

    public partial class CracSlotsGetCracResourcesAndRoomsRequest
    {
        /// <summary>
        /// авторизационные параметры
        /// </summary>
        [JsonProperty("cred", NullValueHandling = NullValueHandling.Ignore)]
        public Cred Cred { get; set; }

        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public BackofficeIdUnion Id { get; set; }

        /// <summary>
        /// версия протокола - 2.0
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        /// <summary>
        /// название jsonrpc метода
        /// </summary>
        [JsonProperty("method")]
        public string Method { get; set; }

        /// <summary>
        /// параметры запроса
        /// </summary>
        [JsonProperty("params")]
        public CracSlotsGetCracResourcesAndRoomsRequestParams Params { get; set; }
    }

    /// <summary>
    /// параметры запроса
    /// </summary>
    public partial class CracSlotsGetCracResourcesAndRoomsRequestParams
    {
        [JsonProperty("business")]
        public Business3 Business { get; set; }

        [JsonProperty("filters")]
        public TentacledFilters Filters { get; set; }
    }

    public partial class Business3
    {
        [JsonProperty("general_info")]
        public TentacledGeneralInfo GeneralInfo { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("widget_configuration")]
        public IndigoWidgetConfiguration WidgetConfiguration { get; set; }
    }

    public partial class TentacledGeneralInfo
    {
        [JsonProperty("timezone")]
        public string Timezone { get; set; }
    }

    public partial class IndigoWidgetConfiguration
    {
        [JsonProperty("cracServer")]
        public string CracServer { get; set; }

        [JsonProperty("mostFreeEnable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? MostFreeEnable { get; set; }
    }

    public partial class TentacledFilters
    {
        [JsonProperty("date")]
        public TentacledDate Date { get; set; }

        [JsonProperty("resources")]
        public List<TentacledResourceFilter> Resources { get; set; }

        [JsonProperty("rooms")]
        public List<string> Rooms { get; set; }

        [JsonProperty("taxonomies")]
        public List<string> Taxonomies { get; set; }
    }

    public partial class TentacledDate
    {
        [JsonProperty("from")]
        public DateTimeOffset From { get; set; }

        [JsonProperty("to")]
        public DateTimeOffset To { get; set; }
    }

    public partial class TentacledResourceFilter
    {
        [JsonProperty("duration")]
        public double Duration { get; set; }

        /// <summary>
        /// идентификатор ресурса
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class CracSlotsGetCracResourcesAndRoomsResponse
    {
        /// <summary>
        /// значение числового типа для идентификации запроса на сервере
        /// </summary>
        [JsonProperty("id")]
        public double Id { get; set; }

        /// <summary>
        /// версия протокола (2.0)
        /// </summary>
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public CracSlotsGetCracResourcesAndRoomsResponseResult Result { get; set; }

        /// <summary>
        /// объект, содержащий информацию об ошибке
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public CracSlotsGetCracResourcesAndRoomsResponseError Error { get; set; }
    }

    /// <summary>
    /// объект, содержащий информацию об ошибке
    ///
    /// Код ошибки авторизации
    /// </summary>
    public partial class CracSlotsGetCracResourcesAndRoomsResponseError
    {
        /// <summary>
        /// код ошибки
        /// </summary>
        [JsonProperty("code")]
        public double Code { get; set; }

        /// <summary>
        /// дополнительные данные об ошибке
        /// </summary>
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// текстовая информация об ошибке
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class CracSlotsGetCracResourcesAndRoomsResponseResult
    {
        [JsonProperty("slots")]
        public List<TentacledSlot> Slots { get; set; }
    }

    public partial class TentacledSlot
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("resources")]
        public List<object> Resources { get; set; }

        [JsonProperty("rooms")]
        public List<Dictionary<string, object>> Rooms { get; set; }
    }

    public partial class Models
    {
        [JsonProperty("Appointment")]
        public AppointmentElement Appointment { get; set; }

        [JsonProperty("Business")]
        public ResultBusiness Business { get; set; }

        [JsonProperty("Client")]
        public ClientClass Client { get; set; }
    }

    public enum AppointmentClientAppear { NoAppear, None, YesAppear };

    public enum AppointmentClientPayment { NoPayment, None, YesPayedFull, YesPayedOnline, YesPayedPart };

    public enum AppointmentStatus { Active, CancelledByAdmin, CancelledByBusiness, CancelledByClient, ConfirmedByAdmin, ConfirmedByBusiness, ConfirmedByClient, ConfirmedMoved, Denied, Done, Tentative, TimedOut };

    public enum ComplaintStatus { Checking, Closed, Entered, Invalid, Investigation, NotEntered };

    public enum Sex { Empty, Female, Male, NotSpecified };

    public enum AdditionalFieldType { Bool, Coupon, File, Radio, String };

    public enum DrinkAnswer { Coffee, NotImportant, Tea };

    public enum DiscountProvider { Groupon, Local, Yandex };

    /// <summary>
    /// Аббревиатура валюты
    ///
    /// Аббревиатура валюты (например, RUB - рубль)
    /// </summary>
    public enum CurrencyList { Cny, Eur, Gbp, Huf, Ils, Kzt, Rub, Uah, Usd, Uzs };

    public enum TalkAnswer { NotImportant, NotTalk, Talk };

    public enum ReminderStatus { NotSet, Off, On };

    public enum Dir { Asc, Desc };

    public enum SortField { Created, Start };

    public enum AppointmentExtensionType { Minutes, Percent };

    public enum FeedBackMinRating { The1, The2, The3, The4, The5 };

    public enum PurplePaymentProvider { DeltaProcessing, Disable, YandexMoney };

    public enum ResourceTimetableType { Default, Evenodd };

    public enum SchedulerWeekViewType { Week, WorkWeek };

    public enum BackofficeType { Common, Gt, Ll, Mb, Mu };

    public enum Country { Am, Blr, Ch, De, Empty, Es, Fi, Fr, Ge, Hu, Il, Kz, Li, Lt, Lv, Ru, Ua, Uk, Us, Uz };

    public enum LanguageList { AmAm, DeDe, EeEe, EnUs, EsEs, FiFi, FrFr, GeGe, HeIl, HuHu, LtLt, LvLv, RuRu, UzUz, ZhCn };

    public enum PaymentMethods { Amex, Mastercard, MoneyBookers, PayPal, Visa };

    public enum PricingType { Default, MasterTopmaster };

    public enum SocialNetwork { Facebook, GBooking, Google, LinkedIn, Mailru, Odnoklassniki, Twitter, VKontakte, Yahoo, Yandex };

    public enum VerticalTranslation { Beauty, Fitness, Generic, Medical, None, Sport, Yoga };

    public enum Group { French, General, Hungarian, Latvian };

    public enum FieldElement { Email, Name, Surname };

    /// <summary>
    /// month - по дням месяца (1-е число каждого месяца - нечётно), week - по дням недели
    /// (понедельник считается нечётным)
    /// </summary>
    public enum StartPeriod { Month, Week };

    /// <summary>
    /// тип доступа работника в систему через его учётную запись
    /// </summary>
    public enum AccessType { None, WorkerExtended, WorkerSimple };

    public enum ResourceStatus { Active, Inactive };

    /// <summary>
    /// Тип цены
    /// </summary>
    public enum AdditionalPriceType { Average, BeginWith, Equal };

    public enum ChildrenTaxonomyType { Child, None, Parent };

    public enum DateLimitType { AllDates, FromDate, RangeDates, ToDate };

    public enum DaysOfWeek { Fri, Mon, Sat, Sun, Thu, Tue, Wed };

    public enum Repeats { Daily, None, Weekly };

    public enum OnlineMode { OncallOnline, PlanClinic, PlanClinicOnline, PlanOnline };

    public enum TaxonomyType { Category, Service, Subcategory };

    public enum CracServer { Crac, CracProd3 };

    public enum Rule { Custom, NearestInteger, TwoDecimals };

    public enum Payment { Optional, Required, Without };

    public enum DiscountType { Percent };

    public enum UseDirectScheduleRead { All, Authenticated, Guest, None };

    /// <summary>
    /// тип сортировки работника
    /// </summary>
    public enum WorkerSortingType { MostFree, None, Workload };

    public enum FluffyPaymentProvider { Cloudpayments, DeltaProcessing, Disable, Pelecard, YandexMoney };

    public enum YandexFeedType { Dynamic, No, Static, StaticServiceOnly };

    public partial struct ErrorResponse
    {
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public ErrorResponseClass ErrorResponseClass;
        public long? Integer;
        public string String;

        public static implicit operator ErrorResponse(List<object> AnythingArray) => new ErrorResponse { AnythingArray = AnythingArray };
        public static implicit operator ErrorResponse(bool Bool) => new ErrorResponse { Bool = Bool };
        public static implicit operator ErrorResponse(double Double) => new ErrorResponse { Double = Double };
        public static implicit operator ErrorResponse(ErrorResponseClass ErrorResponseClass) => new ErrorResponse { ErrorResponseClass = ErrorResponseClass };
        public static implicit operator ErrorResponse(long Integer) => new ErrorResponse { Integer = Integer };
        public static implicit operator ErrorResponse(string String) => new ErrorResponse { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && ErrorResponseClass == null && Double == null && Integer == null && String == null;
    }

    /// <summary>
    /// значение числового типа для идентификации запроса на сервере
    ///
    /// идентификатор сети
    ///
    /// идентификатор витрины (передаётся вместе с with_taxonomy_showcase)
    ///
    /// идентификатор бизнеса
    ///
    /// идентификатор нетворка
    /// </summary>
    public partial struct BackofficeIdUnion
    {
        public double? Double;
        public string String;

        public static implicit operator BackofficeIdUnion(double Double) => new BackofficeIdUnion { Double = Double };
        public static implicit operator BackofficeIdUnion(string String) => new BackofficeIdUnion { String = String };
    }

    /// <summary>
    /// параметры запроса
    /// </summary>
    public partial struct ParamsUnion
    {
        public List<object> AnythingArray;
        public Dictionary<string, object> AnythingMap;

        public static implicit operator ParamsUnion(List<object> AnythingArray) => new ParamsUnion { AnythingArray = AnythingArray };
        public static implicit operator ParamsUnion(Dictionary<string, object> AnythingMap) => new ParamsUnion { AnythingMap = AnythingMap };
    }

    /// <summary>
    /// jsonrpc2 запрос
    /// </summary>
    public partial struct Request
    {
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public RequestClass RequestClass;
        public string String;

        public static implicit operator Request(List<object> AnythingArray) => new Request { AnythingArray = AnythingArray };
        public static implicit operator Request(bool Bool) => new Request { Bool = Bool };
        public static implicit operator Request(double Double) => new Request { Double = Double };
        public static implicit operator Request(long Integer) => new Request { Integer = Integer };
        public static implicit operator Request(RequestClass RequestClass) => new Request { RequestClass = RequestClass };
        public static implicit operator Request(string String) => new Request { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && RequestClass == null && Double == null && Integer == null && String == null;
    }

    public partial struct SuccessResponse
    {
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public string String;
        public SuccessResponseClass SuccessResponseClass;

        public static implicit operator SuccessResponse(List<object> AnythingArray) => new SuccessResponse { AnythingArray = AnythingArray };
        public static implicit operator SuccessResponse(bool Bool) => new SuccessResponse { Bool = Bool };
        public static implicit operator SuccessResponse(double Double) => new SuccessResponse { Double = Double };
        public static implicit operator SuccessResponse(long Integer) => new SuccessResponse { Integer = Integer };
        public static implicit operator SuccessResponse(string String) => new SuccessResponse { String = String };
        public static implicit operator SuccessResponse(SuccessResponseClass SuccessResponseClass) => new SuccessResponse { SuccessResponseClass = SuccessResponseClass };
        public bool IsNull => AnythingArray == null && Bool == null && SuccessResponseClass == null && Double == null && Integer == null && String == null;
    }

    public partial struct Birthday
    {
        public Dictionary<string, object> AnythingMap;
        public string String;

        public static implicit operator Birthday(Dictionary<string, object> AnythingMap) => new Birthday { AnythingMap = AnythingMap };
        public static implicit operator Birthday(string String) => new Birthday { String = String };
        public bool IsNull => AnythingMap == null && String == null;
    }

    public partial struct Value
    {
        public Dictionary<string, object> AnythingMap;
        public double? Double;
        public string String;

        public static implicit operator Value(Dictionary<string, object> AnythingMap) => new Value { AnythingMap = AnythingMap };
        public static implicit operator Value(double Double) => new Value { Double = Double };
        public static implicit operator Value(string String) => new Value { String = String };
        public bool IsNull => Double == null && AnythingMap == null && String == null;
    }

    /// <summary>
    /// данные, передаваемые в ответ
    /// </summary>
    public partial struct AppointmentElement
    {
        public List<object> AnythingArray;
        public AppointmentSchema AppointmentSchema;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public string String;

        public static implicit operator AppointmentElement(List<object> AnythingArray) => new AppointmentElement { AnythingArray = AnythingArray };
        public static implicit operator AppointmentElement(AppointmentSchema AppointmentSchema) => new AppointmentElement { AppointmentSchema = AppointmentSchema };
        public static implicit operator AppointmentElement(bool Bool) => new AppointmentElement { Bool = Bool };
        public static implicit operator AppointmentElement(double Double) => new AppointmentElement { Double = Double };
        public static implicit operator AppointmentElement(long Integer) => new AppointmentElement { Integer = Integer };
        public static implicit operator AppointmentElement(string String) => new AppointmentElement { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && AppointmentSchema == null && Double == null && Integer == null && String == null;
    }

    public partial struct ResourceId
    {
        public string String;
        public List<string> StringArray;

        public static implicit operator ResourceId(string String) => new ResourceId { String = String };
        public static implicit operator ResourceId(List<string> StringArray) => new ResourceId { StringArray = StringArray };
    }

    public partial struct AdditionalFields
    {
        public AdditionalFieldsClass AdditionalFieldsClass;
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public string String;

        public static implicit operator AdditionalFields(AdditionalFieldsClass AdditionalFieldsClass) => new AdditionalFields { AdditionalFieldsClass = AdditionalFieldsClass };
        public static implicit operator AdditionalFields(List<object> AnythingArray) => new AdditionalFields { AnythingArray = AnythingArray };
        public static implicit operator AdditionalFields(bool Bool) => new AdditionalFields { Bool = Bool };
        public static implicit operator AdditionalFields(double Double) => new AdditionalFields { Double = Double };
        public static implicit operator AdditionalFields(long Integer) => new AdditionalFields { Integer = Integer };
        public static implicit operator AdditionalFields(string String) => new AdditionalFields { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && AdditionalFieldsClass == null && Double == null && Integer == null && String == null;
    }

    public partial struct AddressElement
    {
        public AddressClass AddressClass;
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public string String;

        public static implicit operator AddressElement(AddressClass AddressClass) => new AddressElement { AddressClass = AddressClass };
        public static implicit operator AddressElement(List<object> AnythingArray) => new AddressElement { AnythingArray = AnythingArray };
        public static implicit operator AddressElement(bool Bool) => new AddressElement { Bool = Bool };
        public static implicit operator AddressElement(double Double) => new AddressElement { Double = Double };
        public static implicit operator AddressElement(long Integer) => new AddressElement { Integer = Integer };
        public static implicit operator AddressElement(string String) => new AddressElement { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && AddressClass == null && Double == null && Integer == null && String == null;
    }

    public partial struct Phone
    {
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public PhoneClass PhoneClass;
        public string String;

        public static implicit operator Phone(List<object> AnythingArray) => new Phone { AnythingArray = AnythingArray };
        public static implicit operator Phone(bool Bool) => new Phone { Bool = Bool };
        public static implicit operator Phone(double Double) => new Phone { Double = Double };
        public static implicit operator Phone(long Integer) => new Phone { Integer = Integer };
        public static implicit operator Phone(PhoneClass PhoneClass) => new Phone { PhoneClass = PhoneClass };
        public static implicit operator Phone(string String) => new Phone { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && PhoneClass == null && Double == null && Integer == null && String == null;
    }

    public partial struct TimeFrameDate
    {
        public DateTimeOffset? DateTime;
        public double? Double;

        public static implicit operator TimeFrameDate(DateTimeOffset DateTime) => new TimeFrameDate { DateTime = DateTime };
        public static implicit operator TimeFrameDate(double Double) => new TimeFrameDate { Double = Double };
    }

    /// <summary>
    /// вес работника, в зависимости от указанного способа сортировки
    /// </summary>
    public partial struct OrderWeight
    {
        public double? Double;
        public string String;

        public static implicit operator OrderWeight(double Double) => new OrderWeight { Double = Double };
        public static implicit operator OrderWeight(string String) => new OrderWeight { String = String };
        public bool IsNull => Double == null && String == null;
    }

    /// <summary>
    /// Данные о работнике бизнеса
    /// </summary>
    public partial struct Resource
    {
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public ResourceClass ResourceClass;
        public string String;

        public static implicit operator Resource(List<object> AnythingArray) => new Resource { AnythingArray = AnythingArray };
        public static implicit operator Resource(bool Bool) => new Resource { Bool = Bool };
        public static implicit operator Resource(double Double) => new Resource { Double = Double };
        public static implicit operator Resource(long Integer) => new Resource { Integer = Integer };
        public static implicit operator Resource(ResourceClass ResourceClass) => new Resource { ResourceClass = ResourceClass };
        public static implicit operator Resource(string String) => new Resource { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && ResourceClass == null && Double == null && Integer == null && String == null;
    }

    /// <summary>
    /// Информация о скидке
    /// </summary>
    public partial struct Discount
    {
        public List<object> AnythingArray;
        public bool? Bool;
        public DiscountClass DiscountClass;
        public double? Double;
        public long? Integer;
        public string String;

        public static implicit operator Discount(List<object> AnythingArray) => new Discount { AnythingArray = AnythingArray };
        public static implicit operator Discount(bool Bool) => new Discount { Bool = Bool };
        public static implicit operator Discount(DiscountClass DiscountClass) => new Discount { DiscountClass = DiscountClass };
        public static implicit operator Discount(double Double) => new Discount { Double = Double };
        public static implicit operator Discount(long Integer) => new Discount { Integer = Integer };
        public static implicit operator Discount(string String) => new Discount { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && DiscountClass == null && Double == null && Integer == null && String == null;
    }

    public partial struct BusinessBusiness
    {
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public IndigoBusiness IndigoBusiness;
        public long? Integer;
        public string String;

        public static implicit operator BusinessBusiness(List<object> AnythingArray) => new BusinessBusiness { AnythingArray = AnythingArray };
        public static implicit operator BusinessBusiness(bool Bool) => new BusinessBusiness { Bool = Bool };
        public static implicit operator BusinessBusiness(double Double) => new BusinessBusiness { Double = Double };
        public static implicit operator BusinessBusiness(IndigoBusiness IndigoBusiness) => new BusinessBusiness { IndigoBusiness = IndigoBusiness };
        public static implicit operator BusinessBusiness(long Integer) => new BusinessBusiness { Integer = Integer };
        public static implicit operator BusinessBusiness(string String) => new BusinessBusiness { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && IndigoBusiness == null && Double == null && Integer == null && String == null;
    }

    public partial struct ResultBusiness
    {
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public HilariousBusiness HilariousBusiness;
        public long? Integer;
        public string String;

        public static implicit operator ResultBusiness(List<object> AnythingArray) => new ResultBusiness { AnythingArray = AnythingArray };
        public static implicit operator ResultBusiness(bool Bool) => new ResultBusiness { Bool = Bool };
        public static implicit operator ResultBusiness(double Double) => new ResultBusiness { Double = Double };
        public static implicit operator ResultBusiness(HilariousBusiness HilariousBusiness) => new ResultBusiness { HilariousBusiness = HilariousBusiness };
        public static implicit operator ResultBusiness(long Integer) => new ResultBusiness { Integer = Integer };
        public static implicit operator ResultBusiness(string String) => new ResultBusiness { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && HilariousBusiness == null && Double == null && Integer == null && String == null;
    }

    public partial struct Address
    {
        public AddressCamelCaseSchema AddressCamelCaseSchema;
        public List<object> AnythingArray;
        public bool? Bool;
        public double? Double;
        public long? Integer;
        public string String;

        public static implicit operator Address(AddressCamelCaseSchema AddressCamelCaseSchema) => new Address { AddressCamelCaseSchema = AddressCamelCaseSchema };
        public static implicit operator Address(List<object> AnythingArray) => new Address { AnythingArray = AnythingArray };
        public static implicit operator Address(bool Bool) => new Address { Bool = Bool };
        public static implicit operator Address(double Double) => new Address { Double = Double };
        public static implicit operator Address(long Integer) => new Address { Integer = Integer };
        public static implicit operator Address(string String) => new Address { String = String };
        public bool IsNull => AnythingArray == null && Bool == null && AddressCamelCaseSchema == null && Double == null && Integer == null && String == null;
    }

    public partial struct FromSms
    {
        public bool? Bool;
        public string String;

        public static implicit operator FromSms(bool Bool) => new FromSms { Bool = Bool };
        public static implicit operator FromSms(string String) => new FromSms { String = String };
    }

    public partial class GBookingCoreV2
    {
        public static GBookingCoreV2 FromJson(string json) => JsonConvert.DeserializeObject<GBookingCoreV2>(json, GBookingCoreV2.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GBookingCoreV2 self) => JsonConvert.SerializeObject(self, GBookingCoreV2.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ErrorResponseConverter.Singleton,
                RequestConverter.Singleton,
                BackofficeIdUnionConverter.Singleton,
                ParamsUnionConverter.Singleton,
                SuccessResponseConverter.Singleton,
                AppointmentElementConverter.Singleton,
                AppointmentClientAppearConverter.Singleton,
                AppointmentClientPaymentConverter.Singleton,
                AppointmentStatusConverter.Singleton,
                BirthdayConverter.Singleton,
                ComplaintStatusConverter.Singleton,
                ValueConverter.Singleton,
                SexConverter.Singleton,
                AdditionalFieldTypeConverter.Singleton,
                DrinkAnswerConverter.Singleton,
                DiscountProviderConverter.Singleton,
                CurrencyListConverter.Singleton,
                TalkAnswerConverter.Singleton,
                ReminderStatusConverter.Singleton,
                DirConverter.Singleton,
                SortFieldConverter.Singleton,
                ResourceIdConverter.Singleton,
                BusinessBusinessConverter.Singleton,
                AppointmentExtensionTypeConverter.Singleton,
                FeedBackMinRatingConverter.Singleton,
                PurplePaymentProviderConverter.Singleton,
                ResourceTimetableTypeConverter.Singleton,
                SchedulerWeekViewTypeConverter.Singleton,
                BackofficeTypeConverter.Singleton,
                AdditionalFieldsConverter.Singleton,
                AddressElementConverter.Singleton,
                CountryConverter.Singleton,
                PhoneConverter.Singleton,
                LanguageListConverter.Singleton,
                PaymentMethodsConverter.Singleton,
                PricingTypeConverter.Singleton,
                SocialNetworkConverter.Singleton,
                TimeFrameDateConverter.Singleton,
                VerticalTranslationConverter.Singleton,
                GroupConverter.Singleton,
                FieldElementConverter.Singleton,
                ResourceConverter.Singleton,
                StartPeriodConverter.Singleton,
                OrderWeightConverter.Singleton,
                AccessTypeConverter.Singleton,
                ResourceStatusConverter.Singleton,
                AdditionalPriceTypeConverter.Singleton,
                ChildrenTaxonomyTypeConverter.Singleton,
                DateLimitTypeConverter.Singleton,
                DiscountConverter.Singleton,
                DaysOfWeekConverter.Singleton,
                RepeatsConverter.Singleton,
                OnlineModeConverter.Singleton,
                TaxonomyTypeConverter.Singleton,
                CracServerConverter.Singleton,
                RuleConverter.Singleton,
                PaymentConverter.Singleton,
                DiscountTypeConverter.Singleton,
                UseDirectScheduleReadConverter.Singleton,
                WorkerSortingTypeConverter.Singleton,
                ResultBusinessConverter.Singleton,
                FluffyPaymentProviderConverter.Singleton,
                AddressConverter.Singleton,
                YandexFeedTypeConverter.Singleton,
                FromSmsConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ErrorResponseConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ErrorResponse) || t == typeof(ErrorResponse?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new ErrorResponse { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new ErrorResponse { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new ErrorResponse { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new ErrorResponse { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ErrorResponse { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ErrorResponseClass>(reader);
                    return new ErrorResponse { ErrorResponseClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new ErrorResponse { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ErrorResponse");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ErrorResponse)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.ErrorResponseClass != null)
            {
                serializer.Serialize(writer, value.ErrorResponseClass);
                return;
            }
            throw new Exception("Cannot marshal type ErrorResponse");
        }

        public static readonly ErrorResponseConverter Singleton = new ErrorResponseConverter();
    }

    internal class RequestConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Request) || t == typeof(Request?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new Request { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Request { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Request { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Request { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Request { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<RequestClass>(reader);
                    return new Request { RequestClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new Request { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Request");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Request)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.RequestClass != null)
            {
                serializer.Serialize(writer, value.RequestClass);
                return;
            }
            throw new Exception("Cannot marshal type Request");
        }

        public static readonly RequestConverter Singleton = new RequestConverter();
    }

    internal class BackofficeIdUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BackofficeIdUnion) || t == typeof(BackofficeIdUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new BackofficeIdUnion { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new BackofficeIdUnion { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type BackofficeIdUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (BackofficeIdUnion)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type BackofficeIdUnion");
        }

        public static readonly BackofficeIdUnionConverter Singleton = new BackofficeIdUnionConverter();
    }

    internal class ParamsUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParamsUnion) || t == typeof(ParamsUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Dictionary<string, object>>(reader);
                    return new ParamsUnion { AnythingMap = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new ParamsUnion { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ParamsUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ParamsUnion)untypedValue;
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.AnythingMap != null)
            {
                serializer.Serialize(writer, value.AnythingMap);
                return;
            }
            throw new Exception("Cannot marshal type ParamsUnion");
        }

        public static readonly ParamsUnionConverter Singleton = new ParamsUnionConverter();
    }

    internal class SuccessResponseConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SuccessResponse) || t == typeof(SuccessResponse?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new SuccessResponse { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new SuccessResponse { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new SuccessResponse { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new SuccessResponse { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new SuccessResponse { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<SuccessResponseClass>(reader);
                    return new SuccessResponse { SuccessResponseClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new SuccessResponse { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type SuccessResponse");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SuccessResponse)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.SuccessResponseClass != null)
            {
                serializer.Serialize(writer, value.SuccessResponseClass);
                return;
            }
            throw new Exception("Cannot marshal type SuccessResponse");
        }

        public static readonly SuccessResponseConverter Singleton = new SuccessResponseConverter();
    }

    internal class AppointmentElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AppointmentElement) || t == typeof(AppointmentElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new AppointmentElement { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new AppointmentElement { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new AppointmentElement { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new AppointmentElement { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new AppointmentElement { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<AppointmentSchema>(reader);
                    return new AppointmentElement { AppointmentSchema = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new AppointmentElement { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type AppointmentElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AppointmentElement)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.AppointmentSchema != null)
            {
                serializer.Serialize(writer, value.AppointmentSchema);
                return;
            }
            throw new Exception("Cannot marshal type AppointmentElement");
        }

        public static readonly AppointmentElementConverter Singleton = new AppointmentElementConverter();
    }

    internal class AppointmentClientAppearConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AppointmentClientAppear) || t == typeof(AppointmentClientAppear?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "NONE":
                    return AppointmentClientAppear.None;
                case "NO_APPEAR":
                    return AppointmentClientAppear.NoAppear;
                case "YES_APPEAR":
                    return AppointmentClientAppear.YesAppear;
            }
            throw new Exception("Cannot unmarshal type AppointmentClientAppear");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AppointmentClientAppear)untypedValue;
            switch (value)
            {
                case AppointmentClientAppear.None:
                    serializer.Serialize(writer, "NONE");
                    return;
                case AppointmentClientAppear.NoAppear:
                    serializer.Serialize(writer, "NO_APPEAR");
                    return;
                case AppointmentClientAppear.YesAppear:
                    serializer.Serialize(writer, "YES_APPEAR");
                    return;
            }
            throw new Exception("Cannot marshal type AppointmentClientAppear");
        }

        public static readonly AppointmentClientAppearConverter Singleton = new AppointmentClientAppearConverter();
    }

    internal class AppointmentClientPaymentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AppointmentClientPayment) || t == typeof(AppointmentClientPayment?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "NONE":
                    return AppointmentClientPayment.None;
                case "NO_PAYMENT":
                    return AppointmentClientPayment.NoPayment;
                case "YES_PAYED_FULL":
                    return AppointmentClientPayment.YesPayedFull;
                case "YES_PAYED_ONLINE":
                    return AppointmentClientPayment.YesPayedOnline;
                case "YES_PAYED_PART":
                    return AppointmentClientPayment.YesPayedPart;
            }
            throw new Exception("Cannot unmarshal type AppointmentClientPayment");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AppointmentClientPayment)untypedValue;
            switch (value)
            {
                case AppointmentClientPayment.None:
                    serializer.Serialize(writer, "NONE");
                    return;
                case AppointmentClientPayment.NoPayment:
                    serializer.Serialize(writer, "NO_PAYMENT");
                    return;
                case AppointmentClientPayment.YesPayedFull:
                    serializer.Serialize(writer, "YES_PAYED_FULL");
                    return;
                case AppointmentClientPayment.YesPayedOnline:
                    serializer.Serialize(writer, "YES_PAYED_ONLINE");
                    return;
                case AppointmentClientPayment.YesPayedPart:
                    serializer.Serialize(writer, "YES_PAYED_PART");
                    return;
            }
            throw new Exception("Cannot marshal type AppointmentClientPayment");
        }

        public static readonly AppointmentClientPaymentConverter Singleton = new AppointmentClientPaymentConverter();
    }

    internal class AppointmentStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AppointmentStatus) || t == typeof(AppointmentStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ACTIVE":
                    return AppointmentStatus.Active;
                case "CANCELLED_BY_ADMIN":
                    return AppointmentStatus.CancelledByAdmin;
                case "CANCELLED_BY_BUSINESS":
                    return AppointmentStatus.CancelledByBusiness;
                case "CANCELLED_BY_CLIENT":
                    return AppointmentStatus.CancelledByClient;
                case "CONFIRMED_BY_ADMIN":
                    return AppointmentStatus.ConfirmedByAdmin;
                case "CONFIRMED_BY_BUSINESS":
                    return AppointmentStatus.ConfirmedByBusiness;
                case "CONFIRMED_BY_CLIENT":
                    return AppointmentStatus.ConfirmedByClient;
                case "CONFIRMED_MOVED":
                    return AppointmentStatus.ConfirmedMoved;
                case "DENIED":
                    return AppointmentStatus.Denied;
                case "DONE":
                    return AppointmentStatus.Done;
                case "TENTATIVE":
                    return AppointmentStatus.Tentative;
                case "TIMED_OUT":
                    return AppointmentStatus.TimedOut;
            }
            throw new Exception("Cannot unmarshal type AppointmentStatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AppointmentStatus)untypedValue;
            switch (value)
            {
                case AppointmentStatus.Active:
                    serializer.Serialize(writer, "ACTIVE");
                    return;
                case AppointmentStatus.CancelledByAdmin:
                    serializer.Serialize(writer, "CANCELLED_BY_ADMIN");
                    return;
                case AppointmentStatus.CancelledByBusiness:
                    serializer.Serialize(writer, "CANCELLED_BY_BUSINESS");
                    return;
                case AppointmentStatus.CancelledByClient:
                    serializer.Serialize(writer, "CANCELLED_BY_CLIENT");
                    return;
                case AppointmentStatus.ConfirmedByAdmin:
                    serializer.Serialize(writer, "CONFIRMED_BY_ADMIN");
                    return;
                case AppointmentStatus.ConfirmedByBusiness:
                    serializer.Serialize(writer, "CONFIRMED_BY_BUSINESS");
                    return;
                case AppointmentStatus.ConfirmedByClient:
                    serializer.Serialize(writer, "CONFIRMED_BY_CLIENT");
                    return;
                case AppointmentStatus.ConfirmedMoved:
                    serializer.Serialize(writer, "CONFIRMED_MOVED");
                    return;
                case AppointmentStatus.Denied:
                    serializer.Serialize(writer, "DENIED");
                    return;
                case AppointmentStatus.Done:
                    serializer.Serialize(writer, "DONE");
                    return;
                case AppointmentStatus.Tentative:
                    serializer.Serialize(writer, "TENTATIVE");
                    return;
                case AppointmentStatus.TimedOut:
                    serializer.Serialize(writer, "TIMED_OUT");
                    return;
            }
            throw new Exception("Cannot marshal type AppointmentStatus");
        }

        public static readonly AppointmentStatusConverter Singleton = new AppointmentStatusConverter();
    }

    internal class BirthdayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Birthday) || t == typeof(Birthday?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new Birthday { };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Birthday { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Dictionary<string, object>>(reader);
                    return new Birthday { AnythingMap = objectValue };
            }
            throw new Exception("Cannot unmarshal type Birthday");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Birthday)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingMap != null)
            {
                serializer.Serialize(writer, value.AnythingMap);
                return;
            }
            throw new Exception("Cannot marshal type Birthday");
        }

        public static readonly BirthdayConverter Singleton = new BirthdayConverter();
    }

    internal class ComplaintStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ComplaintStatus) || t == typeof(ComplaintStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CHECKING":
                    return ComplaintStatus.Checking;
                case "CLOSED":
                    return ComplaintStatus.Closed;
                case "ENTERED":
                    return ComplaintStatus.Entered;
                case "INVALID":
                    return ComplaintStatus.Invalid;
                case "INVESTIGATION":
                    return ComplaintStatus.Investigation;
                case "NOT_ENTERED":
                    return ComplaintStatus.NotEntered;
            }
            throw new Exception("Cannot unmarshal type ComplaintStatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ComplaintStatus)untypedValue;
            switch (value)
            {
                case ComplaintStatus.Checking:
                    serializer.Serialize(writer, "CHECKING");
                    return;
                case ComplaintStatus.Closed:
                    serializer.Serialize(writer, "CLOSED");
                    return;
                case ComplaintStatus.Entered:
                    serializer.Serialize(writer, "ENTERED");
                    return;
                case ComplaintStatus.Invalid:
                    serializer.Serialize(writer, "INVALID");
                    return;
                case ComplaintStatus.Investigation:
                    serializer.Serialize(writer, "INVESTIGATION");
                    return;
                case ComplaintStatus.NotEntered:
                    serializer.Serialize(writer, "NOT_ENTERED");
                    return;
            }
            throw new Exception("Cannot marshal type ComplaintStatus");
        }

        public static readonly ComplaintStatusConverter Singleton = new ComplaintStatusConverter();
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new Value { };
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Value { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Value { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Dictionary<string, object>>(reader);
                    return new Value { AnythingMap = objectValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingMap != null)
            {
                serializer.Serialize(writer, value.AnythingMap);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }

    internal class SexConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Sex) || t == typeof(Sex?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Sex.Empty;
                case "FEMALE":
                    return Sex.Female;
                case "MALE":
                    return Sex.Male;
                case "NOT_SPECIFIED":
                    return Sex.NotSpecified;
            }
            throw new Exception("Cannot unmarshal type Sex");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Sex)untypedValue;
            switch (value)
            {
                case Sex.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Sex.Female:
                    serializer.Serialize(writer, "FEMALE");
                    return;
                case Sex.Male:
                    serializer.Serialize(writer, "MALE");
                    return;
                case Sex.NotSpecified:
                    serializer.Serialize(writer, "NOT_SPECIFIED");
                    return;
            }
            throw new Exception("Cannot marshal type Sex");
        }

        public static readonly SexConverter Singleton = new SexConverter();
    }

    internal class AdditionalFieldTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AdditionalFieldType) || t == typeof(AdditionalFieldType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BOOL":
                    return AdditionalFieldType.Bool;
                case "COUPON":
                    return AdditionalFieldType.Coupon;
                case "FILE":
                    return AdditionalFieldType.File;
                case "RADIO":
                    return AdditionalFieldType.Radio;
                case "STRING":
                    return AdditionalFieldType.String;
            }
            throw new Exception("Cannot unmarshal type AdditionalFieldType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AdditionalFieldType)untypedValue;
            switch (value)
            {
                case AdditionalFieldType.Bool:
                    serializer.Serialize(writer, "BOOL");
                    return;
                case AdditionalFieldType.Coupon:
                    serializer.Serialize(writer, "COUPON");
                    return;
                case AdditionalFieldType.File:
                    serializer.Serialize(writer, "FILE");
                    return;
                case AdditionalFieldType.Radio:
                    serializer.Serialize(writer, "RADIO");
                    return;
                case AdditionalFieldType.String:
                    serializer.Serialize(writer, "STRING");
                    return;
            }
            throw new Exception("Cannot marshal type AdditionalFieldType");
        }

        public static readonly AdditionalFieldTypeConverter Singleton = new AdditionalFieldTypeConverter();
    }

    internal class DrinkAnswerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DrinkAnswer) || t == typeof(DrinkAnswer?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "COFFEE":
                    return DrinkAnswer.Coffee;
                case "NOT_IMPORTANT":
                    return DrinkAnswer.NotImportant;
                case "TEA":
                    return DrinkAnswer.Tea;
            }
            throw new Exception("Cannot unmarshal type DrinkAnswer");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DrinkAnswer)untypedValue;
            switch (value)
            {
                case DrinkAnswer.Coffee:
                    serializer.Serialize(writer, "COFFEE");
                    return;
                case DrinkAnswer.NotImportant:
                    serializer.Serialize(writer, "NOT_IMPORTANT");
                    return;
                case DrinkAnswer.Tea:
                    serializer.Serialize(writer, "TEA");
                    return;
            }
            throw new Exception("Cannot marshal type DrinkAnswer");
        }

        public static readonly DrinkAnswerConverter Singleton = new DrinkAnswerConverter();
    }

    internal class DiscountProviderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DiscountProvider) || t == typeof(DiscountProvider?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "GROUPON":
                    return DiscountProvider.Groupon;
                case "LOCAL":
                    return DiscountProvider.Local;
                case "YANDEX":
                    return DiscountProvider.Yandex;
            }
            throw new Exception("Cannot unmarshal type DiscountProvider");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DiscountProvider)untypedValue;
            switch (value)
            {
                case DiscountProvider.Groupon:
                    serializer.Serialize(writer, "GROUPON");
                    return;
                case DiscountProvider.Local:
                    serializer.Serialize(writer, "LOCAL");
                    return;
                case DiscountProvider.Yandex:
                    serializer.Serialize(writer, "YANDEX");
                    return;
            }
            throw new Exception("Cannot marshal type DiscountProvider");
        }

        public static readonly DiscountProviderConverter Singleton = new DiscountProviderConverter();
    }

    internal class CurrencyListConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CurrencyList) || t == typeof(CurrencyList?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CNY":
                    return CurrencyList.Cny;
                case "EUR":
                    return CurrencyList.Eur;
                case "GBP":
                    return CurrencyList.Gbp;
                case "HUF":
                    return CurrencyList.Huf;
                case "ILS":
                    return CurrencyList.Ils;
                case "KZT":
                    return CurrencyList.Kzt;
                case "RUB":
                    return CurrencyList.Rub;
                case "UAH":
                    return CurrencyList.Uah;
                case "USD":
                    return CurrencyList.Usd;
                case "UZS":
                    return CurrencyList.Uzs;
            }
            throw new Exception("Cannot unmarshal type CurrencyList");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CurrencyList)untypedValue;
            switch (value)
            {
                case CurrencyList.Cny:
                    serializer.Serialize(writer, "CNY");
                    return;
                case CurrencyList.Eur:
                    serializer.Serialize(writer, "EUR");
                    return;
                case CurrencyList.Gbp:
                    serializer.Serialize(writer, "GBP");
                    return;
                case CurrencyList.Huf:
                    serializer.Serialize(writer, "HUF");
                    return;
                case CurrencyList.Ils:
                    serializer.Serialize(writer, "ILS");
                    return;
                case CurrencyList.Kzt:
                    serializer.Serialize(writer, "KZT");
                    return;
                case CurrencyList.Rub:
                    serializer.Serialize(writer, "RUB");
                    return;
                case CurrencyList.Uah:
                    serializer.Serialize(writer, "UAH");
                    return;
                case CurrencyList.Usd:
                    serializer.Serialize(writer, "USD");
                    return;
                case CurrencyList.Uzs:
                    serializer.Serialize(writer, "UZS");
                    return;
            }
            throw new Exception("Cannot marshal type CurrencyList");
        }

        public static readonly CurrencyListConverter Singleton = new CurrencyListConverter();
    }

    internal class TalkAnswerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TalkAnswer) || t == typeof(TalkAnswer?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "NOT_IMPORTANT":
                    return TalkAnswer.NotImportant;
                case "NOT_TALK":
                    return TalkAnswer.NotTalk;
                case "TALK":
                    return TalkAnswer.Talk;
            }
            throw new Exception("Cannot unmarshal type TalkAnswer");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TalkAnswer)untypedValue;
            switch (value)
            {
                case TalkAnswer.NotImportant:
                    serializer.Serialize(writer, "NOT_IMPORTANT");
                    return;
                case TalkAnswer.NotTalk:
                    serializer.Serialize(writer, "NOT_TALK");
                    return;
                case TalkAnswer.Talk:
                    serializer.Serialize(writer, "TALK");
                    return;
            }
            throw new Exception("Cannot marshal type TalkAnswer");
        }

        public static readonly TalkAnswerConverter Singleton = new TalkAnswerConverter();
    }

    internal class ReminderStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ReminderStatus) || t == typeof(ReminderStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "NOT_SET":
                    return ReminderStatus.NotSet;
                case "OFF":
                    return ReminderStatus.Off;
                case "ON":
                    return ReminderStatus.On;
            }
            throw new Exception("Cannot unmarshal type ReminderStatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ReminderStatus)untypedValue;
            switch (value)
            {
                case ReminderStatus.NotSet:
                    serializer.Serialize(writer, "NOT_SET");
                    return;
                case ReminderStatus.Off:
                    serializer.Serialize(writer, "OFF");
                    return;
                case ReminderStatus.On:
                    serializer.Serialize(writer, "ON");
                    return;
            }
            throw new Exception("Cannot marshal type ReminderStatus");
        }

        public static readonly ReminderStatusConverter Singleton = new ReminderStatusConverter();
    }

    internal class DirConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Dir) || t == typeof(Dir?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "asc":
                    return Dir.Asc;
                case "desc":
                    return Dir.Desc;
            }
            throw new Exception("Cannot unmarshal type Dir");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Dir)untypedValue;
            switch (value)
            {
                case Dir.Asc:
                    serializer.Serialize(writer, "asc");
                    return;
                case Dir.Desc:
                    serializer.Serialize(writer, "desc");
                    return;
            }
            throw new Exception("Cannot marshal type Dir");
        }

        public static readonly DirConverter Singleton = new DirConverter();
    }

    internal class SortFieldConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SortField) || t == typeof(SortField?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "created":
                    return SortField.Created;
                case "start":
                    return SortField.Start;
            }
            throw new Exception("Cannot unmarshal type SortField");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SortField)untypedValue;
            switch (value)
            {
                case SortField.Created:
                    serializer.Serialize(writer, "created");
                    return;
                case SortField.Start:
                    serializer.Serialize(writer, "start");
                    return;
            }
            throw new Exception("Cannot marshal type SortField");
        }

        public static readonly SortFieldConverter Singleton = new SortFieldConverter();
    }

    internal class ResourceIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResourceId) || t == typeof(ResourceId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ResourceId { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new ResourceId { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ResourceId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ResourceId)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            throw new Exception("Cannot marshal type ResourceId");
        }

        public static readonly ResourceIdConverter Singleton = new ResourceIdConverter();
    }

    internal class BusinessBusinessConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BusinessBusiness) || t == typeof(BusinessBusiness?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new BusinessBusiness { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new BusinessBusiness { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new BusinessBusiness { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new BusinessBusiness { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new BusinessBusiness { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<IndigoBusiness>(reader);
                    return new BusinessBusiness { IndigoBusiness = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new BusinessBusiness { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type BusinessBusiness");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (BusinessBusiness)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.IndigoBusiness != null)
            {
                serializer.Serialize(writer, value.IndigoBusiness);
                return;
            }
            throw new Exception("Cannot marshal type BusinessBusiness");
        }

        public static readonly BusinessBusinessConverter Singleton = new BusinessBusinessConverter();
    }

    internal class AppointmentExtensionTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AppointmentExtensionType) || t == typeof(AppointmentExtensionType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "MINUTES":
                    return AppointmentExtensionType.Minutes;
                case "PERCENT":
                    return AppointmentExtensionType.Percent;
            }
            throw new Exception("Cannot unmarshal type AppointmentExtensionType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AppointmentExtensionType)untypedValue;
            switch (value)
            {
                case AppointmentExtensionType.Minutes:
                    serializer.Serialize(writer, "MINUTES");
                    return;
                case AppointmentExtensionType.Percent:
                    serializer.Serialize(writer, "PERCENT");
                    return;
            }
            throw new Exception("Cannot marshal type AppointmentExtensionType");
        }

        public static readonly AppointmentExtensionTypeConverter Singleton = new AppointmentExtensionTypeConverter();
    }

    internal class FeedBackMinRatingConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FeedBackMinRating) || t == typeof(FeedBackMinRating?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1":
                    return FeedBackMinRating.The1;
                case "2":
                    return FeedBackMinRating.The2;
                case "3":
                    return FeedBackMinRating.The3;
                case "4":
                    return FeedBackMinRating.The4;
                case "5":
                    return FeedBackMinRating.The5;
            }
            throw new Exception("Cannot unmarshal type FeedBackMinRating");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FeedBackMinRating)untypedValue;
            switch (value)
            {
                case FeedBackMinRating.The1:
                    serializer.Serialize(writer, "1");
                    return;
                case FeedBackMinRating.The2:
                    serializer.Serialize(writer, "2");
                    return;
                case FeedBackMinRating.The3:
                    serializer.Serialize(writer, "3");
                    return;
                case FeedBackMinRating.The4:
                    serializer.Serialize(writer, "4");
                    return;
                case FeedBackMinRating.The5:
                    serializer.Serialize(writer, "5");
                    return;
            }
            throw new Exception("Cannot marshal type FeedBackMinRating");
        }

        public static readonly FeedBackMinRatingConverter Singleton = new FeedBackMinRatingConverter();
    }

    internal class PurplePaymentProviderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PurplePaymentProvider) || t == typeof(PurplePaymentProvider?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DISABLE":
                    return PurplePaymentProvider.Disable;
                case "deltaProcessing":
                    return PurplePaymentProvider.DeltaProcessing;
                case "yandexMoney":
                    return PurplePaymentProvider.YandexMoney;
            }
            throw new Exception("Cannot unmarshal type PurplePaymentProvider");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PurplePaymentProvider)untypedValue;
            switch (value)
            {
                case PurplePaymentProvider.Disable:
                    serializer.Serialize(writer, "DISABLE");
                    return;
                case PurplePaymentProvider.DeltaProcessing:
                    serializer.Serialize(writer, "deltaProcessing");
                    return;
                case PurplePaymentProvider.YandexMoney:
                    serializer.Serialize(writer, "yandexMoney");
                    return;
            }
            throw new Exception("Cannot marshal type PurplePaymentProvider");
        }

        public static readonly PurplePaymentProviderConverter Singleton = new PurplePaymentProviderConverter();
    }

    internal class ResourceTimetableTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResourceTimetableType) || t == typeof(ResourceTimetableType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DEFAULT":
                    return ResourceTimetableType.Default;
                case "EVENODD":
                    return ResourceTimetableType.Evenodd;
            }
            throw new Exception("Cannot unmarshal type ResourceTimetableType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ResourceTimetableType)untypedValue;
            switch (value)
            {
                case ResourceTimetableType.Default:
                    serializer.Serialize(writer, "DEFAULT");
                    return;
                case ResourceTimetableType.Evenodd:
                    serializer.Serialize(writer, "EVENODD");
                    return;
            }
            throw new Exception("Cannot marshal type ResourceTimetableType");
        }

        public static readonly ResourceTimetableTypeConverter Singleton = new ResourceTimetableTypeConverter();
    }

    internal class SchedulerWeekViewTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SchedulerWeekViewType) || t == typeof(SchedulerWeekViewType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "week":
                    return SchedulerWeekViewType.Week;
                case "workWeek":
                    return SchedulerWeekViewType.WorkWeek;
            }
            throw new Exception("Cannot unmarshal type SchedulerWeekViewType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SchedulerWeekViewType)untypedValue;
            switch (value)
            {
                case SchedulerWeekViewType.Week:
                    serializer.Serialize(writer, "week");
                    return;
                case SchedulerWeekViewType.WorkWeek:
                    serializer.Serialize(writer, "workWeek");
                    return;
            }
            throw new Exception("Cannot marshal type SchedulerWeekViewType");
        }

        public static readonly SchedulerWeekViewTypeConverter Singleton = new SchedulerWeekViewTypeConverter();
    }

    internal class BackofficeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BackofficeType) || t == typeof(BackofficeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "COMMON":
                    return BackofficeType.Common;
                case "GT":
                    return BackofficeType.Gt;
                case "LL":
                    return BackofficeType.Ll;
                case "MB":
                    return BackofficeType.Mb;
                case "MU":
                    return BackofficeType.Mu;
            }
            throw new Exception("Cannot unmarshal type BackofficeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BackofficeType)untypedValue;
            switch (value)
            {
                case BackofficeType.Common:
                    serializer.Serialize(writer, "COMMON");
                    return;
                case BackofficeType.Gt:
                    serializer.Serialize(writer, "GT");
                    return;
                case BackofficeType.Ll:
                    serializer.Serialize(writer, "LL");
                    return;
                case BackofficeType.Mb:
                    serializer.Serialize(writer, "MB");
                    return;
                case BackofficeType.Mu:
                    serializer.Serialize(writer, "MU");
                    return;
            }
            throw new Exception("Cannot marshal type BackofficeType");
        }

        public static readonly BackofficeTypeConverter Singleton = new BackofficeTypeConverter();
    }

    internal class AdditionalFieldsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AdditionalFields) || t == typeof(AdditionalFields?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new AdditionalFields { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new AdditionalFields { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new AdditionalFields { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new AdditionalFields { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new AdditionalFields { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<AdditionalFieldsClass>(reader);
                    return new AdditionalFields { AdditionalFieldsClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new AdditionalFields { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type AdditionalFields");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AdditionalFields)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.AdditionalFieldsClass != null)
            {
                serializer.Serialize(writer, value.AdditionalFieldsClass);
                return;
            }
            throw new Exception("Cannot marshal type AdditionalFields");
        }

        public static readonly AdditionalFieldsConverter Singleton = new AdditionalFieldsConverter();
    }

    internal class AddressElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AddressElement) || t == typeof(AddressElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new AddressElement { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new AddressElement { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new AddressElement { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new AddressElement { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new AddressElement { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<AddressClass>(reader);
                    return new AddressElement { AddressClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new AddressElement { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type AddressElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AddressElement)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.AddressClass != null)
            {
                serializer.Serialize(writer, value.AddressClass);
                return;
            }
            throw new Exception("Cannot marshal type AddressElement");
        }

        public static readonly AddressElementConverter Singleton = new AddressElementConverter();
    }

    internal class CountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AM":
                    return Country.Am;
                case "BLR":
                    return Country.Blr;
                case "CH":
                    return Country.Ch;
                case "DE":
                    return Country.De;
                case "ES":
                    return Country.Es;
                case "FI":
                    return Country.Fi;
                case "FR":
                    return Country.Fr;
                case "GE":
                    return Country.Ge;
                case "HU":
                    return Country.Hu;
                case "IL":
                    return Country.Il;
                case "KZ":
                    return Country.Kz;
                case "LI":
                    return Country.Li;
                case "LT":
                    return Country.Lt;
                case "LV":
                    return Country.Lv;
                case "RU":
                    return Country.Ru;
                case "UA":
                    return Country.Ua;
                case "UK":
                    return Country.Uk;
                case "US":
                    return Country.Us;
                case "UZ":
                    return Country.Uz;
                case "_":
                    return Country.Empty;
            }
            throw new Exception("Cannot unmarshal type Country");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Country)untypedValue;
            switch (value)
            {
                case Country.Am:
                    serializer.Serialize(writer, "AM");
                    return;
                case Country.Blr:
                    serializer.Serialize(writer, "BLR");
                    return;
                case Country.Ch:
                    serializer.Serialize(writer, "CH");
                    return;
                case Country.De:
                    serializer.Serialize(writer, "DE");
                    return;
                case Country.Es:
                    serializer.Serialize(writer, "ES");
                    return;
                case Country.Fi:
                    serializer.Serialize(writer, "FI");
                    return;
                case Country.Fr:
                    serializer.Serialize(writer, "FR");
                    return;
                case Country.Ge:
                    serializer.Serialize(writer, "GE");
                    return;
                case Country.Hu:
                    serializer.Serialize(writer, "HU");
                    return;
                case Country.Il:
                    serializer.Serialize(writer, "IL");
                    return;
                case Country.Kz:
                    serializer.Serialize(writer, "KZ");
                    return;
                case Country.Li:
                    serializer.Serialize(writer, "LI");
                    return;
                case Country.Lt:
                    serializer.Serialize(writer, "LT");
                    return;
                case Country.Lv:
                    serializer.Serialize(writer, "LV");
                    return;
                case Country.Ru:
                    serializer.Serialize(writer, "RU");
                    return;
                case Country.Ua:
                    serializer.Serialize(writer, "UA");
                    return;
                case Country.Uk:
                    serializer.Serialize(writer, "UK");
                    return;
                case Country.Us:
                    serializer.Serialize(writer, "US");
                    return;
                case Country.Uz:
                    serializer.Serialize(writer, "UZ");
                    return;
                case Country.Empty:
                    serializer.Serialize(writer, "_");
                    return;
            }
            throw new Exception("Cannot marshal type Country");
        }

        public static readonly CountryConverter Singleton = new CountryConverter();
    }

    internal class PhoneConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Phone) || t == typeof(Phone?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new Phone { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Phone { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Phone { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Phone { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Phone { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PhoneClass>(reader);
                    return new Phone { PhoneClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new Phone { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Phone");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Phone)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.PhoneClass != null)
            {
                serializer.Serialize(writer, value.PhoneClass);
                return;
            }
            throw new Exception("Cannot marshal type Phone");
        }

        public static readonly PhoneConverter Singleton = new PhoneConverter();
    }

    internal class LanguageListConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LanguageList) || t == typeof(LanguageList?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "am-am":
                    return LanguageList.AmAm;
                case "de-de":
                    return LanguageList.DeDe;
                case "ee-ee":
                    return LanguageList.EeEe;
                case "en-us":
                    return LanguageList.EnUs;
                case "es-es":
                    return LanguageList.EsEs;
                case "fi-fi":
                    return LanguageList.FiFi;
                case "fr-fr":
                    return LanguageList.FrFr;
                case "ge-ge":
                    return LanguageList.GeGe;
                case "he-il":
                    return LanguageList.HeIl;
                case "hu-hu":
                    return LanguageList.HuHu;
                case "lt-lt":
                    return LanguageList.LtLt;
                case "lv-lv":
                    return LanguageList.LvLv;
                case "ru-ru":
                    return LanguageList.RuRu;
                case "uz-uz":
                    return LanguageList.UzUz;
                case "zh-cn":
                    return LanguageList.ZhCn;
            }
            throw new Exception("Cannot unmarshal type LanguageList");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LanguageList)untypedValue;
            switch (value)
            {
                case LanguageList.AmAm:
                    serializer.Serialize(writer, "am-am");
                    return;
                case LanguageList.DeDe:
                    serializer.Serialize(writer, "de-de");
                    return;
                case LanguageList.EeEe:
                    serializer.Serialize(writer, "ee-ee");
                    return;
                case LanguageList.EnUs:
                    serializer.Serialize(writer, "en-us");
                    return;
                case LanguageList.EsEs:
                    serializer.Serialize(writer, "es-es");
                    return;
                case LanguageList.FiFi:
                    serializer.Serialize(writer, "fi-fi");
                    return;
                case LanguageList.FrFr:
                    serializer.Serialize(writer, "fr-fr");
                    return;
                case LanguageList.GeGe:
                    serializer.Serialize(writer, "ge-ge");
                    return;
                case LanguageList.HeIl:
                    serializer.Serialize(writer, "he-il");
                    return;
                case LanguageList.HuHu:
                    serializer.Serialize(writer, "hu-hu");
                    return;
                case LanguageList.LtLt:
                    serializer.Serialize(writer, "lt-lt");
                    return;
                case LanguageList.LvLv:
                    serializer.Serialize(writer, "lv-lv");
                    return;
                case LanguageList.RuRu:
                    serializer.Serialize(writer, "ru-ru");
                    return;
                case LanguageList.UzUz:
                    serializer.Serialize(writer, "uz-uz");
                    return;
                case LanguageList.ZhCn:
                    serializer.Serialize(writer, "zh-cn");
                    return;
            }
            throw new Exception("Cannot marshal type LanguageList");
        }

        public static readonly LanguageListConverter Singleton = new LanguageListConverter();
    }

    internal class PaymentMethodsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PaymentMethods) || t == typeof(PaymentMethods?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Amex":
                    return PaymentMethods.Amex;
                case "Mastercard":
                    return PaymentMethods.Mastercard;
                case "MoneyBookers":
                    return PaymentMethods.MoneyBookers;
                case "PayPal":
                    return PaymentMethods.PayPal;
                case "Visa":
                    return PaymentMethods.Visa;
            }
            throw new Exception("Cannot unmarshal type PaymentMethods");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PaymentMethods)untypedValue;
            switch (value)
            {
                case PaymentMethods.Amex:
                    serializer.Serialize(writer, "Amex");
                    return;
                case PaymentMethods.Mastercard:
                    serializer.Serialize(writer, "Mastercard");
                    return;
                case PaymentMethods.MoneyBookers:
                    serializer.Serialize(writer, "MoneyBookers");
                    return;
                case PaymentMethods.PayPal:
                    serializer.Serialize(writer, "PayPal");
                    return;
                case PaymentMethods.Visa:
                    serializer.Serialize(writer, "Visa");
                    return;
            }
            throw new Exception("Cannot marshal type PaymentMethods");
        }

        public static readonly PaymentMethodsConverter Singleton = new PaymentMethodsConverter();
    }

    internal class PricingTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PricingType) || t == typeof(PricingType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DEFAULT":
                    return PricingType.Default;
                case "MASTER_TOPMASTER":
                    return PricingType.MasterTopmaster;
            }
            throw new Exception("Cannot unmarshal type PricingType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PricingType)untypedValue;
            switch (value)
            {
                case PricingType.Default:
                    serializer.Serialize(writer, "DEFAULT");
                    return;
                case PricingType.MasterTopmaster:
                    serializer.Serialize(writer, "MASTER_TOPMASTER");
                    return;
            }
            throw new Exception("Cannot marshal type PricingType");
        }

        public static readonly PricingTypeConverter Singleton = new PricingTypeConverter();
    }

    internal class SocialNetworkConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SocialNetwork) || t == typeof(SocialNetwork?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Facebook":
                    return SocialNetwork.Facebook;
                case "GBooking":
                    return SocialNetwork.GBooking;
                case "Google":
                    return SocialNetwork.Google;
                case "LinkedIn":
                    return SocialNetwork.LinkedIn;
                case "Mailru":
                    return SocialNetwork.Mailru;
                case "Odnoklassniki":
                    return SocialNetwork.Odnoklassniki;
                case "Twitter":
                    return SocialNetwork.Twitter;
                case "VKontakte":
                    return SocialNetwork.VKontakte;
                case "Yahoo":
                    return SocialNetwork.Yahoo;
                case "Yandex":
                    return SocialNetwork.Yandex;
            }
            throw new Exception("Cannot unmarshal type SocialNetwork");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SocialNetwork)untypedValue;
            switch (value)
            {
                case SocialNetwork.Facebook:
                    serializer.Serialize(writer, "Facebook");
                    return;
                case SocialNetwork.GBooking:
                    serializer.Serialize(writer, "GBooking");
                    return;
                case SocialNetwork.Google:
                    serializer.Serialize(writer, "Google");
                    return;
                case SocialNetwork.LinkedIn:
                    serializer.Serialize(writer, "LinkedIn");
                    return;
                case SocialNetwork.Mailru:
                    serializer.Serialize(writer, "Mailru");
                    return;
                case SocialNetwork.Odnoklassniki:
                    serializer.Serialize(writer, "Odnoklassniki");
                    return;
                case SocialNetwork.Twitter:
                    serializer.Serialize(writer, "Twitter");
                    return;
                case SocialNetwork.VKontakte:
                    serializer.Serialize(writer, "VKontakte");
                    return;
                case SocialNetwork.Yahoo:
                    serializer.Serialize(writer, "Yahoo");
                    return;
                case SocialNetwork.Yandex:
                    serializer.Serialize(writer, "Yandex");
                    return;
            }
            throw new Exception("Cannot marshal type SocialNetwork");
        }

        public static readonly SocialNetworkConverter Singleton = new SocialNetworkConverter();
    }

    internal class TimeFrameDateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TimeFrameDate) || t == typeof(TimeFrameDate?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new TimeFrameDate { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    DateTimeOffset dt;
                    if (DateTimeOffset.TryParse(stringValue, out dt))
                    {
                        return new TimeFrameDate { DateTime = dt };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type TimeFrameDate");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (TimeFrameDate)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.DateTime != null)
            {
                serializer.Serialize(writer, value.DateTime.Value.ToString("o", System.Globalization.CultureInfo.InvariantCulture));
                return;
            }
            throw new Exception("Cannot marshal type TimeFrameDate");
        }

        public static readonly TimeFrameDateConverter Singleton = new TimeFrameDateConverter();
    }

    internal class VerticalTranslationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VerticalTranslation) || t == typeof(VerticalTranslation?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BEAUTY":
                    return VerticalTranslation.Beauty;
                case "FITNESS":
                    return VerticalTranslation.Fitness;
                case "GENERIC":
                    return VerticalTranslation.Generic;
                case "MEDICAL":
                    return VerticalTranslation.Medical;
                case "NONE":
                    return VerticalTranslation.None;
                case "SPORT":
                    return VerticalTranslation.Sport;
                case "YOGA":
                    return VerticalTranslation.Yoga;
            }
            throw new Exception("Cannot unmarshal type VerticalTranslation");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VerticalTranslation)untypedValue;
            switch (value)
            {
                case VerticalTranslation.Beauty:
                    serializer.Serialize(writer, "BEAUTY");
                    return;
                case VerticalTranslation.Fitness:
                    serializer.Serialize(writer, "FITNESS");
                    return;
                case VerticalTranslation.Generic:
                    serializer.Serialize(writer, "GENERIC");
                    return;
                case VerticalTranslation.Medical:
                    serializer.Serialize(writer, "MEDICAL");
                    return;
                case VerticalTranslation.None:
                    serializer.Serialize(writer, "NONE");
                    return;
                case VerticalTranslation.Sport:
                    serializer.Serialize(writer, "SPORT");
                    return;
                case VerticalTranslation.Yoga:
                    serializer.Serialize(writer, "YOGA");
                    return;
            }
            throw new Exception("Cannot marshal type VerticalTranslation");
        }

        public static readonly VerticalTranslationConverter Singleton = new VerticalTranslationConverter();
    }

    internal class GroupConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Group) || t == typeof(Group?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "FRENCH":
                    return Group.French;
                case "GENERAL":
                    return Group.General;
                case "HUNGARIAN":
                    return Group.Hungarian;
                case "LATVIAN":
                    return Group.Latvian;
            }
            throw new Exception("Cannot unmarshal type Group");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Group)untypedValue;
            switch (value)
            {
                case Group.French:
                    serializer.Serialize(writer, "FRENCH");
                    return;
                case Group.General:
                    serializer.Serialize(writer, "GENERAL");
                    return;
                case Group.Hungarian:
                    serializer.Serialize(writer, "HUNGARIAN");
                    return;
                case Group.Latvian:
                    serializer.Serialize(writer, "LATVIAN");
                    return;
            }
            throw new Exception("Cannot marshal type Group");
        }

        public static readonly GroupConverter Singleton = new GroupConverter();
    }

    internal class FieldElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FieldElement) || t == typeof(FieldElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "email":
                    return FieldElement.Email;
                case "name":
                    return FieldElement.Name;
                case "surname":
                    return FieldElement.Surname;
            }
            throw new Exception("Cannot unmarshal type FieldElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FieldElement)untypedValue;
            switch (value)
            {
                case FieldElement.Email:
                    serializer.Serialize(writer, "email");
                    return;
                case FieldElement.Name:
                    serializer.Serialize(writer, "name");
                    return;
                case FieldElement.Surname:
                    serializer.Serialize(writer, "surname");
                    return;
            }
            throw new Exception("Cannot marshal type FieldElement");
        }

        public static readonly FieldElementConverter Singleton = new FieldElementConverter();
    }

    internal class ResourceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Resource) || t == typeof(Resource?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new Resource { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Resource { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Resource { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Resource { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Resource { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ResourceClass>(reader);
                    return new Resource { ResourceClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new Resource { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Resource");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Resource)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.ResourceClass != null)
            {
                serializer.Serialize(writer, value.ResourceClass);
                return;
            }
            throw new Exception("Cannot marshal type Resource");
        }

        public static readonly ResourceConverter Singleton = new ResourceConverter();
    }

    internal class StartPeriodConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StartPeriod) || t == typeof(StartPeriod?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "month":
                    return StartPeriod.Month;
                case "week":
                    return StartPeriod.Week;
            }
            throw new Exception("Cannot unmarshal type StartPeriod");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StartPeriod)untypedValue;
            switch (value)
            {
                case StartPeriod.Month:
                    serializer.Serialize(writer, "month");
                    return;
                case StartPeriod.Week:
                    serializer.Serialize(writer, "week");
                    return;
            }
            throw new Exception("Cannot marshal type StartPeriod");
        }

        public static readonly StartPeriodConverter Singleton = new StartPeriodConverter();
    }

    internal class OrderWeightConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OrderWeight) || t == typeof(OrderWeight?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new OrderWeight { };
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new OrderWeight { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new OrderWeight { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type OrderWeight");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (OrderWeight)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type OrderWeight");
        }

        public static readonly OrderWeightConverter Singleton = new OrderWeightConverter();
    }

    internal class AccessTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AccessType) || t == typeof(AccessType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "NONE":
                    return AccessType.None;
                case "WORKER_EXTENDED":
                    return AccessType.WorkerExtended;
                case "WORKER_SIMPLE":
                    return AccessType.WorkerSimple;
            }
            throw new Exception("Cannot unmarshal type AccessType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AccessType)untypedValue;
            switch (value)
            {
                case AccessType.None:
                    serializer.Serialize(writer, "NONE");
                    return;
                case AccessType.WorkerExtended:
                    serializer.Serialize(writer, "WORKER_EXTENDED");
                    return;
                case AccessType.WorkerSimple:
                    serializer.Serialize(writer, "WORKER_SIMPLE");
                    return;
            }
            throw new Exception("Cannot marshal type AccessType");
        }

        public static readonly AccessTypeConverter Singleton = new AccessTypeConverter();
    }

    internal class ResourceStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResourceStatus) || t == typeof(ResourceStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ACTIVE":
                    return ResourceStatus.Active;
                case "INACTIVE":
                    return ResourceStatus.Inactive;
            }
            throw new Exception("Cannot unmarshal type ResourceStatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ResourceStatus)untypedValue;
            switch (value)
            {
                case ResourceStatus.Active:
                    serializer.Serialize(writer, "ACTIVE");
                    return;
                case ResourceStatus.Inactive:
                    serializer.Serialize(writer, "INACTIVE");
                    return;
            }
            throw new Exception("Cannot marshal type ResourceStatus");
        }

        public static readonly ResourceStatusConverter Singleton = new ResourceStatusConverter();
    }

    internal class AdditionalPriceTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AdditionalPriceType) || t == typeof(AdditionalPriceType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "average":
                    return AdditionalPriceType.Average;
                case "begin_with":
                    return AdditionalPriceType.BeginWith;
                case "equal":
                    return AdditionalPriceType.Equal;
            }
            throw new Exception("Cannot unmarshal type AdditionalPriceType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AdditionalPriceType)untypedValue;
            switch (value)
            {
                case AdditionalPriceType.Average:
                    serializer.Serialize(writer, "average");
                    return;
                case AdditionalPriceType.BeginWith:
                    serializer.Serialize(writer, "begin_with");
                    return;
                case AdditionalPriceType.Equal:
                    serializer.Serialize(writer, "equal");
                    return;
            }
            throw new Exception("Cannot marshal type AdditionalPriceType");
        }

        public static readonly AdditionalPriceTypeConverter Singleton = new AdditionalPriceTypeConverter();
    }

    internal class ChildrenTaxonomyTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ChildrenTaxonomyType) || t == typeof(ChildrenTaxonomyType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "child":
                    return ChildrenTaxonomyType.Child;
                case "none":
                    return ChildrenTaxonomyType.None;
                case "parent":
                    return ChildrenTaxonomyType.Parent;
            }
            throw new Exception("Cannot unmarshal type ChildrenTaxonomyType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ChildrenTaxonomyType)untypedValue;
            switch (value)
            {
                case ChildrenTaxonomyType.Child:
                    serializer.Serialize(writer, "child");
                    return;
                case ChildrenTaxonomyType.None:
                    serializer.Serialize(writer, "none");
                    return;
                case ChildrenTaxonomyType.Parent:
                    serializer.Serialize(writer, "parent");
                    return;
            }
            throw new Exception("Cannot marshal type ChildrenTaxonomyType");
        }

        public static readonly ChildrenTaxonomyTypeConverter Singleton = new ChildrenTaxonomyTypeConverter();
    }

    internal class DateLimitTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DateLimitType) || t == typeof(DateLimitType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "all_dates":
                    return DateLimitType.AllDates;
                case "from_date":
                    return DateLimitType.FromDate;
                case "range_dates":
                    return DateLimitType.RangeDates;
                case "to_date":
                    return DateLimitType.ToDate;
            }
            throw new Exception("Cannot unmarshal type DateLimitType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DateLimitType)untypedValue;
            switch (value)
            {
                case DateLimitType.AllDates:
                    serializer.Serialize(writer, "all_dates");
                    return;
                case DateLimitType.FromDate:
                    serializer.Serialize(writer, "from_date");
                    return;
                case DateLimitType.RangeDates:
                    serializer.Serialize(writer, "range_dates");
                    return;
                case DateLimitType.ToDate:
                    serializer.Serialize(writer, "to_date");
                    return;
            }
            throw new Exception("Cannot marshal type DateLimitType");
        }

        public static readonly DateLimitTypeConverter Singleton = new DateLimitTypeConverter();
    }

    internal class DiscountConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Discount) || t == typeof(Discount?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new Discount { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Discount { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Discount { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Discount { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Discount { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<DiscountClass>(reader);
                    return new Discount { DiscountClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new Discount { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Discount");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Discount)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.DiscountClass != null)
            {
                serializer.Serialize(writer, value.DiscountClass);
                return;
            }
            throw new Exception("Cannot marshal type Discount");
        }

        public static readonly DiscountConverter Singleton = new DiscountConverter();
    }

    internal class DaysOfWeekConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DaysOfWeek) || t == typeof(DaysOfWeek?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "fri":
                    return DaysOfWeek.Fri;
                case "mon":
                    return DaysOfWeek.Mon;
                case "sat":
                    return DaysOfWeek.Sat;
                case "sun":
                    return DaysOfWeek.Sun;
                case "thu":
                    return DaysOfWeek.Thu;
                case "tue":
                    return DaysOfWeek.Tue;
                case "wed":
                    return DaysOfWeek.Wed;
            }
            throw new Exception("Cannot unmarshal type DaysOfWeek");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DaysOfWeek)untypedValue;
            switch (value)
            {
                case DaysOfWeek.Fri:
                    serializer.Serialize(writer, "fri");
                    return;
                case DaysOfWeek.Mon:
                    serializer.Serialize(writer, "mon");
                    return;
                case DaysOfWeek.Sat:
                    serializer.Serialize(writer, "sat");
                    return;
                case DaysOfWeek.Sun:
                    serializer.Serialize(writer, "sun");
                    return;
                case DaysOfWeek.Thu:
                    serializer.Serialize(writer, "thu");
                    return;
                case DaysOfWeek.Tue:
                    serializer.Serialize(writer, "tue");
                    return;
                case DaysOfWeek.Wed:
                    serializer.Serialize(writer, "wed");
                    return;
            }
            throw new Exception("Cannot marshal type DaysOfWeek");
        }

        public static readonly DaysOfWeekConverter Singleton = new DaysOfWeekConverter();
    }

    internal class RepeatsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Repeats) || t == typeof(Repeats?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "daily":
                    return Repeats.Daily;
                case "none":
                    return Repeats.None;
                case "weekly":
                    return Repeats.Weekly;
            }
            throw new Exception("Cannot unmarshal type Repeats");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Repeats)untypedValue;
            switch (value)
            {
                case Repeats.Daily:
                    serializer.Serialize(writer, "daily");
                    return;
                case Repeats.None:
                    serializer.Serialize(writer, "none");
                    return;
                case Repeats.Weekly:
                    serializer.Serialize(writer, "weekly");
                    return;
            }
            throw new Exception("Cannot marshal type Repeats");
        }

        public static readonly RepeatsConverter Singleton = new RepeatsConverter();
    }

    internal class OnlineModeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OnlineMode) || t == typeof(OnlineMode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ONCALL_ONLINE":
                    return OnlineMode.OncallOnline;
                case "PLAN_CLINIC":
                    return OnlineMode.PlanClinic;
                case "PLAN_CLINIC_ONLINE":
                    return OnlineMode.PlanClinicOnline;
                case "PLAN_ONLINE":
                    return OnlineMode.PlanOnline;
            }
            throw new Exception("Cannot unmarshal type OnlineMode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OnlineMode)untypedValue;
            switch (value)
            {
                case OnlineMode.OncallOnline:
                    serializer.Serialize(writer, "ONCALL_ONLINE");
                    return;
                case OnlineMode.PlanClinic:
                    serializer.Serialize(writer, "PLAN_CLINIC");
                    return;
                case OnlineMode.PlanClinicOnline:
                    serializer.Serialize(writer, "PLAN_CLINIC_ONLINE");
                    return;
                case OnlineMode.PlanOnline:
                    serializer.Serialize(writer, "PLAN_ONLINE");
                    return;
            }
            throw new Exception("Cannot marshal type OnlineMode");
        }

        public static readonly OnlineModeConverter Singleton = new OnlineModeConverter();
    }

    internal class TaxonomyTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TaxonomyType) || t == typeof(TaxonomyType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CATEGORY":
                    return TaxonomyType.Category;
                case "SERVICE":
                    return TaxonomyType.Service;
                case "SUBCATEGORY":
                    return TaxonomyType.Subcategory;
            }
            throw new Exception("Cannot unmarshal type TaxonomyType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TaxonomyType)untypedValue;
            switch (value)
            {
                case TaxonomyType.Category:
                    serializer.Serialize(writer, "CATEGORY");
                    return;
                case TaxonomyType.Service:
                    serializer.Serialize(writer, "SERVICE");
                    return;
                case TaxonomyType.Subcategory:
                    serializer.Serialize(writer, "SUBCATEGORY");
                    return;
            }
            throw new Exception("Cannot marshal type TaxonomyType");
        }

        public static readonly TaxonomyTypeConverter Singleton = new TaxonomyTypeConverter();
    }

    internal class CracServerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CracServer) || t == typeof(CracServer?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CRAC":
                    return CracServer.Crac;
                case "CRAC_PROD3":
                    return CracServer.CracProd3;
            }
            throw new Exception("Cannot unmarshal type CracServer");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CracServer)untypedValue;
            switch (value)
            {
                case CracServer.Crac:
                    serializer.Serialize(writer, "CRAC");
                    return;
                case CracServer.CracProd3:
                    serializer.Serialize(writer, "CRAC_PROD3");
                    return;
            }
            throw new Exception("Cannot marshal type CracServer");
        }

        public static readonly CracServerConverter Singleton = new CracServerConverter();
    }

    internal class RuleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rule) || t == typeof(Rule?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CUSTOM":
                    return Rule.Custom;
                case "NEAREST_INTEGER":
                    return Rule.NearestInteger;
                case "TWO_DECIMALS":
                    return Rule.TwoDecimals;
            }
            throw new Exception("Cannot unmarshal type Rule");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rule)untypedValue;
            switch (value)
            {
                case Rule.Custom:
                    serializer.Serialize(writer, "CUSTOM");
                    return;
                case Rule.NearestInteger:
                    serializer.Serialize(writer, "NEAREST_INTEGER");
                    return;
                case Rule.TwoDecimals:
                    serializer.Serialize(writer, "TWO_DECIMALS");
                    return;
            }
            throw new Exception("Cannot marshal type Rule");
        }

        public static readonly RuleConverter Singleton = new RuleConverter();
    }

    internal class PaymentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Payment) || t == typeof(Payment?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "OPTIONAL":
                    return Payment.Optional;
                case "REQUIRED":
                    return Payment.Required;
                case "WITHOUT":
                    return Payment.Without;
            }
            throw new Exception("Cannot unmarshal type Payment");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Payment)untypedValue;
            switch (value)
            {
                case Payment.Optional:
                    serializer.Serialize(writer, "OPTIONAL");
                    return;
                case Payment.Required:
                    serializer.Serialize(writer, "REQUIRED");
                    return;
                case Payment.Without:
                    serializer.Serialize(writer, "WITHOUT");
                    return;
            }
            throw new Exception("Cannot marshal type Payment");
        }

        public static readonly PaymentConverter Singleton = new PaymentConverter();
    }

    internal class DiscountTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DiscountType) || t == typeof(DiscountType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "PERCENT")
            {
                return DiscountType.Percent;
            }
            throw new Exception("Cannot unmarshal type DiscountType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DiscountType)untypedValue;
            if (value == DiscountType.Percent)
            {
                serializer.Serialize(writer, "PERCENT");
                return;
            }
            throw new Exception("Cannot marshal type DiscountType");
        }

        public static readonly DiscountTypeConverter Singleton = new DiscountTypeConverter();
    }

    internal class UseDirectScheduleReadConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(UseDirectScheduleRead) || t == typeof(UseDirectScheduleRead?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ALL":
                    return UseDirectScheduleRead.All;
                case "AUTHENTICATED":
                    return UseDirectScheduleRead.Authenticated;
                case "GUEST":
                    return UseDirectScheduleRead.Guest;
                case "NONE":
                    return UseDirectScheduleRead.None;
            }
            throw new Exception("Cannot unmarshal type UseDirectScheduleRead");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (UseDirectScheduleRead)untypedValue;
            switch (value)
            {
                case UseDirectScheduleRead.All:
                    serializer.Serialize(writer, "ALL");
                    return;
                case UseDirectScheduleRead.Authenticated:
                    serializer.Serialize(writer, "AUTHENTICATED");
                    return;
                case UseDirectScheduleRead.Guest:
                    serializer.Serialize(writer, "GUEST");
                    return;
                case UseDirectScheduleRead.None:
                    serializer.Serialize(writer, "NONE");
                    return;
            }
            throw new Exception("Cannot marshal type UseDirectScheduleRead");
        }

        public static readonly UseDirectScheduleReadConverter Singleton = new UseDirectScheduleReadConverter();
    }

    internal class WorkerSortingTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WorkerSortingType) || t == typeof(WorkerSortingType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "most_free":
                    return WorkerSortingType.MostFree;
                case "none":
                    return WorkerSortingType.None;
                case "workload":
                    return WorkerSortingType.Workload;
            }
            throw new Exception("Cannot unmarshal type WorkerSortingType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WorkerSortingType)untypedValue;
            switch (value)
            {
                case WorkerSortingType.MostFree:
                    serializer.Serialize(writer, "most_free");
                    return;
                case WorkerSortingType.None:
                    serializer.Serialize(writer, "none");
                    return;
                case WorkerSortingType.Workload:
                    serializer.Serialize(writer, "workload");
                    return;
            }
            throw new Exception("Cannot marshal type WorkerSortingType");
        }

        public static readonly WorkerSortingTypeConverter Singleton = new WorkerSortingTypeConverter();
    }

    internal class ResultBusinessConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResultBusiness) || t == typeof(ResultBusiness?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new ResultBusiness { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new ResultBusiness { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new ResultBusiness { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new ResultBusiness { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ResultBusiness { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<HilariousBusiness>(reader);
                    return new ResultBusiness { HilariousBusiness = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new ResultBusiness { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ResultBusiness");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ResultBusiness)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.HilariousBusiness != null)
            {
                serializer.Serialize(writer, value.HilariousBusiness);
                return;
            }
            throw new Exception("Cannot marshal type ResultBusiness");
        }

        public static readonly ResultBusinessConverter Singleton = new ResultBusinessConverter();
    }

    internal class FluffyPaymentProviderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FluffyPaymentProvider) || t == typeof(FluffyPaymentProvider?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DISABLE":
                    return FluffyPaymentProvider.Disable;
                case "cloudpayments":
                    return FluffyPaymentProvider.Cloudpayments;
                case "deltaProcessing":
                    return FluffyPaymentProvider.DeltaProcessing;
                case "pelecard":
                    return FluffyPaymentProvider.Pelecard;
                case "yandexMoney":
                    return FluffyPaymentProvider.YandexMoney;
            }
            throw new Exception("Cannot unmarshal type FluffyPaymentProvider");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FluffyPaymentProvider)untypedValue;
            switch (value)
            {
                case FluffyPaymentProvider.Disable:
                    serializer.Serialize(writer, "DISABLE");
                    return;
                case FluffyPaymentProvider.Cloudpayments:
                    serializer.Serialize(writer, "cloudpayments");
                    return;
                case FluffyPaymentProvider.DeltaProcessing:
                    serializer.Serialize(writer, "deltaProcessing");
                    return;
                case FluffyPaymentProvider.Pelecard:
                    serializer.Serialize(writer, "pelecard");
                    return;
                case FluffyPaymentProvider.YandexMoney:
                    serializer.Serialize(writer, "yandexMoney");
                    return;
            }
            throw new Exception("Cannot marshal type FluffyPaymentProvider");
        }

        public static readonly FluffyPaymentProviderConverter Singleton = new FluffyPaymentProviderConverter();
    }

    internal class AddressConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Address) || t == typeof(Address?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new Address { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Address { Integer = integerValue };
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Address { Double = doubleValue };
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new Address { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Address { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<AddressCamelCaseSchema>(reader);
                    return new Address { AddressCamelCaseSchema = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<object>>(reader);
                    return new Address { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Address");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Address)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.AddressCamelCaseSchema != null)
            {
                serializer.Serialize(writer, value.AddressCamelCaseSchema);
                return;
            }
            throw new Exception("Cannot marshal type Address");
        }

        public static readonly AddressConverter Singleton = new AddressConverter();
    }

    internal class YandexFeedTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(YandexFeedType) || t == typeof(YandexFeedType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "dynamic":
                    return YandexFeedType.Dynamic;
                case "no":
                    return YandexFeedType.No;
                case "static":
                    return YandexFeedType.Static;
                case "static-service-only":
                    return YandexFeedType.StaticServiceOnly;
            }
            throw new Exception("Cannot unmarshal type YandexFeedType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (YandexFeedType)untypedValue;
            switch (value)
            {
                case YandexFeedType.Dynamic:
                    serializer.Serialize(writer, "dynamic");
                    return;
                case YandexFeedType.No:
                    serializer.Serialize(writer, "no");
                    return;
                case YandexFeedType.Static:
                    serializer.Serialize(writer, "static");
                    return;
                case YandexFeedType.StaticServiceOnly:
                    serializer.Serialize(writer, "static-service-only");
                    return;
            }
            throw new Exception("Cannot marshal type YandexFeedType");
        }

        public static readonly YandexFeedTypeConverter Singleton = new YandexFeedTypeConverter();
    }

    internal class FromSmsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FromSms) || t == typeof(FromSms?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Boolean:
                    var boolValue = serializer.Deserialize<bool>(reader);
                    return new FromSms { Bool = boolValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new FromSms { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type FromSms");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (FromSms)untypedValue;
            if (value.Bool != null)
            {
                serializer.Serialize(writer, value.Bool.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type FromSms");
        }

        public static readonly FromSmsConverter Singleton = new FromSmsConverter();
    }
}
